// ta_Dump File v3.0 -- code v8.5.2.0 rev11409
LeabraProject .projects[0] { 
 Doc_Group @.docs = [2] {
  taDoc @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
   };
  };
  taDoc @[1] { };
 };

 Wizard_Group @.wizards = [1] {
  LeabraWizard @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
   };
  };
 };

 ControlPanel_Group @.ctrl_panels = [2] {
  ControlPanel @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
   };

   ControlPanelMember_Group @.mbrs = [3] {
    ControlPanelMember @[0] { };
    ControlPanelMember @[1] { };
    ControlPanelMember @[2] { };
    ControlPanelMember_Group @.gp[0] = [6] { 
     ControlPanelMember @[0] { };
     ControlPanelMember @[1] { };
     ControlPanelMember @[2] { };
     ControlPanelMember @[3] { };
     ControlPanelMember @[4] { };
     ControlPanelMember @[5] { };
    };
    ControlPanelMember_Group @.gp[1] = [9] { 
     ControlPanelMember @[0] { };
     ControlPanelMember @[1] { };
     ControlPanelMember @[2] { };
     ControlPanelMember @[3] { };
     ControlPanelMember @[4] { };
     ControlPanelMember @[5] { };
     ControlPanelMember @[6] { };
     ControlPanelMember @[7] { };
     ControlPanelMember @[8] { };
    };
   };

   ControlPanelMethod_Group @.mths = [7] {
    ControlPanelMethod @[0] { };
    ControlPanelMethod @[1] { };
    ControlPanelMethod @[2] { };
    ControlPanelMethod @[3] { };
    ControlPanelMethod @[4] { };
    ControlPanelMethod @[5] { };
    ControlPanelMethod @[6] { };
   };
  };
  ClusterRun @[1] { 
   ControlPanelMember_Group @.mbrs = [0] {
   };

   ControlPanelMethod_Group @.mths = [0] {
   };

   ParamSearchAlgo_List @.search_algos = [0] {
   };
  };
 };

 ParamSet_Group @.active_params = [0] {
 };

 ArchivedParams_Group @.archived_params = [0] {
 };

 DataTable_Group @.data = [0] {
  DataTable_Group @.gp[0] = [1] { 
   DataTable @[0] { 
    DataTableCols @.data = [2] {
     String_Data @[0] { };
     float_Data @[1] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
  };
  DataTable_Group @.gp[1] = [2] { 
   DataTable @[0] { 
    DataTableCols @.data = [34] {
     int_Data @[0] { };
     int_Data @[1] { };
     String_Data @[2] { };
     int_Data @[3] { };
     int_Data @[4] { };
     int_Data @[5] { };
     float_Data @[6] { };
     String_Data @[7] { };
     String_Data @[8] { };
     String_Data @[9] { };
     float_Data @[10] { };
     float_Data @[11] { };
     float_Data @[12] { };
     float_Data @[13] { };
     float_Data @[14] { };
     float_Data @[15] { };
     float_Data @[16] { };
     float_Data @[17] { };
     float_Data @[18] { };
     float_Data @[19] { };
     float_Data @[20] { };
     float_Data @[21] { };
     float_Data @[22] { };
     float_Data @[23] { };
     float_Data @[24] { };
     float_Data @[25] { };
     float_Data @[26] { };
     float_Data @[27] { };
     float_Data @[28] { };
     float_Data @[29] { };
     float_Data @[30] { };
     float_Data @[31] { };
     float_Data @[32] { };
     float_Data @[33] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[1] { 
    DataTableCols @.data = [3] {
     int_Data @[0] { };
     float_Data @[1] { };
     float_Data @[2] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
  };
  DataTable_Group @.gp[2] { 
  };
 };

 Program_TopGroup @.programs = [3] {
  Program @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgVar_List @.objs_vars = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [0] {
   };

   ProgVar_List @.vars = [16] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
    ProgVar @[5] { };
    ProgVar @[6] { };
    ProgVar @[7] { };
    ProgVar @[8] { };
    ProgVar @[9] { };
    ProgVar @[10] { };
    ProgVar @[11] { };
    ProgVar @[12] { };
    ProgVar @[13] { };
    ProgVar @[14] { };
    ProgVar @[15] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [46] {
    Comment @[0] { };
    MemberAssign @[1] { };
    MemberAssign @[2] { };
    MemberAssign @[3] { };
    MemberAssign @[4] { };
    MemberAssign @[5] { };
    MemberAssign @[6] { };
    MemberAssign @[7] { };
    MemberAssign @[8] { };
    MemberAssign @[9] { };
    MemberAssign @[10] { };
    MemberAssign @[11] { };
    MemberAssign @[12] { };
    MemberAssign @[13] { };
    MemberAssign @[14] { };
    MemberAssign @[15] { };
    MemberAssign @[16] { };
    Comment @[17] { };
    MemberAssign @[18] { };
    MemberAssign @[19] { };
    MemberAssign @[20] { };
    MemberAssign @[21] { };
    MemberAssign @[22] { };
    MemberAssign @[23] { };
    MemberAssign @[24] { };
    MemberAssign @[25] { };
    MemberAssign @[26] { };
    MemberAssign @[27] { };
    MemberAssign @[28] { };
    MemberAssign @[29] { };
    MemberAssign @[30] { };
    MemberAssign @[31] { };
    MemberAssign @[32] { };
    MemberAssign @[33] { };
    MemberAssign @[34] { };
    Comment @[35] { };
    MemberAssign @[36] { };
    MemberAssign @[37] { };
    MemberAssign @[38] { };
    MemberAssign @[39] { };
    MethodCall @[40] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
    MethodCall @[41] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
    Comment @[42] { };
    OtherProgramVar @[43] { };
    ProgramCall @[44] { 
     ProgArg_List @.prog_args = [0] {
     };
    };
    MethodCall @[45] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
   };
  };
  Program @[1] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgVar_List @.objs_vars = [0] {
   };

   ProgType_List @.types = [1] {
    DynEnumType @[0] { 
     DynEnumItem_List @.enums = [2] {
      DynEnumItem @[0] { };
      DynEnumItem @[1] { };
     };
    };
   };

   ProgVar_List @.args = [0] {
   };

   ProgVar_List @.vars = [3] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [4] {
    If @[0] { 
     ProgEl_List @.true_code = [4] {
      MemberAssign @[0] { };
      MemberAssign @[1] { };
      MemberAssign @[2] { };
      MemberAssign @[3] { };
     };
    };
    Else @[1] { 
     ProgEl_List @.true_code = [4] {
      MemberAssign @[0] { };
      MemberAssign @[1] { };
      MemberAssign @[2] { };
      MemberAssign @[3] { };
     };
    };
    MethodCall @[2] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
    MethodCall @[3] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
   };
  };
  Program @[2] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgVar_List @.objs_vars = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [0] {
   };

   ProgVar_List @.vars = [2] {
    ProgVar @[0] { };
    ProgVar @[1] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [1] {
    DataGenCall @[0] { 
     ProgArg_List @.meth_args = [6] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
      ProgArg @[4] { };
      ProgArg @[5] { };
     };
    };
   };
  };
  Program_Group @.gp[0] = [8] { 
   Program @[0] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [6] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
     ProgVar @[3] { };
     ProgVar @[4] { };
     ProgVar @[5] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [2] {
     NetCounterInit @[0] { };
     AssignExpr @[1] { };
    };

    ProgEl_List @.prog_code = [10] {
     NetCounterInit @[0] { };
     AssignExpr @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MemberAssign @[4] { };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetDataLoop @[6] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       If @[1] { 
	ProgEl_List @.true_code = [1] {
	 StopStepPoint @[0] { };
	};
       };
      };
     };
     If @[7] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[9] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @[1] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @[0] { };
      };
     };
     If @[1] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     Comment @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[5] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[8] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @[2] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [2] {
       ProgVar @[0] { };
       ProgVar @[1] { };
      };
     };
     Comment @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[3] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
       AssignExpr @[1] { };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @[3] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[1] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     NetUpdateView @[2] { };
    };
   };
   Program @[4] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     LayerWriter @[0] { 
      LayerDataEl_List @.layer_data = [2] {
       LayerWriterEl @[0] { };
       LayerWriterEl @[1] { };
      };
     };
    };

    ProgVar_List @.objs_vars = [1] {
     ProgVar @[0] { };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [0] {
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @[5] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @[0] { 
      NetMonItem_List @.items = [25] {
       NetMonItem @[0] { };
       NetMonItem @[1] { };
       NetMonItem @[2] { };
       NetMonItem @[3] { };
       NetMonItem @[4] { };
       NetMonItem @[5] { };
       NetMonItem @[6] { };
       NetMonItem @[7] { };
       NetMonItem @[8] { };
       NetMonItem @[9] { };
       NetMonItem @[10] { };
       NetMonItem @[11] { };
       NetMonItem @[12] { };
       NetMonItem @[13] { };
       NetMonItem @[14] { };
       NetMonItem @[15] { };
       NetMonItem @[16] { };
       NetMonItem @[17] { };
       NetMonItem @[18] { };
       NetMonItem @[19] { };
       NetMonItem @[20] { };
       NetMonItem @[21] { };
       NetMonItem @[22] { };
       NetMonItem @[23] { };
       NetMonItem @[24] { };
      };
     };
    };

    ProgVar_List @.objs_vars = [1] {
     ProgVar @[0] { };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [4] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @[6] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @[0] { 
      NetMonItem_List @.items = [3] {
       NetMonItem @[0] { };
       NetMonItem @[1] { };
       NetMonItem @[2] { };
      };
     };
    };

    ProgVar_List @.objs_vars = [1] {
     ProgVar @[0] { };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @[7] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [6] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
     ProgVar @[3] { };
     ProgVar @[4] { };
     ProgVar @[5] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [6] {
     If @[0] { 
      ProgEl_List @.true_code = [1] {
       ReturnExpr @[0] { };
      };
     };
     MiscCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MiscCall @[2] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     AssignExpr @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
  };
 };

 taViewer_List @.viewers = [1] {
  MainWindowViewer @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
    UserDataItem @[1] { };
    UserDataItem @[2] { };
    UserDataItem @[3] { };
    UserDataItem @[4] { };
    UserDataItem @[5] { };
   };

   ToolBar_List @.toolbars = [1] {
    ToolBar @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   FrameViewer_List @.frames = [3] {
    BrowseViewerTaBase @[0] { };
    PanelViewer @[1] { };
    T3PanelViewer @[2] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };

     T3Panel_List @.panels = [3] {
      T3Panel @[0] { 
       T3DataView_List @.root_view.children = [2] {
	NetView @[0] { 
	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 NetViewStateItem_List @.net_state_text.state_items = [20] {
	  NetViewStateItem @[0] { };
	  NetViewStateItem @[1] { };
	  NetViewStateItem @[2] { };
	  NetViewStateItem @[3] { };
	  NetViewStateItem @[4] { };
	  NetViewStateItem @[5] { };
	  NetViewStateItem @[6] { };
	  NetViewStateItem @[7] { };
	  NetViewStateItem @[8] { };
	  NetViewStateItem @[9] { };
	  NetViewStateItem @[10] { };
	  NetViewStateItem @[11] { };
	  NetViewStateItem @[12] { };
	  NetViewStateItem @[13] { };
	  NetViewStateItem @[14] { };
	  NetViewStateItem @[15] { };
	  NetViewStateItem @[16] { };
	  NetViewStateItem @[17] { };
	  NetViewStateItem @[18] { };
	  NetViewStateItem @[19] { };
	 };

	 ScaleRange_List @.scale_ranges = [9] {
	  ScaleRange @[0] { };
	  ScaleRange @[1] { };
	  ScaleRange @[2] { };
	  ScaleRange @[3] { };
	  ScaleRange @[4] { };
	  ScaleRange @[5] { };
	  ScaleRange @[6] { };
	  ScaleRange @[7] { };
	  ScaleRange @[8] { };
	 };
	};
	GraphTableView @[1] { 
	 T3DataView_List @.children = [3] {
	  GraphColView @[0] { };
	  GraphColView @[1] { };
	  GraphColView @[2] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [8] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	 };

	 GraphPlotView_List @.errbars = [8] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
      T3Panel @[1] { 
       T3DataView_List @.root_view.children = [2] {
	NetView @[0] { 
	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 NetViewStateItem_List @.net_state_text.state_items = [20] {
	  NetViewStateItem @[0] { };
	  NetViewStateItem @[1] { };
	  NetViewStateItem @[2] { };
	  NetViewStateItem @[3] { };
	  NetViewStateItem @[4] { };
	  NetViewStateItem @[5] { };
	  NetViewStateItem @[6] { };
	  NetViewStateItem @[7] { };
	  NetViewStateItem @[8] { };
	  NetViewStateItem @[9] { };
	  NetViewStateItem @[10] { };
	  NetViewStateItem @[11] { };
	  NetViewStateItem @[12] { };
	  NetViewStateItem @[13] { };
	  NetViewStateItem @[14] { };
	  NetViewStateItem @[15] { };
	  NetViewStateItem @[16] { };
	  NetViewStateItem @[17] { };
	  NetViewStateItem @[18] { };
	  NetViewStateItem @[19] { };
	 };

	 ScaleRange_List @.scale_ranges = [5] {
	  ScaleRange @[0] { };
	  ScaleRange @[1] { };
	  ScaleRange @[2] { };
	  ScaleRange @[3] { };
	  ScaleRange @[4] { };
	 };
	};
	GraphTableView @[1] { 
	 T3DataView_List @.children = [3] {
	  GraphColView @[0] { };
	  GraphColView @[1] { };
	  GraphColView @[2] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [8] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	 };

	 GraphPlotView_List @.errbars = [8] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
      T3Panel @[2] { 
       T3DataView_List @.root_view.children = [1] {
	GridTableView @[0] { 
	 T3DataView_List @.children = [2] {
	  GridColView @[0] { };
	  GridColView @[1] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
     };
    };
   };

   DockViewer_List @.docks = [1] {
    ToolBoxDockViewer @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
      UserDataItem @[2] { };
      UserDataItem @[3] { };
      UserDataItem @[4] { };
      UserDataItem @[5] { };
     };
    };
   };
  };
 };

 Network_Group @.networks = [2] {
  LeabraNetwork @[0] { 
   BaseSpec_Group @.specs = [6] {
    LeabraUnitSpec @[0] { 
     BaseSpec_Group @.children = [1] {
      LeabraUnitSpec @[0] { 
       BaseSpec_Group @.children = [0] {
       };
      };
     };
    };
    LeabraConSpec @[1] { 
     BaseSpec_Group @.children = [2] {
      LeabraConSpec @[0] { 
       BaseSpec_Group @.children = [0] {
       };

       Schedule @.lrate_sched = [0] {
       };
      };
      LeabraConSpec @[1] { 
       BaseSpec_Group @.children = [0] {
       };

       Schedule @.lrate_sched = [0] {
       };
      };
     };

     Schedule @.lrate_sched = [0] {
     };
    };
    LeabraLayerSpec @[2] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    FullPrjnSpec @[3] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    LeabraConSpec @[4] { 
     BaseSpec_Group @.children = [1] {
      LeabraConSpec @[0] { 
       BaseSpec_Group @.children = [0] {
       };

       Schedule @.lrate_sched = [0] {
       };
      };
     };

     Schedule @.lrate_sched = [0] {
     };
    };
    LeabraBiasSpec @[5] { 
     BaseSpec_Group @.children = [0] {
     };

     Schedule @.lrate_sched = [0] {
     };
    };
   };

   ParamSeq_Group @.param_seqs = [0] {
   };

   NetMonItem_List @.monitor.items = [0] {
   };

   DataTableCols @.mon_data.data = [0] {
   };

   DataOpList @.mon_data.last_sort_spec.ops = [0] {
   };

   Layer_Group @.layers = [3] {
    LeabraLayer @[0] { 
     Projection_List @.projections = [0] {
     };
    };
    LeabraLayer @[1] { 
     Projection_List @.projections = [2] {
      LeabraPrjn @[0] { };
      LeabraPrjn @[1] { };
     };
    };
    LeabraLayer @[2] { 
     Projection_List @.projections = [3] {
      LeabraPrjn @[0] { };
      LeabraPrjn @[1] { };
      LeabraPrjn @[2] { };
     };
    };
   };

   Weights_List @.weights = [0] {
   };
  };
  LeabraNetwork @[1] { 
   BaseSpec_Group @.specs = [6] {
    LeabraUnitSpec @[0] { 
     BaseSpec_Group @.children = [1] {
      LeabraUnitSpec @[0] { 
       BaseSpec_Group @.children = [0] {
       };
      };
     };
    };
    LeabraConSpec @[1] { 
     BaseSpec_Group @.children = [2] {
      LeabraConSpec @[0] { 
       BaseSpec_Group @.children = [0] {
       };

       Schedule @.lrate_sched = [0] {
       };
      };
      LeabraConSpec @[1] { 
       BaseSpec_Group @.children = [0] {
       };

       Schedule @.lrate_sched = [0] {
       };
      };
     };

     Schedule @.lrate_sched = [0] {
     };
    };
    LeabraLayerSpec @[2] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    FullPrjnSpec @[3] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    LeabraConSpec @[4] { 
     BaseSpec_Group @.children = [1] {
      LeabraConSpec @[0] { 
       BaseSpec_Group @.children = [0] {
       };

       Schedule @.lrate_sched = [0] {
       };
      };
     };

     Schedule @.lrate_sched = [0] {
     };
    };
    LeabraBiasSpec @[5] { 
     BaseSpec_Group @.children = [0] {
     };

     Schedule @.lrate_sched = [0] {
     };
    };
   };

   ParamSeq_Group @.param_seqs = [0] {
   };

   NetMonItem_List @.monitor.items = [0] {
   };

   DataTableCols @.mon_data.data = [0] {
   };

   DataOpList @.mon_data.last_sort_spec.ops = [0] {
   };

   Layer_Group @.layers = [5] {
    LeabraLayer @[0] { 
     Projection_List @.projections = [0] {
     };
    };
    LeabraLayer @[1] { 
     Projection_List @.projections = [3] {
      LeabraPrjn @[0] { };
      LeabraPrjn @[1] { };
      LeabraPrjn @[2] { };
     };
    };
    LeabraLayer @[2] { 
     Projection_List @.projections = [4] {
      LeabraPrjn @[0] { };
      LeabraPrjn @[1] { };
      LeabraPrjn @[2] { };
      LeabraPrjn @[3] { };
     };
    };
    LeabraLayer @[3] { 
     Projection_List @.projections = [2] {
      LeabraPrjn @[0] { };
      LeabraPrjn @[1] { };
     };
    };
    LeabraLayer @[4] { 
     Projection_List @.projections = [3] {
      LeabraPrjn @[0] { };
      LeabraPrjn @[1] { };
      LeabraPrjn @[2] { };
     };
    };
   };

   Weights_List @.weights = [0] {
   };
  };
 };
};
LeabraProject .projects[0] {
 name="inhib";
 desc="Inhibitory interneurons control the activation of excitatory pyramidal neurons, through both feedforward and feedback projections. The result is a k-winners-take-all distributed pattern of activity.


";
 tags="Inhibition, Feedforward, Feedback, GABA, Activity Regulation, Competition, kWTA";
 version {
  major=8;
  minor=0;
  step=5;
 };
 author="Randall C. O'Reilly";
 email="emergent-users@grey.colorado.edu";
 license {
  license=GPLv2;
  owner_name="Regents of the University of Colorado";
  org="CCNLab at the University of Colorado Boulder";
  year="2016";
  custom=;
 };
 pub_cite="OReillyMunakataFrankEtAl12";
 wiki {wiki="CCN": page_name="CCNBook/Sims/Networks/Inhibition": };
 docs {
  name="docs";
  el_typ=taDoc;
  el_def=0;
  taDoc @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="user_pinned": value=1: val_type_fixed=0: };
   };
   name="ProjectDocs";
   desc=;
   web_doc=1;
   wiki="CCN";
   url="CCNBook/Sims/Networks/Inhibition";
   full_url="https://grey.colorado.edu/CompCogNeuro/index.php/CCNBook/Sims/Networks/Inhibition";
   text_size=1;
   text="<html>
<head></head>
<body>


</body>
</html>
";
   html_text="<!DOCTYPE html><html lang=\"en\" dir=\"ltr\" class=\"client-js\"><head>
<meta charset=\"UTF-8\">
<title>CCNBook/Sims/Networks/Inhibition - Computational Cognitive Neuroscience Wiki</title>
<script>document.documentElement.className = document.documentElement.className.replace( /(^|\\s)client-nojs(\\s|$)/, \"$1client-js$2\" );</script>
<script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({\"wgCanonicalNamespace\":\"\",\"wgCanonicalSpecialPageName\":!1,\"wgNamespaceNumber\":0,\"wgPageName\":\"CCNBook/Sims/Networks/Inhibition\",\"wgTitle\":\"CCNBook/Sims/Networks/Inhibition\",\"wgCurRevisionId\":5744,\"wgRevisionId\":5744,\"wgArticleId\":598,\"wgIsArticle\":!0,\"wgIsRedirect\":!1,\"wgAction\":\"view\",\"wgUserName\":\"Oreilly\",\"wgUserGroups\":[\"sysop\",\"*\",\"user\",\"autoconfirmed\"],\"wgCategories\":[\"PublishedProject\"],\"wgBreakFrames\":!1,\"wgPageContentLanguage\":\"en\",\"wgPageContentModel\":\"wikitext\",\"wgSeparatorTransformTable\":[\"\",\"\"],\"wgDigitTransformTable\":[\"\",\"\"],\"wgDefaultDateFormat\":\"dmy\",\"wgMonthNames\":[\"\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\"wgMonthNamesShort\":[\"\",\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],\"wgRelevantPageName\":\"CCNBook/Sims/Networks/Inhibition\",\"wgRelevantArticleId\":598,\"wgUserId\":3,\"wgUserEditCount\":3257,\"wgUserRegistration\":1200074928000,
\"wgUserNewMsgRevisionId\":null,\"wgIsProbablyEditable\":!0,\"wgRestrictionEdit\":[],\"wgRestrictionMove\":[],\"sfgAutocompleteValues\":[],\"sfgAutocompleteOnAllChars\":!1,\"sfgFieldProperties\":[],\"sfgDependentFields\":[],\"sfgShowOnSelect\":[],\"sfgScriptPath\":\"/CompCogNeuro/extensions/SemanticForms\",\"wgSVGEditEditor\":\"http://svg-edit.googlecode.com/svn/trunk/editor/svg-editor.html\",\"wgHeaderTabsTabIndexes\":[],\"wgWikiEditorEnabledModules\":{\"toolbar\":!0,\"dialogs\":!0,\"preview\":!0,\"publish\":!1},\"wgCategoryTreePageCategoryOptions\":\"{\\\"mode\\\":0,\\\"hideprefix\\\":20,\\\"showcount\\\":true,\\\"namespaces\\\":false}\"});mw.loader.implement(\"user.options\",function($,jQuery){mw.user.options.set({\"editsectiononrightclick\":\"1\",\"enotifminoredits\":\"1\",\"previewontop\":\"\",\"watchmoves\":\"1\",\"searchNs1\":\"1\",\"searchNs2\":\"1\",\"searchNs3\":\"1\",\"searchNs4\":\"1\",\"searchNs5\":\"1\",\"searchNs10\":\"1\",\"timecorrection\":\"ZoneInfo|-360|America/Denver\",\"watchlisttoken\":\"d0d481c226fbf5f75451a79f689ec8ed40c261a9\"});});mw.loader.implement(\"user.tokens\",function($,jQuery){mw.user.tokens.set({\"editToken\":\"70eb4130205e2135bc2d8acd17282cfe5a7a9fc1+\\\\\",\"patrolToken\":\"9edd747af31649ee9a5f997067cce41f5a7a9fc1+\\\\\",\"watchToken\":\"4b2c13096e1fa6cce084b73943382f2a5a7a9fc1+\\\\\"});});mw.loader.load([\"ext.smw.style\",\"ext.smw.tooltips\",\"mediawiki.page.startup\",\"mediawiki.legacy.wikibits\",\"skins.vector.js\"]);
} );</script>
<link rel=\"stylesheet\" href=\"/CompCogNeuro/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.sectionAnchor%7Cmediawiki.skinning.interface%7Cskins.vector.styles&amp;only=styles&amp;skin=vector\">
<link rel=\"stylesheet\" href=\"/CompCogNeuro/extensions/HeaderTabs/skins/ext.headertabs.large.css\">
<meta name=\"ResourceLoaderDynamicStyles\" content=\"\">
<link rel=\"stylesheet\" href=\"/CompCogNeuro/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector\">
<style>a:lang(ar),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}</style>
<script async=\"\" src=\"/CompCogNeuro/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector\"></script>
<meta name=\"generator\" content=\"MediaWiki 1.26.4\">
<link rel=\"ExportRDF\" type=\"application/rdf+xml\" title=\"CCNBook/Sims/Networks/Inhibition\" href=\"/CompCogNeuro/index.php?title=Special:ExportRDF/CCNBook/Sims/Networks/Inhibition&amp;xmlmime=rdf\">
<link rel=\"alternate\" type=\"application/x-wiki\" title=\"Edit\" href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Inhibition&amp;action=edit\">
<link rel=\"edit\" title=\"Edit\" href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Inhibition&amp;action=edit\">
<link rel=\"shortcut icon\" href=\"/emergent/favicon.ico\">
<link rel=\"search\" type=\"application/opensearchdescription+xml\" href=\"/CompCogNeuro/opensearch_desc.php\" title=\"Computational Cognitive Neuroscience Wiki (en)\">
<link rel=\"EditURI\" type=\"application/rsd+xml\" href=\"https://grey.colorado.edu/CompCogNeuro/api.php?action=rsd\">
<link rel=\"alternate\" type=\"application/atom+xml\" title=\"Computational Cognitive Neuroscience Wiki Atom feed\" href=\"/CompCogNeuro/index.php?title=Special:RecentChanges&amp;feed=atom\">
<!--[if lt IE 7]><style type=\"text/css\">body{behavior:url(\"/CompCogNeuro/skins/Vector/csshover.min.htc\")}</style><![endif]-->
</head>
<body class=\"mediawiki ltr sitedir-ltr ns-0 ns-subject page-CCNBook_Sims_Networks_Inhibition skin-vector action-view\">
		<div id=\"mw-page-base\" class=\"noprint\"></div>
		<div id=\"mw-head-base\" class=\"noprint\"></div>
		<div id=\"content\" class=\"mw-body\" role=\"main\">
			<a id=\"top\"></a>

						<div class=\"mw-indicators\">
</div>
			<h1 id=\"firstHeading\" class=\"firstHeading\" lang=\"en\">CCNBook/Sims/Networks/Inhibition</h1>
									<div id=\"bodyContent\" class=\"mw-body-content\">
									<div id=\"siteSub\">From Computational Cognitive Neuroscience Wiki</div>
								<div id=\"contentSub\"></div>
												<div id=\"jump-to-nav\" class=\"mw-jump\">
					Jump to:					<a href=\"#mw-head\">navigation</a>, 					<a href=\"#p-search\">search</a>
				</div>
				<div id=\"mw-content-text\" lang=\"en\" dir=\"ltr\" class=\"mw-content-ltr\"><table style=\"width: 35em; font-size: 90%; border: 1px solid #aaaaaa; background-color: #f9f9f9; color: black; margin-bottom: 0.5em; margin-left: 1em; padding: 0.2em; float: right; clear: right; text-align:left;\">
<tbody><tr>
<th style=\"text-align: center; background-color:#ccccff;\" colspan=\"2\"><big>CCNBook/Sims/Networks/Inhibition</big>
</th></tr>
<tr>
<th> Project Name
</th>
<td> inhib
</td></tr>
<tr>
<th> Filename
</th>
<td> <a href=\"/CompCogNeuro/index.php/File:inhib.proj\" title=\"File:inhib.proj\">File:inhib.proj</a> <a href=\"/CompCogNeuro/index.php?title=.OpenProjectFromWeb(inhib.proj,https://grey.colorado.edu/CompCogNeuro/index.php/MainPage)&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".OpenProjectFromWeb(inhib.proj,https://grey.colorado.edu/CompCogNeuro/index.php/MainPage) (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Open Project in emergent</span></a>
</td></tr>
<tr>
<th> Author
</th>
<td>  Randall C. O'Reilly
</td></tr>
<tr>
<th> Email
</th>
<td> emergent-users@grey.colorado.edu
</td></tr>
<tr>
<th> Publication
</th>
<td> <a href=\"/CompCogNeuro/index.php/OReillyMunakataFrankEtAl12\" title=\"OReillyMunakataFrankEtAl12\">(O'Reilly, Munakata, Frank, Hazy, &amp; Contributors, 2012)</a>
</td></tr>
<tr>
<th> First Published
</th>
<td> Jul 26 2016
</td></tr>
<tr>
<th> Tags
</th>
<td>  Inhibition, Feedforward, Feedback, GABA, Activity Regulation, Competition, kWTA
</td></tr>
<tr>
<th> Description
</th>
<td>  Inhibitory interneurons control the activation of excitatory pyramidal neurons, through both feedforward and feedback projections. The result is a k-winners-take-all distributed pattern of activity.
</td></tr>
<tr>
<th> Updated
</th>
<td> 28 July 2016,  6 September 2016,  13 January 2017,  11 January 2018
</td></tr>
<tr>
<th> Versions
</th>
<td> 8.0.0,  8.0.2,  8.0.3,  8.0.4
</td></tr>
<tr>
<th> Emergent Versions
</th>
<td> 8.0.0,  8.0.4,  8.5.0
</td></tr>
<tr>
<th> Other Files
</th>
<td>
</td></tr></tbody></table>
<p><br>
Back to <a href=\"/CompCogNeuro/index.php/CCNBook/Sims/All\" title=\"CCNBook/Sims/All\">CCNBook/Sims/All</a> or <a href=\"/CompCogNeuro/index.php/CCNBook/Networks\" title=\"CCNBook/Networks\">Network Chapter</a>.
</p>
<div id=\"toc\" class=\"toc\"><div id=\"toctitle\"><h2>Contents</h2></div>
<ul>
<li class=\"toclevel-1 tocsection-1\"><a href=\"#Introduction\"><span class=\"tocnumber\">1</span> <span class=\"toctext\">Introduction</span></a></li>
<li class=\"toclevel-1 tocsection-2\"><a href=\"#Strength_of_Inhibitory_Conductances\"><span class=\"tocnumber\">2</span> <span class=\"toctext\">Strength of Inhibitory Conductances</span></a></li>
<li class=\"toclevel-1 tocsection-3\"><a href=\"#Roles_of_Feedforward_and_Feedback_Inhibition\"><span class=\"tocnumber\">3</span> <span class=\"toctext\">Roles of Feedforward and Feedback Inhibition</span></a></li>
<li class=\"toclevel-1 tocsection-4\"><a href=\"#Time_Constants_and_Feedforward_Anticipation\"><span class=\"tocnumber\">4</span> <span class=\"toctext\">Time Constants and Feedforward Anticipation</span></a></li>
<li class=\"toclevel-1 tocsection-5\"><a href=\"#Effects_of_Learning\"><span class=\"tocnumber\">5</span> <span class=\"toctext\">Effects of Learning</span></a></li>
<li class=\"toclevel-1 tocsection-6\"><a href=\"#Bidirectional_Excitation\"><span class=\"tocnumber\">6</span> <span class=\"toctext\">Bidirectional Excitation</span></a></li>
<li class=\"toclevel-1 tocsection-7\"><a href=\"#Exploration_of_FFFB_Inhibition\"><span class=\"tocnumber\">7</span> <span class=\"toctext\">Exploration of FFFB Inhibition</span></a></li>
</ul>
</div>

<h1><span class=\"mw-headline\" id=\"Introduction\">Introduction</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Inhibition&amp;action=edit&amp;section=1\" title=\"Edit section: Introduction\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h1>
<p>This simulation explores how inhibitory interneurons can dynamically control overall activity levels within the network, by providing both feedforward and feedback inhibition to excitatory pyramidal neurons.  This inhibition is critical when neurons have bidirectional excitatory connections, as otherwise the positive feedback loops will result in the equivalent of epileptic seizures -- runaway excitatory activity.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> It is recommended that you <a href=\"/CompCogNeuro/index.php?title=.docs.ProjectDocs.OpenInWindow()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".docs.ProjectDocs.OpenInWindow() (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">click here to undock</span></a> this document from the main project window. Use the Window menu to find this window if you lose it, and you can always return to this document by browsing to this document from the <span style=\"background:#FFFFD0\"><tt><b>docs</b></tt></span> section in the left browser panel of the project's main window. <br>
</td></tr>
</tbody></table>
<p>The network in the right view panel contains a 10x10 unit input layer, which projects to both the 10x10 hidden layer of excitatory units, and a layer of 20 inhibitory neurons.  These inhibitory neurons will regulate the activation level of the hidden layer units, and should be thought of as the inhibitory units for the hidden layer (even though they are in their own layer for the purposes of this simulation).  The ratio of 20 inhibitory units to 120 total hidden units (17 percent) is like that found in the cortex, which is commonly cited as roughly 15 percent (White, 1989a; Zilles, 1990).  The inhibitory neurons are just like the excitatory neurons, except that their outputs contribute to the inhibitory conductance of a neuron instead of its excitatory conductance.  We have also set one of the activation parameters to be different for these inhibitory neurons, as discussed below.
</p><p>Let's begin as usual by viewing the weights of the network.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Select <span style=\"background:#FFFFD0\"><tt><b>r.wt</b></tt></span> in the <a href=\"/CompCogNeuro/index.php?title=.PanelTab.FFExcite&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".PanelTab.FFExcite (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">FFExcite</span></a> netview control panel and then click on some of the hidden layer and inhib layer units with the red arrow. <br>
</td></tr>
</tbody></table>
<p>Most of the weights are random, except for those from the inhibitory units, which are fixed at a constant value of .5.  Notice also that the hidden layer excitatory units receive from the input and inhibitory units, while the inhibitory units receive feedforward connections from the input layer, and feedback connections from the excitatory hidden units, as well as inhibitory connections from themselves.
</p><p>Now, we will run the network. Note the graph view above the network, which will record the overall levels of activation (average activation) in the hidden and inhibitory units.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Select <span style=\"background:#FFFFD0\"><tt><b>act</b></tt></span> to view activations in the network window, and press <a href=\"/CompCogNeuro/index.php?title=.programs.LeabraEpoch.Init()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraEpoch.Init() (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Init</span></a> and <a href=\"/CompCogNeuro/index.php?title=.programs.LeabraEpoch.Run()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraEpoch.Run() (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Run</span></a> in the <a href=\"/CompCogNeuro/index.php?title=.PanelTab.ControlPanel&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".PanelTab.ControlPanel (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">ControlPanel</span></a>. <br>
</td></tr>
</tbody></table>
<p>You will see the input units activated by a random activity pattern, and after several cycles of activation updating, the hidden and inhibitory units will become active.  The activation appears quite controlled, as the inhibition counterbalances the excitation from the input layer.  From the average activity plotted in the graph above the network, you should see that the hidden layer (black line) has around 20 percent activation.
</p><p>In the next sections, we manipulate some of the parameters in the control panel to get a better sense of the principles underlying the inhibitory dynamics in the network.  Because we will be running the network many times, you may want to toggle the network display off to speed up the settling process if your computer is running too slowly (the graph log contains the relevant information anyway).
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> To toggle the display off, click the <span style=\"background:#FFFFD0\"><tt><b>Display</b></tt></span> button in the upper left-hand corner of the network view panel window. <br>
</td></tr>
</tbody></table>
<h1><span class=\"mw-headline\" id=\"Strength_of_Inhibitory_Conductances\">Strength of Inhibitory Conductances</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Inhibition&amp;action=edit&amp;section=2\" title=\"Edit section: Strength of Inhibitory Conductances\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h1>
<p>Let's start by manipulating the maximal conductance for the inhibitory current into the excitatory units, <span style=\"background:#FFFFD0\"><tt><b>ff_hidden_g_bar.i</b></tt></span>, which multiplies the level of inhibition coming into the hidden layer (excitatory) neurons.  Clearly, one would predict that this plays an important role.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Decrease <span style=\"background:#FFFFD0\"><tt><b>ff_hidden_g_bar.i</b></tt></span> from .4 to .3 and press <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Run</tt></span>.  Then increase it to .5 and press <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Run</tt></span>. <br>
</td></tr>
</tbody></table>
<hr>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#90FF90;font-size:small\"><b>Question 3.6:</b> What effects does decreasing and increasing ff_hidden_g_bar_i have on the average level of excitation of the hidden units and of the inhibitory units, and why does it have these effects?<br>
</td></tr>
</tbody></table>
<hr>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Set <span style=\"background:#FFFFD0\"><tt><b>ff_hidden_g_bar.i</b></tt></span> back to .4 (or just hit the <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Defaults</tt></span> button. <br>
</td></tr>
</tbody></table>
<p>Now, let's see what happens when we manipulate the corresponding parameter for the inhibition coming into the inhibitory neurons, <span style=\"background:#FFFFD0\"><tt><b>ff_inhib_g_bar.i</b></tt></span>.  You might expect to get results similar to those just obtained for ff_hidden_g_bar.i, but be careful -- inhibition upon inhibitory neurons could have interesting consequences.  
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> First <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Init</tt></span> and <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Run</tt></span> with a <span style=\"background:#FFFFD0\"><tt><b>ff_inhib_g_bar.i</b></tt></span> of .75 for comparison.  Then decrease <span style=\"background:#FFFFD0\"><tt><b>ff_inhib_g_bar.i</b></tt></span> to .6 and <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Run</tt></span>, and next increase <span style=\"background:#FFFFD0\"><tt><b>ff_inhib_g_bar.i</b></tt></span> to 1.0 and <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Run</tt></span>.  <br>
</td></tr>
</tbody></table>
<p>With a <span style=\"background:#FFFFD0\"><tt><b>ff_inhib_g_bar.i</b></tt></span> of .6, you should see that the excitatory activation drops, but the inhibitory level stays roughly the same!  With a value of 1.0, the excitatory activation level increases, but the inhibition again remains the same.  This is a difficult phenomenon to understand, but the following provide a few ways of thinking about what is going on.
</p><p>First, it seems straightforward that reducing the amount of inhibition on the inhibitory neurons should result in more activation of the inhibitory neurons.  If you just look at the very first blip of activity for the inhibitory neurons, this is true (as is the converse that increasing the inhibition results in lower activation).  However, once the feedback inhibition starts to kick in as the hidden units become active, the inhibitory activity returns to the same level for all runs.  This makes sense if the greater activation of the inhibitory units for the ff_inhib_g_bar.i = .6 case then inhibits the hidden units more (which it does, causing them to have lower activation), which then would result in <i>less</i> activation of the inhibitory units coming from the feedback from the hidden units.  This reduced activation of the inhibitory neurons cancels out the increased activation from the lower ff_inhib_g_bar.i value, resulting in the same inhibitory activation level.  The mystery is why the hidden units remain at their lower activation levels once the inhibition goes back to its original activation level.
</p><p>One way we can explain this is by noting that this is a <i>dynamic</i> system, not a static balance of excitation and inhibition.  Every time the excitatory hidden units start to get a little bit more active, they in turn activate the inhibitory units more easily (because they are less apt to inhibit themselves), which in turn provides just enough extra inhibition to offset the advance of the hidden units.  This battle is effectively played out at the level of the <i>derivatives</i> (changes) in activations in the two pools of units, not their absolute levels, which would explain why we cannot really see much evidence of it by looking at only these absolute levels.
</p><p>A more intuitive (but somewhat inaccurate in the details) way of understanding the effect of inhibition on inhibitory neurons is in terms of the location of the thermostat relative to the AC output vent -- if you place the thermostat very close to the AC vent (while you are sitting some constant distance away from the vent), you will be warmer than if the thermostat was far away from the AC output.  Thus, how strongly the thermostat is driven by the AC output vent is analogous to the ff_inhib_g_bar.i parameter -- larger values of ff_inhib_g_bar.i are like having the thermostat closer to the vent, and will result in higher levels of activation (greater warmth) in the hidden layer, and the converse for smaller values.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Set <span style=\"background:#FFFFD0\"><tt><b>ff_inhib_g_bar.i</b></tt></span> back to .75 before continuing (or hit <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Defaults</tt></span>).  <br>
</td></tr>
</tbody></table>
<h1><span class=\"mw-headline\" id=\"Roles_of_Feedforward_and_Feedback_Inhibition\">Roles of Feedforward and Feedback Inhibition</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Inhibition&amp;action=edit&amp;section=3\" title=\"Edit section: Roles of Feedforward and Feedback Inhibition\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h1>
<p>Next we assess the importance and properties of the feedforward versus feedback inhibitory projections by manipulating their relative strengths.  The control panel has two parameters that determine the relative contribution of the feedforward and feedback inhibitory pathways: <span style=\"background:#FFFFD0\"><tt><b>ff_ff_inhib_wt_scale_rel</b></tt></span> applies to the feedforward weights from the input to the inhibitory units, and <span style=\"background:#FFFFD0\"><tt><b>ff_fb_inhib_wt_scale_rel</b></tt></span> applies to the feedback weights from the hidden layer to the inhibitory units.  These parameters (specifically the .rel components) uniformly scale the strengths of an entire projection of connections from one layer to another, and are the arbitrary wt_scale.rel (r_k) relative scaling parameters described in <a href=\"/CompCogNeuro/index.php/CCNBook/Neuron/NetInput\" title=\"CCNBook/Neuron/NetInput\">Net Input Detail</a> from the <a href=\"/CompCogNeuro/index.php/CCNBook/Neuron\" title=\"CCNBook/Neuron\">Neuron Chapter</a>.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Set <span style=\"background:#FFFFD0\"><tt><b>ff_ff_inhib_wt_scale_rel</b></tt></span> to 0, effectively eliminating the feedforward excitatory inputs to the inhibitory neurons from the input layer (i.e., eliminating feedforward inhibition). <br>
</td></tr>
</tbody></table>
<hr>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#90FF90;font-size:small\"><b>Question 3.7:</b> How does eliminating feedforward inhibition affect the behavior of the excitatory and inhibitory average activity levels -- is there a clear qualitative difference in terms of when the two layers start to get active, and in their overall patterns of activity, compared to with the default parameters?<br>
</td></tr>
</tbody></table>
<hr>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Next, set <span style=\"background:#FFFFD0\"><tt><b>ff_ff_inhib_wt_scale_rel</b></tt></span> back to 1 and set <span style=\"background:#FFFFD0\"><tt><b>ff_fb_inhib_wt_scale_rel</b></tt></span> to 0 to turn off the feedback inhibition, and <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Run</tt></span>. <br>
</td></tr>
</tbody></table>
<p>Due to the relative renormalization property of these .rel parameters, you should see that the same overall level of inhibitory activity is achieved, but it now happens quickly in a feedforward way, which then clamps down on the excitatory units from the start -- they rise very slowly (and eventually do achieve the similar levels as before, but we don't run long enough to see that).
</p><p>These exercises should help you to see that a combination of both feedforward and feedback inhibition works better than either alone, for clear principled reasons. Feedforward can anticipate incoming activity levels, but it requires a very precise balance that is both slow and brittle.  Feedback inhibition can react automatically to different activity levels, and is thus more robust, but it is also purely reactive, and thus can be unstable and oscillatory unless coupled with feedforward inhibition.
</p>
<h1><span class=\"mw-headline\" id=\"Time_Constants_and_Feedforward_Anticipation\">Time Constants and Feedforward Anticipation</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Inhibition&amp;action=edit&amp;section=4\" title=\"Edit section: Time Constants and Feedforward Anticipation\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h1>
<p>We just saw that feedforward inhibition is important for anticipating and offsetting the excitation coming from the inputs to the hidden layer.  In addition to this feedforward inhibitory connectivity, the anticipatory effect depends on a difference between excitatory and inhibitory neurons in their rate of updating, which is controlled by the dt.net_tau parameters <span style=\"background:#FFFFD0\"><tt><b>ff_hidden_dt_net_tau</b></tt></span> and <span style=\"background:#FFFFD0\"><tt><b>ff_inhib_dt_net_tau</b></tt></span> in the control panel (see <a href=\"/CompCogNeuro/index.php/CCNBook/Neuron#Neural_Integration\" title=\"CCNBook/Neuron\">CCNBook/Neuron#Neural_Integration</a>).  As you can see, the excitatory neurons are updated at tau of 40 (slower), while the inhibitory are at 20 (faster) -- these numbers correspond roughly to how many cycles it takes for a substantial amount of change happen.  The faster updating of the inhibitory neurons allows them to more quickly become activated by the feedforward input, and send anticipatory inhibition to the excitatory hidden units before they actually get activated.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> To verify this, click on Defaults, set <span style=\"background:#FFFFD0\"><tt><b>ff_inhib_dt_net_tau</b></tt></span> to 40 (instead of the 20 default), and then <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Run</tt></span>. <br>
</td></tr>
</tbody></table>
<p>You should see that the inhibition is no longer capable of anticipating the excitation as well, resulting in larger initial oscillations.  Also, the faster inhibitory time constant enables inhibition to more rapidly adapt to changes in the overall excitation level.  There is ample evidence that cortical inhibitory neurons respond faster to inputs than pyramidal neurons (e.g., Douglas &amp; Martin, 1990).
</p><p>One other important practical point about these update rate constants will prove to be an important advantage of the simplified inhibitory functions described in the next section.  These rate constants must be set to be relatively slow to prevent oscillatory behavior.  
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> To see this, press <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Defaults</tt></span>, and then set <span style=\"background:#FFFFD0\"><tt><b>ff_inhib_dt_net_tau</b></tt></span> to 2.5, and <span style=\"background:#FFFFD0\"><tt><b>ff_hidden_dt_net_tau</b></tt></span> to 5 and <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Run</tt></span>. <br>
</td></tr>
</tbody></table>
<p>These oscillations are largely prevented with finer time scale upgrading, because the excitatory neurons update their activity in smaller steps, to which the inhibitory neurons are better able to smoothly react.
</p>
<h1><span class=\"mw-headline\" id=\"Effects_of_Learning\">Effects of Learning</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Inhibition&amp;action=edit&amp;section=5\" title=\"Edit section: Effects of Learning\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h1>
<p>One of the important things that inhibition must do is to compensate adequately for the changes in weight values that accompany learning.  Typically, as units learn, they develop greater levels of variance in the amount of excitatory input received from the input patterns, with some patterns providing strong excitation to a given unit and others producing less.  This is a natural result of the specialization of units for representing (detecting) some things and not others.  We can test whether the current inhibitory mechanism adequately handles these changes by simulating the effects of learning, by giving units excitatory weight values with a higher level of variance.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> First, press <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Defaults</tt></span> to return to the default parameters.  <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Run</tt></span> this case to get a baseline for comparison. <br>
</td></tr>
</tbody></table>
<p>In this case, the network's weights are produced by generating random numbers with a mean of .25, and a uniform variance around that mean of .2.  
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Next, set the <span style=\"background:#FFFFD0\"><tt><b>wt_type</b></tt></span> parameter in the control panel to <span style=\"background:#FFFFD0\"><tt><b>TRAINED</b></tt></span>, and hit the <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>SetWeights</tt></span> button. <br>
</td></tr>
</tbody></table>
<p>The weights are then initialized with the same mean but a variance of .7 using Gaussian (normally) distributed values.  This produces a much higher variance of excitatory net inputs for units in the hidden layer.  There is also an increase in the total overall weight strength with the increase in variance because there is more room for larger weights above the .25 mean, but not much more below it.  
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Press <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Run</tt></span> to see what difference this makes for the overall excitatory level. <br>
</td></tr>
</tbody></table>
<p>You should observe a greater level of excitation using the trained weights compared to the initial untrained weights.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> You can verify that the system can compensate for this change by increasing the <span style=\"background:#FFFFD0\"><tt><b>ff_hidden_g_bar_i</b></tt></span> to .5. <br>
</td></tr>
</tbody></table>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Before continuing, set the <span style=\"background:#FFFFD0\"><tt><b>wt_type</b></tt></span> parameter in the control panel back to <span style=\"background:#FFFFD0\"><tt><b>UNTRAINED</b></tt></span>, and hit the <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>SetWeights</tt></span> button. <br>
</td></tr>
</tbody></table>
<h1><span class=\"mw-headline\" id=\"Bidirectional_Excitation\">Bidirectional Excitation</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Inhibition&amp;action=edit&amp;section=6\" title=\"Edit section: Bidirectional Excitation\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h1>
<p>To make things simpler at the outset, we have so far been exploring a relatively easy case for inhibition where the network does not have bidirectional excitatory connectivity, which is where inhibition really becomes essential to prevent runaway positive feedback dynamics.  Now, let's try running a network with two bidirectionally connected hidden layers.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> First, select <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Defaults</tt></span> to get back the default parameters, do a <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Run</tt></span> for comparison, and then set <span style=\"background:#FFFFD0\"><tt><b>network</b></tt></span> in the control panel to <span style=\"background:#FFFFD0\"><tt><b>BidirExcite</b></tt></span> instead of FFExcite.  Then click on the <a href=\"/CompCogNeuro/index.php?title=.T3Tab.BidirExcite&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".T3Tab.BidirExcite (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">BidirExcite</span></a> tab in the right viewer panel to view this network. <br>
</td></tr>
</tbody></table>
<p>In extending the network to the bidirectional case, we also have to extend our notions of what feedforward inhibition is.  In general, the role of feedforward inhibition is to anticipate and counterbalance the level of excitatory input coming into a layer.  Thus, in a network with bidirectional excitatory connectivity, the inhibitory neurons for a given layer also have to receive the top-down excitatory connections, which play the role of \"feedforward\" inhibition.  
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Verify that this network has both bidirectional excitatory connectivity and the \"feedforward\" inhibition coming back from the second hidden layer by examining the r.wt weights as usual. <br>
</td></tr>
</tbody></table>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Now <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Run</tt></span> this network. <br>
</td></tr>
</tbody></table>
<p>The graph view shows the average activity for only the first hidden and inhibitory layers (as before).  Note that the initial part up until the point where the second hidden layer begins to be active is the same as before, but as the second layer activates, it feeds back to the first layer inhibitory neurons, which become more active, as do the excitatory neurons.  However, the overall activity level remains quite under control and not substantially different than before.  Thus, the inhibition is able to keep the positive feedback dynamics fully in check.
</p><p>Next, we will see that inhibition is differentially important for bidirectionally connected networks.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Set the <span style=\"background:#FFFFD0\"><tt><b>bidir_hidden_g_bar.i</b></tt></span> parameter (note the bidir -- in the 2nd group of parameters) to .35, and <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Run</tt></span>. <br>
</td></tr>
</tbody></table>
<p>This reduces the amount of inhibition on the excitatory neurons.  Note that this has a relatively small impact on the initial, feedforward portion of the activity curve, but when the second hidden layer becomes active, the network becomes catastrophically over activated -- an epileptic fit!  
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Set the <span style=\"background:#FFFFD0\"><tt><b>bidir_hidden_g_bar.i</b></tt></span> parameter back to .4. <br>
</td></tr>
</tbody></table>
<h1><span class=\"mw-headline\" id=\"Exploration_of_FFFB_Inhibition\">Exploration of FFFB Inhibition</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Inhibition&amp;action=edit&amp;section=7\" title=\"Edit section: Exploration of FFFB Inhibition\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h1>
<p><b>You should run this section after having read the <a href=\"/CompCogNeuro/index.php/CCNBook/Networks#FFFB_Inhibition_Function\" title=\"CCNBook/Networks\">CCNBook/Networks#FFFB_Inhibition_Function</a> section of the main text.</b>
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Reset the parameters to their default values using the <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Defaults</tt></span> button, set the <span style=\"background:#FFFFD0\"><tt><b>network</b></tt></span> to <span style=\"background:#FFFFD0\"><tt><b>BidirExcite</b></tt></span>, and <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Run</tt></span> to get the initial state of the network. <br>
</td></tr>
</tbody></table>
<p>This should reproduce the standard activation graph for the case with actual inhibitory neurons.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Now, set the <span style=\"background:#FFFFD0\"><tt><b>bidir_lay_inhib.on</b></tt></span> <b>ON</b> to use the FFFB function described in the main text.  Also set the <span style=\"background:#FFFFD0\"><tt><b>bdir_hidden_g_bar.i</b></tt></span> and <span style=\"background:#FFFFD0\"><tt><b>bdir_inhib_g_bar.i</b></tt></span> parameters to 1.0 (otherwise the computed inhibition will be inaccurate), and the rate constant parameters to their defaults for normal (non unit inhib) operation, which is <span style=\"background:#FFFFD0\"><tt><b>bdir_hidden_dt_net_tau</b></tt></span> and <span style=\"background:#FFFFD0\"><tt><b>bdir_inhib_dt_net_tau</b></tt></span> both to 1.4. Finally, you need to turn off the inhibitory projections (when present, these will contribute in addition to whatever is computed by FFFB) -- set <span style=\"background:#FFFFD0\"><tt><b>bdir_inhib_wt_scale.abs</b></tt></span> to 0  (this sets the absolute scaling factor to 0, effectively nullifying these connections).  Hit Apply. <br>
</td></tr>
</tbody></table>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Press <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Run</tt></span>. <br>
</td></tr>
</tbody></table>
<p>The activations should be right around the 10-15% activity level.  How does this change with trained weights as compared to the default untrained weights?
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Set <span style=\"background:#FFFFD0\"><tt><b>wt_value</b></tt></span> to <span style=\"background:#FFFFD0\"><tt><b>TRAINED</b></tt></span> and do <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>SetWeights</tt></span>, and then <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Run</tt></span> again. <br>
</td></tr>
</tbody></table>
<p>You should see the hidden activities approach the 20% level now -- this shows that FFFB inhibition is relatively flexible and overall activity levels are sensitive to overall input strength.  You should also notice that FFFB dynamics allow the network to settle relatively quickly -- this is due to using direct and accurate statistics for the incoming netinput and average activations, as compared to the more approximate sampling available to interneurons.  Thus, FFFB is probably still more powerful and effective than the real biological system, but this does allow us to run our models very efficiently -- for a small number of cycles per input.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> To test the set point behavior of the FFFB functions, we can vary the amount of excitatory input by changing the <span style=\"background:#FFFFD0\"><tt><b>input_pct</b></tt></span> levels, to 10 and 30 instead of the 20% default.  After you change <span style=\"background:#FFFFD0\"><tt><b>input_pct</b></tt></span>, you need to press the <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>SetInputPct</tt></span> button (this makes a new input pattern with this percent of neurons active), and then <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Run</tt></span>. <br>
</td></tr>
</tbody></table>
<hr>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#90FF90;font-size:small\"><b>Question 3.8:</b> How much does the hidden average activity level vary as a function of the different <span style=\"background:#FFFFD0\"><tt><b>input_pct</b></tt></span> levels (10, 20, 30).  What does this reveal about the set point nature of the FFFB inhibition mechanism?<br>
</td></tr>
</tbody></table>
<hr>
<p>Finally, you can explore the effects of changing the <span style=\"background:#FFFFD0\"><tt><b>gi</b></tt></span>, <span style=\"background:#FFFFD0\"><tt><b>ff</b></tt></span>, and <span style=\"background:#FFFFD0\"><tt><b>fb</b></tt></span> parameters in the <span style=\"background:#FFFFD0\"><tt><b>bidir_lay_inhib</b></tt></span> field, which change the overall amount of inhibition, and amounts of feedforward and feedback inhibition, respectively.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> You may now close the project (use the window manager close button on the project window or <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>File/Close Project</tt></span> menu item) and then open a new one, or just quit emergent entirely by doing <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Quit emergent</tt></span> menu option or clicking the close button on the root window. <br>
</td></tr>
</tbody></table>

<!-- 
NewPP limit report
Cached time: 20180206124341
Cache expiry: 86400
Dynamic content: false
CPU time usage: 0.300 seconds
Real time usage: 0.338 seconds
Preprocessor visited node count: 801/1000000
Preprocessor generated node count: 2983/1000000
Post?expand include size: 23395/2097152 bytes
Template argument size: 12116/2097152 bytes
Highest expansion depth: 6/40
Expensive parser function count: 0/100
-->

<!-- 
Transclusion expansion time report (%,ms,calls,template)
100.00%  152.278      1 - -total
 46.54%   70.865      1 - Template:PublishedProject
 34.52%   52.559     28 - Template:cmd
  9.84%   14.977     49 - Template:var
  6.32%    9.620      1 - Template:DocEditDialog
  6.11%    9.310     30 - Template:fun
  4.84%    7.372      3 - Template:hwq
  4.55%    6.924      7 - Template:emerlink
  2.92%    4.452      1 - Template:DocQuit
  2.81%    4.285      1 - Template:cite
-->

<!-- Saved in parser cache with key compcogneuro:pcache:idhash:598-0!*!0!!en!5!* and timestamp 20180206124341 and revision id 5744
 -->
</div>					<div class=\"printfooter\">
						Retrieved from \"<a dir=\"ltr\" href=\"https://grey.colorado.edu/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Inhibition&amp;oldid=5744\">https://grey.colorado.edu/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Inhibition&amp;oldid=5744</a>\"					</div>
				<div id=\"catlinks\" class=\"catlinks\"><div id=\"mw-normal-catlinks\" class=\"mw-normal-catlinks\"><a href=\"/CompCogNeuro/index.php/Special:Categories\" title=\"Special:Categories\">Category</a>: <ul><li><a href=\"/CompCogNeuro/index.php/Category:PublishedProject\" title=\"Category:PublishedProject\">PublishedProject</a></li></ul></div></div>				<div class=\"visualClear\"></div>
							</div>
		</div>
		<div id=\"mw-navigation\">
			<h2>Navigation menu</h2>

			<div id=\"mw-head\">
									<div id=\"p-personal\" role=\"navigation\" class=\"\" aria-labelledby=\"p-personal-label\">
						<h3 id=\"p-personal-label\">Personal tools</h3>
						<ul>
							<li id=\"pt-userpage\"><a href=\"/CompCogNeuro/index.php/User:Oreilly\" dir=\"auto\" title=\"Your user page [.]\" accesskey=\".\">Oreilly</a></li><li id=\"pt-mytalk\"><a href=\"/CompCogNeuro/index.php/User_talk:Oreilly\" class=\"new\" title=\"Your talk page [n]\" accesskey=\"n\">Talk</a></li><li id=\"pt-preferences\"><a href=\"/CompCogNeuro/index.php/Special:Preferences\" title=\"Your preferences\">Preferences</a></li><li id=\"pt-watchlist\"><a href=\"/CompCogNeuro/index.php/Special:Watchlist\" title=\"A list of pages you are monitoring for changes [l]\" accesskey=\"l\">Watchlist</a></li><li id=\"pt-mycontris\"><a href=\"/CompCogNeuro/index.php/Special:Contributions/Oreilly\" title=\"A list of your contributions [y]\" accesskey=\"y\">Contributions</a></li><li id=\"pt-logout\"><a href=\"/CompCogNeuro/index.php?title=Special:UserLogout&amp;returnto=CCNBook%2FSims%2FNetworks%2FInhibition\" title=\"Log out\">Log out</a></li>						</ul>
					</div>
									<div id=\"left-navigation\">
										<div id=\"p-namespaces\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-namespaces-label\">
						<h3 id=\"p-namespaces-label\">Namespaces</h3>
						<ul>
															<li id=\"ca-nstab-main\" class=\"selected\"><span><a href=\"/CompCogNeuro/index.php/CCNBook/Sims/Networks/Inhibition\" title=\"View the content page [c]\" accesskey=\"c\">Page</a></span></li>
															<li id=\"ca-talk\" class=\"new\"><span><a href=\"/CompCogNeuro/index.php?title=Talk:CCNBook/Sims/Networks/Inhibition&amp;action=edit&amp;redlink=1\" title=\"Discussion about the content page [t]\" accesskey=\"t\" rel=\"discussion\">Discussion</a></span></li>
													</ul>
					</div>
										<div id=\"p-variants\" role=\"navigation\" class=\"vectorMenu emptyPortlet\" aria-labelledby=\"p-variants-label\">
												<h3 id=\"p-variants-label\">
							<span>Variants</span><a href=\"#\"></a>
						</h3>

						<div class=\"menu\">
							<ul>
															</ul>
						</div>
					</div>
									</div>
				<div id=\"right-navigation\">
										<div id=\"p-views\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-views-label\">
						<h3 id=\"p-views-label\">Views</h3>
						<ul>
															<li id=\"ca-view\" class=\"selected\"><span><a href=\"/CompCogNeuro/index.php/CCNBook/Sims/Networks/Inhibition\">Read</a></span></li>
															<li id=\"ca-edit\"><span><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Inhibition&amp;action=edit\" title=\"Edit this page [e]\" accesskey=\"e\">Edit</a></span></li>
															<li id=\"ca-history\" class=\"collapsible\"><span><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Inhibition&amp;action=history\" title=\"Past revisions of this page [h]\" accesskey=\"h\">View history</a></span></li>
															<li id=\"ca-unwatch\" class=\"icon\"><span><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Inhibition&amp;action=unwatch&amp;token=f3cb025cad51a7f438ef877543779c1d5a7a9fc0%2B%5C\" title=\"Remove this page from your watchlist [w]\" accesskey=\"w\">Unwatch</a></span></li>
													</ul>
					</div>
										<div id=\"p-cactions\" role=\"navigation\" class=\"vectorMenu\" aria-labelledby=\"p-cactions-label\">
						<h3 id=\"p-cactions-label\"><span>More</span><a href=\"#\"></a></h3>

						<div class=\"menu\">
							<ul>
																	<li id=\"ca-delete\">
										<a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Inhibition&amp;action=delete\" title=\"Delete this page [d]\" accesskey=\"d\">Delete</a>
									</li>
																	<li id=\"ca-move\">
										<a href=\"/CompCogNeuro/index.php/Special:MovePage/CCNBook/Sims/Networks/Inhibition\" title=\"Move this page [m]\" accesskey=\"m\">Move</a>
									</li>
																	<li id=\"ca-protect\">
										<a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Inhibition&amp;action=protect\" title=\"Protect this page [=]\" accesskey=\"=\">Protect</a>
									</li>
																	<li id=\"ca-purge\">
										<a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Inhibition&amp;action=purge\">Refresh</a>
									</li>
															</ul>
						</div>
					</div>
										<div id=\"p-search\" role=\"search\">
						<h3>
							<label for=\"searchInput\">Search</label>
						</h3>

						<form action=\"/CompCogNeuro/index.php\" id=\"searchform\">
							<div id=\"simpleSearch\">
							<input type=\"search\" name=\"search\" placeholder=\"Search\" title=\"Search Computational Cognitive Neuroscience Wiki [f]\" accesskey=\"f\" id=\"searchInput\"><input type=\"hidden\" value=\"Special:Search\" name=\"title\"><input type=\"submit\" name=\"fulltext\" value=\"Search\" title=\"Search the pages for this text\" id=\"mw-searchButton\" class=\"searchButton mw-fallbackSearchButton\"><input type=\"submit\" name=\"go\" value=\"Go\" title=\"Go to a page with this exact name if it exists\" id=\"searchButton\" class=\"searchButton\">							</div>
						</form>
					</div>
									</div>
			</div>
			<div id=\"mw-panel\">
				<div id=\"p-logo\" role=\"banner\"><a class=\"mw-wiki-logo\" href=\"/CompCogNeuro/index.php/Main_Page\" title=\"Visit the main page\"></a></div>
						<div class=\"portal\" role=\"navigation\" id=\"p-navigation\" aria-labelledby=\"p-navigation-label\">
			<h3 id=\"p-navigation-label\">Navigation</h3>

			<div class=\"body\">
									<ul>
						<li id=\"n-mainpage-description\"><a href=\"/CompCogNeuro/index.php/Main_Page\" title=\"Visit the main page [z]\" accesskey=\"z\">Main page</a></li><li id=\"n-CCN-Book\"><a href=\"/CompCogNeuro/index.php/CCNBook/Main\">CCN Book</a></li><li id=\"n-recentchanges\"><a href=\"/CompCogNeuro/index.php/Special:RecentChanges\" title=\"A list of recent changes in the wiki [r]\" accesskey=\"r\">Recent changes</a></li><li id=\"n-randompage\"><a href=\"/CompCogNeuro/index.php/Special:Random\" title=\"Load a random page [x]\" accesskey=\"x\">Random page</a></li><li id=\"n-help\"><a href=\"https://www.mediawiki.org/wiki/Special:MyLanguage/Help:Contents\" title=\"The place to find out\">Help</a></li>					</ul>
							</div>
		</div>
			<div class=\"portal\" role=\"navigation\" id=\"p-tb\" aria-labelledby=\"p-tb-label\">
			<h3 id=\"p-tb-label\">Tools</h3>

			<div class=\"body\">
									<ul>
						<li id=\"t-whatlinkshere\"><a href=\"/CompCogNeuro/index.php/Special:WhatLinksHere/CCNBook/Sims/Networks/Inhibition\" title=\"A list of all wiki pages that link here [j]\" accesskey=\"j\">What links here</a></li><li id=\"t-recentchangeslinked\"><a href=\"/CompCogNeuro/index.php/Special:RecentChangesLinked/CCNBook/Sims/Networks/Inhibition\" title=\"Recent changes in pages linked from this page [k]\" accesskey=\"k\">Related changes</a></li><li id=\"t-upload\"><a href=\"/CompCogNeuro/index.php/Special:Upload\" title=\"Upload files [u]\" accesskey=\"u\">Upload file</a></li><li id=\"t-specialpages\"><a href=\"/CompCogNeuro/index.php/Special:SpecialPages\" title=\"A list of all special pages [q]\" accesskey=\"q\">Special pages</a></li><li id=\"t-permalink\"><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Inhibition&amp;oldid=5744\" title=\"Permanent link to this revision of the page\">Permanent link</a></li><li id=\"t-info\"><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Inhibition&amp;action=info\" title=\"More information about this page\">Page information</a></li><li id=\"t-smwbrowselink\"><a href=\"/CompCogNeuro/index.php/Special:Browse/CCNBook/Sims/Networks/Inhibition\" rel=\"smw-browse\">Browse properties</a></li>					</ul>
							</div>
		</div>
			<div class=\"portal\" role=\"navigation\" id=\"p-coll-print_export\" aria-labelledby=\"p-coll-print_export-label\">
			<h3 id=\"p-coll-print_export-label\">Print/export</h3>

			<div class=\"body\">
									<ul>
						<li id=\"coll-create_a_book\"><a href=\"/CompCogNeuro/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=CCNBook%2FSims%2FNetworks%2FInhibition\">Create a book</a></li><li id=\"coll-download-as-rl\"><a href=\"/CompCogNeuro/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=CCNBook%2FSims%2FNetworks%2FInhibition&amp;oldid=5744&amp;writer=rl\">Download as PDF</a></li><li id=\"t-print\"><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Inhibition&amp;printable=yes\" title=\"Printable version of this page [p]\" accesskey=\"p\">Printable version</a></li>					</ul>
							</div>
		</div>
				</div>
		</div>
		<div id=\"footer\" role=\"contentinfo\">
							<ul id=\"footer-info\">
											<li id=\"footer-info-lastmod\"> This page was last modified on 7 September 2016, at 12:51.</li>
									</ul>
							<ul id=\"footer-places\">
											<li id=\"footer-places-privacy\"><a href=\"/CompCogNeuro/index.php/Project:Privacy_policy\" title=\"Project:Privacy policy\">Privacy policy</a></li>
											<li id=\"footer-places-about\"><a href=\"/CompCogNeuro/index.php/Project:About\" title=\"Project:About\">About Computational Cognitive Neuroscience Wiki</a></li>
											<li id=\"footer-places-disclaimer\"><a href=\"/CompCogNeuro/index.php/Project:General_disclaimer\" title=\"Project:General disclaimer\">Disclaimers</a></li>
									</ul>
										<ul id=\"footer-icons\" class=\"noprint\">
											<li id=\"footer-copyrightico\">
							<a rel=\"license\" href=\"https://creativecommons.org/licenses/by-sa/3.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://licensebuttons.net/l/by-sa/3.0/88x31.png\"></a><br>This work is licensed under a <a rel=\"license\" href=\"https://creativecommons.org/licenses/by-sa/3.0/\">Creative Commons Attribution-ShareAlike 3.0 Unported License</a>.						</li>
											<li id=\"footer-poweredbyico\">
							<a href=\"//www.mediawiki.org/\"><img src=\"/CompCogNeuro/resources/assets/poweredby_mediawiki_88x31.png\" alt=\"Powered by MediaWiki\" srcset=\"/CompCogNeuro/resources/assets/poweredby_mediawiki_132x47.png 1.5x, /CompCogNeuro/resources/assets/poweredby_mediawiki_176x62.png 2x\" width=\"88\" height=\"31\"></a><a href=\"https://www.semantic-mediawiki.org/wiki/Semantic_MediaWiki\"><img src=\"/CompCogNeuro/extensions/SemanticMediaWiki/resources/images/smw_button.png\" alt=\"Powered by Semantic MediaWiki\" width=\"88\" height=\"31\"></a>						</li>
									</ul>
						<div style=\"clear:both\"></div>
		</div>
		<script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.loader.state({\"user\":\"ready\",\"user.groups\":\"ready\"});mw.loader.load([\"mediawiki.toc\",\"mediawiki.action.view.postEdit\",\"site\",\"mediawiki.user\",\"mediawiki.hidpi\",\"mediawiki.page.ready\",\"mediawiki.searchSuggest\",\"mediawiki.page.watch.ajax\",\"mediawiki.action.view.rightClickEdit\",\"ext.headertabs\"]);
} );</script><script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({\"wgBackendResponseTime\":144});
} );</script>
	

</body></html>";
  };
  taDoc @[1] {
   name="ChangeLog";
   desc=;
   web_doc=0;
   wiki=;
   url="local";
   full_url="local";
   text_size=1;
   text="<html>
<head>ChangeLog</head>
<body>
<h1>ChangeLog</h1>
<ul>


<li>Tue Feb  6 23:44:07 2018 version: 8.0.5 user: oreilly file_name: <code>inhib.proj</code> <br>
Project updated on wiki: CCN changes: clear log



<li>Thu Jan 11 03:10:28 2018 version: 8.0.4 user: oreilly file_name: <code>inhib.proj</code> <br>
Project updated on wiki: CCN changes: 8.5 update, no changes



<li>Fri Jan 13 03:06:01 2017 version: 8.0.3 user: oreilly file_name: <code>inhib.proj</code> <br>
Project updated on wiki: CCN changes: 10446 8.0.4 update



<li>Tue Sep  6 03:14:27 2016 version: 8.0.2 user: oreilly file_name: <code>inhib.proj</code> <br>
Project updated on wiki: CCN changes: updt to current


<li>Tue Aug 16 00:00:46 2016 version: 8.0.1 user: oreilly file_name: <code>inhib.proj</code> <br>
Updated to 8.0 specs and programs.  Changed time constants to tau-based ones used in 8.0 (tau = 1/dt and vice-versa).  Also updated to FFFB specs.  Note that network.times.cycle_qtr turned off automatically so updates by cycle (true for all ch 3 models)
</ul>
</body>
</html>
";
   html_text="<html>
<head>ChangeLog</head>
<body>
<h1>ChangeLog</h1>
<ul>
<P>
<P>
<li>Tue Feb  6 23:44:07 2018 version: 8.0.5 user: oreilly file_name: <code>inhib.proj</code> <br>
Project updated on wiki: CCN changes: clear log
<P>
<P>
<P>
<li>Thu Jan 11 03:10:28 2018 version: 8.0.4 user: oreilly file_name: <code>inhib.proj</code> <br>
Project updated on wiki: CCN changes: 8.5 update, no changes
<P>
<P>
<P>
<li>Fri Jan 13 03:06:01 2017 version: 8.0.3 user: oreilly file_name: <code>inhib.proj</code> <br>
Project updated on wiki: CCN changes: 10446 8.0.4 update
<P>
<P>
<P>
<li>Tue Sep  6 03:14:27 2016 version: 8.0.2 user: oreilly file_name: <code>inhib.proj</code> <br>
Project updated on wiki: CCN changes: updt to current
<P>
<P>
<li>Tue Aug 16 00:00:46 2016 version: 8.0.1 user: oreilly file_name: <code>inhib.proj</code> <br>
Updated to 8.0 specs and programs.  Changed time constants to tau-based ones used in 8.0 (tau = 1/dt and vice-versa).  Also updated to FFFB specs.  Note that network.times.cycle_qtr turned off automatically so updates by cycle (true for all ch 3 models)
</ul>
</body>
</html>
";
  };
 };
 wizards {
  name="wizards";
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="NO_CLIP": value=1: val_type_fixed=0: };
   };
   name="LeabraWizard_1";
  };
 };
 ctrl_panels {
  name="ctrl_panels";
  el_typ=ControlPanel;
  el_def=0;
  master_and_clones=0;
  ControlPanel @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="user_pinned": value=1: val_type_fixed=0: };
   };
   name="ControlPanel";
   cp_state=REGULAR;
   updt_while_running=0;
   desc="control panel for inhibition simulations (feedforward, feedback)";
   mbrs {
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
    ControlPanelMember @[0] {
     label="network";
     short_label=1;
     cust_label=0;
     desc="network to operate on";
     cust_desc=0;
     base=.programs.gp[0][0].args[0]$$;
     mbr=ProgVar::object_val;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="": range="": notes="": };
    };
    ControlPanelMember @[1] {
     label="wt_value";
     short_label=0;
     cust_label=1;
     desc=;
     cust_desc=0;
     base=.programs[1].vars[0].dyn_enum_val$$;
     mbr=DynEnum::value;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[2] {
     label="input_pct";
     short_label=1;
     cust_label=0;
     desc="percentage activation for input pattern -- must call SetInputPct program to take effect";
     cust_desc=0;
     base=.programs[2].vars[0]$$;
     mbr=ProgVar::int_val;
     data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="": notes="": };
    };
    ControlPanelMember_Group @.gp[0] {
     name="Feedforward_Network_Parameters";
     el_typ=ControlPanelMember;
     el_def=0;
     ControlPanelMember @[0] {
      label="ff_hidden_g_bar_i";
      short_label=0;
      cust_label=1;
      desc=" inhibitory chloride (Cl-) channels activated by synaptic GABA";
      cust_desc=0;
      base=.networks[0].specs[0].g_bar$$;
      mbr=LeabraChannels::i;
      data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="": notes=".4 default -- inhib on excitatory": };
     };
     ControlPanelMember @[1] {
      label="ff_inhib_g_bar_i";
      short_label=0;
      cust_label=1;
      desc=" inhibitory chloride (Cl-) channels activated by synaptic GABA";
      cust_desc=0;
      base=.networks[0].specs[0].children[0].g_bar$$;
      mbr=LeabraChannels::i;
      data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="": notes=".75 default -- inhib on inhib -- tricky!": };
     };
     ControlPanelMember @[2] {
      label="ff_ff_inhib_wt_scale_rel";
      short_label=0;
      cust_label=1;
      desc=" [Default: 1] relative scaling that shifts balance between different projections (subject to normalization across all other projections into unit)";
      cust_desc=0;
      base=.networks[0].specs[1].children[0].wt_scale$$;
      mbr=WtScaleSpec::rel;
      data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="": notes="1 default -- feedforward inhibition strength": };
     };
     ControlPanelMember @[3] {
      label="ff_fb_inhib_wt_scale_rel";
      short_label=0;
      cust_label=1;
      desc=" [Default: 1] relative scaling that shifts balance between different projections (subject to normalization across all other projections into unit)";
      cust_desc=0;
      base=.networks[0].specs[1].children[1].wt_scale$$;
      mbr=WtScaleSpec::rel;
      data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="": notes="1 default -- feedback inhibition strength": };
     };
     ControlPanelMember @[4] {
      label="ff_hidden_dt_net_tau";
      short_label=0;
      cust_label=1;
      desc="[Default: 1.4;3;5]  net input time constant in cycles, which should be milliseconds typically (roughly, how long it takes for value to change significantly -- 1.4x the half-life) -- this is important for damping oscillations -- generally reflects time constants associated with synaptic channels which are not modeled in the most abstract rate code models (set to 1 for detailed spiking models with more realistic synaptic currents) -- larger values (e.g., 3) can be important for models with higher netinputs that otherwise might be more prone to oscillation, and is default for GPiInvUnitSpec";
      cust_desc=0;
      base=.networks[0].specs[0].dt$$;
      mbr=LeabraDtSpec::net_tau;
      data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="": notes="40 default -- hidden updates relatively slow": };
     };
     ControlPanelMember @[5] {
      label="ff_inhib_dt_net_tau";
      short_label=0;
      cust_label=1;
      desc="[Default: 1.4;3;5]  net input time constant in cycles, which should be milliseconds typically (roughly, how long it takes for value to change significantly -- 1.4x the half-life) -- this is important for damping oscillations -- generally reflects time constants associated with synaptic channels which are not modeled in the most abstract rate code models (set to 1 for detailed spiking models with more realistic synaptic currents) -- larger values (e.g., 3) can be important for models with higher netinputs that otherwise might be more prone to oscillation, and is default for GPiInvUnitSpec";
      cust_desc=0;
      base=.networks[0].specs[0].children[0].dt$$;
      mbr=LeabraDtSpec::net_tau;
      data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="": notes="20 default -- inhib updates relatively fast ": };
     };
    };
    ControlPanelMember_Group @.gp[1] {
     name="Bidirectional_Network_Parameters";
     el_typ=ControlPanelMember;
     el_def=0;
     ControlPanelMember @[0] {
      label="bdir_hidden_g_bar_i";
      short_label=0;
      cust_label=1;
      desc=" inhibitory chloride (Cl-) channels activated by synaptic GABA";
      cust_desc=0;
      base=.networks[1].specs[0].g_bar$$;
      mbr=LeabraChannels::i;
      data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="": notes=".4 default -- inhib on excitatory hidden units": };
     };
     ControlPanelMember @[1] {
      label="bidir_inhib_g_bar_i";
      short_label=0;
      cust_label=1;
      desc=" inhibitory chloride (Cl-) channels activated by synaptic GABA";
      cust_desc=0;
      base=.networks[1].specs[0].children[0].g_bar$$;
      mbr=LeabraChannels::i;
      data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="": notes=".75 default -- inhib on inhib units": };
     };
     ControlPanelMember @[2] {
      label="bidir_ff_inhib_wt_scale_rel";
      short_label=0;
      cust_label=1;
      desc=" [Default: 1] relative scaling that shifts balance between different projections (subject to normalization across all other projections into unit)";
      cust_desc=0;
      base=.networks[1].specs[1].children[0].wt_scale$$;
      mbr=WtScaleSpec::rel;
      data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="": notes="0.5 default -- feedforward inhibition strength": };
     };
     ControlPanelMember @[3] {
      label="bidir_fb_inhib_wt_scale_rel";
      short_label=0;
      cust_label=1;
      desc=" [Default: 1] relative scaling that shifts balance between different projections (subject to normalization across all other projections into unit)";
      cust_desc=0;
      base=.networks[1].specs[1].children[1].wt_scale$$;
      mbr=WtScaleSpec::rel;
      data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="": notes="1 default -- feedback inhibition strength": };
     };
     ControlPanelMember @[4] {
      label="bidir_inhib_wt_scale_abs";
      short_label=0;
      cust_label=1;
      desc="[Default: 1]  absolute scaling (not subject to normalization: directly multiplies weight values)";
      cust_desc=0;
      base=.networks[1].specs[4].wt_scale$$;
      mbr=WtScaleSpec::abs;
      data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="": notes="1 default -- absolute strength of inhibition -- 0 disables": };
     };
     ControlPanelMember @[5] {
      label="bidir_hidden_dt_net_tau";
      short_label=0;
      cust_label=1;
      desc="[Default: 1.4;3;5]  net input time constant in cycles, which should be milliseconds typically (roughly, how long it takes for value to change significantly -- 1.4x the half-life) -- this is important for damping oscillations -- generally reflects time constants associated with synaptic channels which are not modeled in the most abstract rate code models (set to 1 for detailed spiking models with more realistic synaptic currents) -- larger values (e.g., 3) can be important for models with higher netinputs that otherwise might be more prone to oscillation, and is default for GPiInvUnitSpec";
      cust_desc=0;
      base=.networks[1].specs[0].dt$$;
      mbr=LeabraDtSpec::net_tau;
      data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="": notes="40 default -- hidden updates relatively slow": };
     };
     ControlPanelMember @[6] {
      label="bidir_inhib_dt_net_tau";
      short_label=0;
      cust_label=1;
      desc="[Default: 1.4;3;5]  net input time constant in cycles, which should be milliseconds typically (roughly, how long it takes for value to change significantly -- 1.4x the half-life) -- this is important for damping oscillations -- generally reflects time constants associated with synaptic channels which are not modeled in the most abstract rate code models (set to 1 for detailed spiking models with more realistic synaptic currents) -- larger values (e.g., 3) can be important for models with higher netinputs that otherwise might be more prone to oscillation, and is default for GPiInvUnitSpec";
      cust_desc=0;
      base=.networks[1].specs[0].children[0].dt$$;
      mbr=LeabraDtSpec::net_tau;
      data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="": notes="20 default -- inhib updates relatively fast ": };
     };
     ControlPanelMember @[7] {
      label="bidir_lay_inhib";
      short_label=0;
      cust_label=1;
      desc=" how to compute layer-wide inhibition -- uses feedforward (FF) and feedback (FB) inhibition (FFFB) based on average netinput (FF) and activation (FB) -- net inhibition is MAX of all operative inhibition -- any inhibitory unit inhibition is just added on top of this computed inhibition";
      cust_desc=0;
      base=.networks[1].specs[2]$$;
      mbr=LeabraLayerSpec::lay_inhib;
      data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="": range="": notes="off by default -- turn on to engage FFFB computed inhib": };
     };
     ControlPanelMember @[8] {
      label="bdir_act_fun";
      short_label=0;
      cust_label=1;
      desc=" activation function to use -- typically NOISY_XX1 or SPIKE -- others are for special purposes or testing<br> * NOISY XX1:  x over x plus 1 convolved with Gaussian noise (noise is nvar)<br> * SPIKE:  discrete spiking activations (spike when > thr) -- default params produce adaptive exponential (AdEx) model";
      cust_desc=0;
      base=.networks[0].specs[0]$$;
      mbr=LeabraUnitSpec::act_fun;
      data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="": range="0:1:0.1": notes="": };
     };
    };
   };
   mths {
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
    ControlPanelMethod @[0] {
     label="Defaults";
     short_label=0;
     cust_label=1;
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=.programs[0]$$;
     mth=Program::Run_Gui;
    };
    ControlPanelMethod @[1] {
     label="SetWeights";
     short_label=0;
     cust_label=1;
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=.programs[1]$$;
     mth=Program::Run_Gui;
    };
    ControlPanelMethod @[2] {
     label="SetInputPct";
     short_label=0;
     cust_label=1;
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=.programs[2]$$;
     mth=Program::Run_Gui;
    };
    ControlPanelMethod @[3] {
     label="Init";
     short_label=0;
     cust_label=0;
     desc=" run init_code, global variables retain current values unless reset in the init_code";
     cust_desc=0;
     base=.programs.gp[0][0]$$;
     mth=Program::Init;
    };
    ControlPanelMethod @[4] {
     label="Run";
     short_label=0;
     cust_label=0;
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.programs.gp[0][0]$;
     mth=Program::Run_Gui;
    };
    ControlPanelMethod @[5] {
     label="Step";
     short_label=0;
     cust_label=0;
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.programs.gp[0][0]$;
     mth=Program::Step_Gui;
    };
    ControlPanelMethod @[6] {
     label="Stop";
     short_label=0;
     cust_label=0;
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     cust_desc=0;
     base=$.programs.gp[0][0]$;
     mth=Program::Stop;
    };
   };
  };
  ClusterRun @[1] {
   name="ClusterRun";
   cp_state=REGULAR;
   updt_while_running=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
   };
   mths {
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   search_algos {
    name="search_algos";
    el_typ=ParamSearchAlgo;
    el_def=0;
   };
   use_search_algo=0;
   cur_search_algo=NULL;
   set_proj_name=0;
   proj_name=;
   auto_updt_interval=10;
   auto_updt_timeout=30;
   cluster=;
   clusters=;
   users=;
   last_submit_time=;
   notes=;
   label=;
   extra_files=;
   svn_repo=;
   repo_url=;
   queue=;
   run_time=;
   exe_cmd="emergent";
   ram_gb=0;
   n_threads=1;
   use_cuda=0;
   use_mpi=0;
   mpi_nodes=10;
   mpi_per_node=1;
   parallel_batch=0;
   pb_batches=10;
   pb_n_batches_per=1;
   nowin_x=0;
   enable_kill=0;
   enable_load=0;
   enable_notes=0;
  };
 };
 active_params {
  name="active_params";
  el_typ=ParamSet;
  el_def=0;
  master_and_clones=0;
 };
 archived_params {
  name="archived_params";
  el_typ=ParamSet;
  el_def=0;
  master_and_clones=0;
 };
 data {
  name="data";
  el_typ=DataTable;
  el_def=0;
  save_tables=1;
  DataTable_Group @.gp[0] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @[0] {
    name="InputPattern";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [1] "Input0";      };
     };
     float_Data @[1] {
      name="Input";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 10;10;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=10;
      matrix_col_width=10;
      ar {
       name="ar";
      [10 10 1] 0;1;0;1;0;1;0;0;0;0;
0;0;1;0;1;0;0;0;0;1;
1;0;0;0;0;0;0;0;0;0;
0;0;1;0;1;0;0;0;1;0;
0;1;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;1;0;1;1;0;0;0;0;0;
1;0;0;0;0;0;1;1;0;0;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [1] 0;    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
  };
  DataTable_Group @.gp[1] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @[0] {
    name="TrialOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @[1] {
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     String_Data @[2] {
      name="train_mode";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @[3] {
      name="group";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @[4] {
      name="trial";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @[5] {
      name="tick";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[6] {
      name="time";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     String_Data @[7] {
      name="trial_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @[8] {
      name="group_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @[9] {
      name="output_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     float_Data @[10] {
      name="rt_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     float_Data @[11] {
      name="sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[12] {
      name="norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[13] {
      name="cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[14] {
      name="ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[15] {
      name="Hidden_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
     };
     float_Data @[16] {
      name="Inhib_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     float_Data @[17] {
      name="Hidden2_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[18] {
      name="Inhib2_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[19] {
      name="net_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     float_Data @[20] {
      name="net_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[21] {
      name="net_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     float_Data @[22] {
      name="Hidden_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @[23] {
      name="Inhib_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @[24] {
      name="Hidden2_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[25] {
      name="Inhib2_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[26] {
      name="Hidden_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
     };
     float_Data @[27] {
      name="Inhib_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=20;
      matrix_col_width=10;
     };
     float_Data @[28] {
      name="Hidden2_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[29] {
      name="Inhib2_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[30] {
      name="Hidden_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @[31] {
      name="Inhib_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[32] {
      name="Hidden2_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     float_Data @[33] {
      name="Inhib2_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[1] {
    name="CycleOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      name="cycle";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[1] {
      name="Hidden_acts_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @[2] {
      name="Inhib_acts_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
  };
  DataTable_Group @.gp[2] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
 };
 programs {
  name="programs";
  el_typ=Program;
  el_def=0;
  tags=;
  desc=;
  debug_mode=0;
  Program @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[0].doc$$: };
   };
   name="SetDefaults";
   short_nm="SDflts";
   tags=;
   desc="restores default initial parameters in the simulation";
   version {
    major=8;
    minor=0;
    step=0;
   };
   author="Randall C. O'Reilly";
   email="emergent-users@grey.colorado.edu";
   flags=0;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="MyControlPanel";
     var_type=T_Object;
     object_type=ControlPanel;
     completion_type=;
     object_val=.ctrl_panels[0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="ffExciteUnits";
     var_type=T_Object;
     object_type=LeabraUnitSpec;
     completion_type=;
     object_val=$.networks[0].specs[0]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="ffInhibUnits";
     var_type=T_Object;
     object_type=LeabraUnitSpec;
     completion_type=;
     object_val=.networks[0].specs[0].children[0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="ffFFInhib";
     var_type=T_Object;
     object_type=LeabraConSpec;
     completion_type=;
     object_val=.networks[0].specs[1].children[0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[4] {
     name="ffFBInhib";
     var_type=T_Object;
     object_type=LeabraConSpec;
     completion_type=;
     object_val=.networks[0].specs[1].children[1]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[5] {
     name="ffLayerSpec";
     var_type=T_Object;
     object_type=LeabraLayerSpec;
     completion_type=;
     object_val=.networks[0].specs[2]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[6] {
     name="bdExciteUnits";
     var_type=T_Object;
     object_type=LeabraUnitSpec;
     completion_type=;
     object_val=.networks[1].specs[0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[7] {
     name="bdInhibUnits";
     var_type=T_Object;
     object_type=LeabraUnitSpec;
     completion_type=;
     object_val=.networks[1].specs[0].children[0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[8] {
     name="bdFFInhib";
     var_type=T_Object;
     object_type=LeabraConSpec;
     completion_type=;
     object_val=.networks[1].specs[1].children[0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[9] {
     name="bdFBInhib";
     var_type=T_Object;
     object_type=LeabraConSpec;
     completion_type=;
     object_val=.networks[1].specs[1].children[1]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[10] {
     name="bdLayerSpec";
     var_type=T_Object;
     object_type=LeabraLayerSpec;
     completion_type=;
     object_val=$.networks[1].specs[2]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[11] {
     name="FFExcite";
     var_type=T_Object;
     object_type=LeabraNetwork;
     completion_type=;
     object_val=.networks[0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[12] {
     name="BidirExcite";
     var_type=T_Object;
     object_type=LeabraNetwork;
     completion_type=;
     object_val=.networks[1]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[13] {
     name="input_pct";
     var_type=T_Int;
     int_val=20;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[14] {
     name="SetInputPct";
     var_type=T_Object;
     object_type=Program;
     completion_type=;
     object_val=$.programs[2]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[15] {
     name="bdInhibCons";
     var_type=T_Object;
     object_type=LeabraConSpec;
     completion_type=;
     object_val=.networks[1].specs[4]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    Comment @[0] {
     name="Comment_FFExciteNetwork";
     desc="FFExcite Network";
     flags=CAN_REVERT_TO_CODE;
     code_string="// FFExcite Network";
    };
    MemberAssign @[1] {
     name="MemberAssign_ffExciteUnitsgbare10";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ffExciteUnits.g_bar.e = 1.0";
     obj=.programs[0].vars[1]$$;
     path="g_bar.e";
     expr {
      expr="1.0";
     };
     update_after=0;
    };
    MemberAssign @[2] {
     name="MemberAssign_ffExciteUnitsgbarl01";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ffExciteUnits.g_bar.l = 0.1";
     obj=$.programs[0].vars[1]$;
     path="g_bar.l";
     expr {
      expr="0.1";
     };
     update_after=0;
    };
    MemberAssign @[3] {
     name="MemberAssign_ffExciteUnitsgbari4";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ffExciteUnits.g_bar.i = .4";
     obj=$.programs[0].vars[1]$;
     path="g_bar.i";
     expr {
      expr=".4";
     };
     update_after=1;
    };
    MemberAssign @[4] {
     name="MemberAssign_ffExciteUnitsdtvmtau33";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ffExciteUnits.dt.vm_tau = 3.3";
     obj=$.programs[0].vars[1]$;
     path="dt.vm_tau";
     expr {
      expr="3.3";
     };
     update_after=1;
    };
    MemberAssign @[5] {
     name="MemberAssign_ffExciteUnitsdtnettau40";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ffExciteUnits.dt.net_tau = 40";
     obj=$.programs[0].vars[1]$;
     path="dt.net_tau";
     expr {
      expr="40";
     };
     update_after=1;
    };
    MemberAssign @[6] {
     name="MemberAssign_ffInhibUnitsgbare1";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ffInhibUnits.g_bar.e = 1";
     obj=.programs[0].vars[2]$$;
     path="g_bar.e";
     expr {
      expr="1";
     };
     update_after=0;
    };
    MemberAssign @[7] {
     name="MemberAssign_ffInhibUnitsgbarl01";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ffInhibUnits.g_bar.l = 0.1";
     obj=$.programs[0].vars[2]$;
     path="g_bar.l";
     expr {
      expr="0.1";
     };
     update_after=0;
    };
    MemberAssign @[8] {
     name="MemberAssign_ffInhibUnitsgbari75";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ffInhibUnits.g_bar.i = .75";
     obj=$.programs[0].vars[2]$;
     path="g_bar.i";
     expr {
      expr=".75";
     };
     update_after=1;
    };
    MemberAssign @[9] {
     name="MemberAssign_ffInhibUnitsdtvmtau33";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ffInhibUnits.dt.vm_tau = 3.3";
     obj=$.programs[0].vars[2]$;
     path="dt.vm_tau";
     expr {
      expr="3.3";
     };
     update_after=1;
    };
    MemberAssign @[10] {
     name="MemberAssign_ffInhibUnitsdtnettau20";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ffInhibUnits.dt.net_tau = 20";
     obj=$.programs[0].vars[2]$;
     path="dt.net_tau";
     expr {
      expr="20";
     };
     update_after=1;
    };
    MemberAssign @[11] {
     name="MemberAssign_ffFFInhibwtscalerel1";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ffFFInhib.wt_scale.rel = 1";
     obj=.programs[0].vars[3]$$;
     path="wt_scale.rel";
     expr {
      expr="1";
     };
     update_after=0;
    };
    MemberAssign @[12] {
     name="MemberAssign_ffFFInhibwtscaleabs1";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ffFFInhib.wt_scale.abs = 1";
     obj=$.programs[0].vars[3]$;
     path="wt_scale.abs";
     expr {
      expr="1";
     };
     update_after=1;
    };
    MemberAssign @[13] {
     name="MemberAssign_ffFBInhibwtscalerel1";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ffFBInhib.wt_scale.rel = 1";
     obj=.programs[0].vars[4]$$;
     path="wt_scale.rel";
     expr {
      expr="1";
     };
     update_after=0;
    };
    MemberAssign @[14] {
     name="MemberAssign_ffFBInhibwtscaleabs1";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ffFBInhib.wt_scale.abs = 1";
     obj=$.programs[0].vars[4]$;
     path="wt_scale.abs";
     expr {
      expr="1";
     };
     update_after=1;
    };
    MemberAssign @[15] {
     name="MemberAssign_ffLayerSpeclayinhibonfalse";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ffLayerSpec.lay_inhib.on = false";
     obj=.programs[0].vars[5]$$;
     path="lay_inhib.on";
     expr {
      expr="false";
     };
     update_after=0;
    };
    MemberAssign @[16] {
     name="MemberAssign_ffLayerSpeclayinhibgi18";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ffLayerSpec.lay_inhib.gi = 1.8";
     obj=$.programs[0].vars[5]$;
     path="lay_inhib.gi";
     expr {
      expr="1.8";
     };
     update_after=0;
    };
    Comment @[17] {
     name="Comment_BDirExciteNetwork";
     desc="BDir Excite Network";
     flags=CAN_REVERT_TO_CODE;
     code_string="// BDir Excite Network";
    };
    MemberAssign @[18] {
     name="MemberAssign_bdExciteUnitsgbare10";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="bdExciteUnits.g_bar.e = 1.0";
     obj=.programs[0].vars[6]$$;
     path="g_bar.e";
     expr {
      expr="1.0";
     };
     update_after=0;
    };
    MemberAssign @[19] {
     name="MemberAssign_bdExciteUnitsgbarl01";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="bdExciteUnits.g_bar.l = 0.1";
     obj=$.programs[0].vars[6]$;
     path="g_bar.l";
     expr {
      expr="0.1";
     };
     update_after=0;
    };
    MemberAssign @[20] {
     name="MemberAssign_bdExciteUnitsgbari4";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="bdExciteUnits.g_bar.i = .4";
     obj=$.programs[0].vars[6]$;
     path="g_bar.i";
     expr {
      expr=".4";
     };
     update_after=1;
    };
    MemberAssign @[21] {
     name="MemberAssign_bdExciteUnitsdtvmtau33";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="bdExciteUnits.dt.vm_tau = 3.3";
     obj=$.programs[0].vars[6]$;
     path="dt.vm_tau";
     expr {
      expr="3.3";
     };
     update_after=1;
    };
    MemberAssign @[22] {
     name="MemberAssign_bdExciteUnitsdtnettau40";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="bdExciteUnits.dt.net_tau = 40";
     obj=$.programs[0].vars[6]$;
     path="dt.net_tau";
     expr {
      expr="40";
     };
     update_after=1;
    };
    MemberAssign @[23] {
     name="MemberAssign_bdInhibUnitsgbare1";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="bdInhibUnits.g_bar.e = 1";
     obj=.programs[0].vars[7]$$;
     path="g_bar.e";
     expr {
      expr="1";
     };
     update_after=0;
    };
    MemberAssign @[24] {
     name="MemberAssign_bdInhibUnitsgbarl01";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="bdInhibUnits.g_bar.l = 0.1";
     obj=$.programs[0].vars[7]$;
     path="g_bar.l";
     expr {
      expr="0.1";
     };
     update_after=0;
    };
    MemberAssign @[25] {
     name="MemberAssign_bdInhibUnitsgbari75";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="bdInhibUnits.g_bar.i = .75";
     obj=$.programs[0].vars[7]$;
     path="g_bar.i";
     expr {
      expr=".75";
     };
     update_after=1;
    };
    MemberAssign @[26] {
     name="MemberAssign_bdInhibUnitsdtvmtau33";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="bdInhibUnits.dt.vm_tau = 3.3";
     obj=$.programs[0].vars[7]$;
     path="dt.vm_tau";
     expr {
      expr="3.3";
     };
     update_after=1;
    };
    MemberAssign @[27] {
     name="MemberAssign_bdInhibUnitsdtnettau20";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="bdInhibUnits.dt.net_tau = 20";
     obj=$.programs[0].vars[7]$;
     path="dt.net_tau";
     expr {
      expr="20";
     };
     update_after=1;
    };
    MemberAssign @[28] {
     name="MemberAssign_bdFFInhibwtscalerel5";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="bdFFInhib.wt_scale.rel = .5";
     obj=.programs[0].vars[8]$$;
     path="wt_scale.rel";
     expr {
      expr=".5";
     };
     update_after=0;
    };
    MemberAssign @[29] {
     name="MemberAssign_bdFFInhibwtscaleabs1";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="bdFFInhib.wt_scale.abs = 1";
     obj=$.programs[0].vars[8]$;
     path="wt_scale.abs";
     expr {
      expr="1";
     };
     update_after=1;
    };
    MemberAssign @[30] {
     name="MemberAssign_bdFBInhibwtscalerel1";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="bdFBInhib.wt_scale.rel = 1";
     obj=.programs[0].vars[9]$$;
     path="wt_scale.rel";
     expr {
      expr="1";
     };
     update_after=0;
    };
    MemberAssign @[31] {
     name="MemberAssign_bdFBInhibwtscaleabs1";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="bdFBInhib.wt_scale.abs = 1";
     obj=$.programs[0].vars[9]$;
     path="wt_scale.abs";
     expr {
      expr="1";
     };
     update_after=1;
    };
    MemberAssign @[32] {
     name="MemberAssign_bdInhibConswtscaleabs1";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="bdInhibCons.wt_scale.abs = 1";
     obj=.programs[0].vars[15]$$;
     path="wt_scale.abs";
     expr {
      expr="1";
     };
     update_after=1;
    };
    MemberAssign @[33] {
     name="MemberAssign_bdLayerSpeclayinhibonfalse";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="bdLayerSpec.lay_inhib.on = false";
     obj=.programs[0].vars[10]$$;
     path="lay_inhib.on";
     expr {
      expr="false";
     };
     update_after=0;
    };
    MemberAssign @[34] {
     name="MemberAssign_bdLayerSpeclayinhibgi18";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="bdLayerSpec.lay_inhib.gi = 1.8";
     obj=$.programs[0].vars[10]$;
     path="lay_inhib.gi";
     expr {
      expr="1.8";
     };
     update_after=0;
    };
    Comment @[35] {
     name="Comment_weights";
     desc="weights";
     flags=CAN_REVERT_TO_CODE;
     code_string="// weights";
    };
    MemberAssign @[36] {
     name="MemberAssign_FFExcitespecsExciteConsrndvar2";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="FFExcite.specs.ExciteCons.rnd.var = .2";
     obj=.programs[0].vars[11]$$;
     path="specs.ExciteCons.rnd.var";
     expr {
      expr=".2";
     };
     update_after=0;
    };
    MemberAssign @[37] {
     name="MemberAssign_FFExcitespecsExc_peRandomUNIFORM";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="FFExcite.specs.ExciteCons.rnd.type = Random::UNIFORM";
     obj=$.programs[0].vars[11]$;
     path="specs.ExciteCons.rnd.type";
     expr {
      expr="Random::UNIFORM";
     };
     update_after=0;
    };
    MemberAssign @[38] {
     name="MemberAssign_BidirExcitespecs_citeConsrndvar2";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="BidirExcite.specs.ExciteCons.rnd.var = .2";
     obj=.programs[0].vars[12]$$;
     path="specs.ExciteCons.rnd.var";
     expr {
      expr=".2";
     };
     update_after=0;
    };
    MemberAssign @[39] {
     name="MemberAssign_BidirExcitespecs_peRandomUNIFORM";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="BidirExcite.specs.ExciteCons.rnd.type = Random::UNIFORM";
     obj=$.programs[0].vars[12]$;
     path="specs.ExciteCons.rnd.type";
     expr {
      expr="Random::UNIFORM";
     };
     update_after=0;
    };
    MethodCall @[40] {
     name="MethodCall_FFExciteInitWeights";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="FFExcite->Init_Weights()";
     result_var=NULL;
     obj=$.programs[0].vars[11]$;
     method=Network::Init_Weights;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="void Init_Weights()";
     meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
    };
    MethodCall @[41] {
     name="MethodCall_BidirExciteInitWeights";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="BidirExcite->Init_Weights()";
     result_var=NULL;
     obj=$.programs[0].vars[12]$;
     method=Network::Init_Weights;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="void Init_Weights()";
     meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
    };
    Comment @[42] {
     name="Comment_inputpct";
     desc="input pct";
     flags=CAN_REVERT_TO_CODE;
     code_string="// input pct";
    };
    OtherProgramVar @[43] {
     name="OtherProgramVar_VarsToprogramSet_pctvar2var3var4";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Vars To:  program=SetInputPct set=to  var_1=input_pct  var_2=?  var_3=?  var_4=? ";
     other_prog=$.programs[2]$;
     set_other=1;
     var_1=.programs[0].vars[13]$$;
     var_2=NULL;
     var_3=NULL;
     var_4=NULL;
    };
    ProgramCall @[44] {
     name="ProgramCall_SetInputPct";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="SetInputPct()";
     prog_args {
      name="prog_args";
      el_typ=ProgArg;
      el_def=0;
     };
     target=$.programs[2]$;
     targ_ld_init="*SetInputPct*";
    };
    MethodCall @[45] {
     name="MethodCall_MyControlPanelUpdateAfterEdit";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="MyControlPanel->UpdateAfterEdit()";
     result_var=NULL;
     obj=.programs[0].vars[0]$$;
     method=taBase::UpdateAfterEdit;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="void UpdateAfterEdit()";
     meth_desc=" (aka UAE) called after editing, or any user change to members (eg. in the interface, script)";
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @[1] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[1].doc$$: };
   };
   name="SetWeights";
   short_nm="SWghts";
   tags=;
   desc="set weights to be either trained or untrained";
   version {
    major=8;
    minor=0;
    step=0;
   };
   author="Randall C. O'Reilly";
   email="emergent-users@grey.colorado.edu";
   flags=0;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
    DynEnumType @[0] {
     name="WtType";
     desc=;
     enums {
      name="enums";
      el_typ=DynEnumItem;
      el_def=0;
      DynEnumItem @[0] {
       name="UNTRAINED";
       value=0;
       desc="weights have uniform random variance of .2";
      };
      DynEnumItem @[1] {
       name="TRAINED";
       value=1;
       desc="weights have gaussian variance of .7";
      };
     };
     bits=0;
    };
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="wt_type";
     var_type=T_DynEnum;
     completion_type=;
     object_scope=NULL;
     dyn_enum_val {
      user_data_=NULL;
      enum_type=.programs[1].types[0]$$;
      value=1;
     };
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="FFExcite";
     var_type=T_Object;
     object_type=LeabraNetwork;
     completion_type=;
     object_val=$.networks[0]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="BidirExcite";
     var_type=T_Object;
     object_type=LeabraNetwork;
     completion_type=;
     object_val=$.networks[1]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    If @[0] {
     name="If_ifwttypeUNTRAINED";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (wt_type == UNTRAINED)";
     cond {
      expr="wt_type == UNTRAINED";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MemberAssign @[0] {
       name="MemberAssign_FFExcitespecsExciteConsrndvar2";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="FFExcite.specs.ExciteCons.rnd.var = .2";
       obj=.programs[1].vars[1]$$;
       path="specs.ExciteCons.rnd.var";
       expr {
	expr=".2";
       };
       update_after=0;
      };
      MemberAssign @[1] {
       name="MemberAssign_FFExcitespecsExc_peRandomUNIFORM";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="FFExcite.specs.ExciteCons.rnd.type = Random::UNIFORM";
       obj=$.programs[1].vars[1]$;
       path="specs.ExciteCons.rnd.type";
       expr {
	expr="Random::UNIFORM";
       };
       update_after=0;
      };
      MemberAssign @[2] {
       name="MemberAssign_BidirExcitespecs_citeConsrndvar2";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="BidirExcite.specs.ExciteCons.rnd.var = .2";
       obj=.programs[1].vars[2]$$;
       path="specs.ExciteCons.rnd.var";
       expr {
	expr=".2";
       };
       update_after=0;
      };
      MemberAssign @[3] {
       name="MemberAssign_BidirExcitespecs_peRandomUNIFORM";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="BidirExcite.specs.ExciteCons.rnd.type = Random::UNIFORM";
       obj=$.programs[1].vars[2]$;
       path="specs.ExciteCons.rnd.type";
       expr {
	expr="Random::UNIFORM";
       };
       update_after=0;
      };
     };
    };
    Else @[1] {
     name="Else_If_ifwttypeUNTRAINED";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="else";
     cond {
      expr=;
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MemberAssign @[0] {
       name="MemberAssign_FFExcitespecsExciteConsrndvar7";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="FFExcite.specs.ExciteCons.rnd.var = .7";
       obj=$.programs[1].vars[1]$;
       path="specs.ExciteCons.rnd.var";
       expr {
	expr=".7";
       };
       update_after=0;
      };
      MemberAssign @[1] {
       name="MemberAssign_FFExcitespecsExc_eRandomGAUSSIAN";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="FFExcite.specs.ExciteCons.rnd.type = Random::GAUSSIAN";
       obj=$.programs[1].vars[1]$;
       path="specs.ExciteCons.rnd.type";
       expr {
	expr="Random::GAUSSIAN";
       };
       update_after=0;
      };
      MemberAssign @[2] {
       name="MemberAssign_BidirExcitespecs_citeConsrndvar7";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="BidirExcite.specs.ExciteCons.rnd.var = .7";
       obj=$.programs[1].vars[2]$;
       path="specs.ExciteCons.rnd.var";
       expr {
	expr=".7";
       };
       update_after=0;
      };
      MemberAssign @[3] {
       name="MemberAssign_BidirExcitespecs_eRandomGAUSSIAN";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="BidirExcite.specs.ExciteCons.rnd.type = Random::GAUSSIAN";
       obj=$.programs[1].vars[2]$;
       path="specs.ExciteCons.rnd.type";
       expr {
	expr="Random::GAUSSIAN";
       };
       update_after=0;
      };
     };
    };
    MethodCall @[2] {
     name="MethodCall_FFExciteInitWeights";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="FFExcite->Init_Weights()";
     result_var=NULL;
     obj=$.programs[1].vars[1]$;
     method=Network::Init_Weights;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="void Init_Weights()";
     meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
    };
    MethodCall @[3] {
     name="MethodCall_BidirExciteInitWeights";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="BidirExcite->Init_Weights()";
     result_var=NULL;
     obj=$.programs[1].vars[2]$;
     method=Network::Init_Weights;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="void Init_Weights()";
     meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @[2] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[2].doc$$: };
   };
   name="SetInputPct";
   short_nm="AplyIn";
   tags=;
   desc="change input pattern to given input pct";
   version {
    major=8;
    minor=0;
    step=0;
   };
   author="Randall C. O'Reilly";
   email="emergent-users@grey.colorado.edu";
   flags=NO_STOP_STEP;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="input_pct";
     var_type=T_Int;
     int_val=20;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="percentage activation for input pattern -- must call SetInputPct program to take effect";
     init_from=NULL;
    };
    ProgVar @[1] {
     name="input_data";
     var_type=T_Object;
     object_type=DataTable;
     completion_type=;
     object_val=.data.gp[0][0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    DataGenCall @[0] {
     name="DataGenCall_taDataGenPermute_putinputpct1000";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="taDataGen::PermutedBinary(input_data, \"Input\", input_pct, 1.0, 0.0, )";
     result_var=NULL;
     object_type=taDataGen;
     method=taDataGen::PermutedBinary;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="data";
       required=1;
       def_val=;
       prev_expr="input_data";
       expr {
	expr="input_data";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="col_nm";
       required=1;
       def_val=;
       prev_expr="\"Input\"";
       expr {
	expr="\"Input\"";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="n_on";
       required=1;
       def_val=;
       prev_expr="input_pct";
       expr {
	expr="input_pct";
       };
      };
      ProgArg @[3] {
       arg_type=float;
       type="float";
       name="on_val";
       required=0;
       def_val="1.0f";
       prev_expr="1.0";
       expr {
	expr="1.0";
       };
      };
      ProgArg @[4] {
       arg_type=float;
       type="float";
       name="off_val";
       required=0;
       def_val="0.0f";
       prev_expr="0.0";
       expr {
	expr="0.0";
       };
      };
      ProgArg @[5] {
       arg_type=int;
       type="int";
       name="thr_no";
       required=0;
       def_val="-1";
       prev_expr=;
       expr {
	expr=;
       };
      };
     };
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program_Group @.gp[0] {
   name="LeabraAll_Std";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All";
   desc="The full set of programs for training a standard Leabra network";
   debug_mode=0;
   Program @[0] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][0].doc$$: };
    };
    name="LeabraEpoch";
    short_nm="Epoch";
    tags="Leabra, Std";
    desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=2;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[1]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=0;
      completion_type=;
      object_scope=NULL;
      hard_enum_type=DataLoop::Order;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=.data.gp[1][0]$$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="step_on_err";
      var_type=T_Bool;
      bool_val=0;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="when you step at the Epoch level, this will automatically step through to the next point at which an error was made -- you can use the netview history to replay what happend";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      completion_type=;
      object_val=.networks[1].epoch_time$$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=1;
      completion_type=;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInittrial";
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=$.programs.gp[0][0].args[0]$;
      local_ctr_var=.programs.gp[0][0].vars[1]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=.programs.gp[0][0].vars[4]$$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInittrial";
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=$.programs.gp[0][0].args[0]$;
      local_ctr_var=$.programs.gp[0][0].vars[1]$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=$.programs.gp[0][0].vars[4]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[2] {
      name="MethodCall_epochtimerStartTimertrue";
      desc="start the epoch timer to record computation time per epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->StartTimer(true)";
      result_var=NULL;
      obj=$.programs.gp[0][0].vars[4]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     MethodCall @[3] {
      name="MethodCall_networkInitEpoch";
      desc="added in 8.0: essential for param_seqs";
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="network->Init_Epoch()";
      result_var=NULL;
      obj=$.programs.gp[0][0].args[0]$;
      method=Network::Init_Epoch;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_Epoch()";
      meth_desc=" Initializes network state at the start of a new epoch -- updates parameters according to param_seq for example";
     };
     MemberAssign @[4] {
      name="MemberAssign_networktimescycleqtrfalse";
      desc="always cycle by individual cycles!";
      flags=NON_STD|CAN_REVERT_TO_CODE;
      code_string="network.times.cycle_qtr = false";
      obj=$.programs.gp[0][0].args[0]$;
      path="times.cycle_qtr";
      expr {
       expr="false";
      };
      update_after=0;
     };
     MethodCall @[5] {
      name="MethodCall_trialmondataResetData";
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->ResetData()";
      result_var=NULL;
      obj=.programs.gp[0][0].vars[2]$$;
      method=DataTable::ResetData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void ResetData()";
      meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
     };
     NetDataLoop @[6] {
      name="NetDataLoop_NetDataLoopSEQUE_ardatalooporder";
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Data Loop (SEQUENTIAL):  table=input_data  index=data_loop_index  order_var=data_loop_order ";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraTrialnetworkinputdata";
	desc="run the trial program, passing network and input_data";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraTrial(network, input_data)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.programs.gp[0][1]$$;
	targ_ld_init="*LeabraTrial*";
       };
       If @[1] {
	name="If_ifsteponerrnetworksse00";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (step_on_err && network.sse > 0.0)";
	cond {
	 expr="step_on_err && network.sse > 0.0";
	};
	true_code {
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 StopStepPoint @[0] {
	  name="StopStepPoint_StopStepPoint";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="Stop_Step Point";
	  cond {
	   expr=;
	  };
	 };
	};
       };
      };
      data_var=.programs.gp[0][0].args[1]$$;
      index_var=.programs.gp[0][0].vars[5]$$;
      order_var=.programs.gp[0][0].vars[0]$$;
      order=SEQUENTIAL;
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     If @[7] {
      name="If_ifnetworkwtupdateNetworkBATCH";
      desc="if full batch mode, update only at end of epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.wt_update == Network::BATCH)";
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkComputeWeights";
	desc="final update of weights based on accumulated changes";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=$.programs.gp[0][0].args[0]$;
	method=Network::Compute_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[8] {
      name="MethodCall_networkComputeEpochStats";
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_EpochStats()";
      result_var=NULL;
      obj=$.programs.gp[0][0].args[0]$;
      method=Network::Compute_EpochStats;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_EpochStats()";
      meth_desc=" compute epoch-level statistics; calls DMem_ComputeAggs (if dmem) and EpochSSE -- specific algos may add more";
     };
     MethodCall @[9] {
      name="MethodCall_epochtimerEndTimer";
      desc="done with the computation in the epoch -- record time it took";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->EndTimer()";
      result_var=NULL;
      obj=$.programs.gp[0][0].vars[4]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
    };
    step_prog=$.programs.gp[0][0]$;
    step_n=100;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraEpoch";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraEpoch";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[1] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][1].doc$$: };
    };
    name="LeabraTrial";
    short_nm="Trial";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/output event or external information, over a single alpha frequency cycle (100 msec / 10 Hz) -- iterates over gamma-frequency (25 msec / 40 Hz) quarter-trials";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[1]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      name="LocalVars_LocalVars1vars";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (1 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="qtr";
	var_type=T_Int;
	int_val=0;
	completion_type=;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     If @[1] {
      name="If_ifnetworkCompute_stnetworktrial1";
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.Compute_Weights_Test(network.trial+1))";
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkComputeWeights";
	desc="update weights -- do this at start instead of end, so that dwt is valid";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=.programs.gp[0][1].args[0]$$;
	method=Network::Compute_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[2] {
      name="MethodCall_networkTrialInit";
      desc="initializes various counters at start of trial";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Init()";
      result_var=NULL;
      obj=$.programs.gp[0][1].args[0]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Init()";
      meth_desc=" initialize at start of trial (init specs, Decay state)";
     };
     Comment @[3] {
      name="Comment_notecanapplyinpu_Quarterasneeded";
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[4] {
      name="MethodCall_networkInitInputData";
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.programs.gp[0][1].args[0]$;
      method=Network::Init_InputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[5] {
      name="ProgramCall_ApplyInputsnetworkinputdata";
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=CAN_REVERT_TO_CODE;
      code_string="ApplyInputs(network, input_data)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=.programs.gp[0][4]$$;
      targ_ld_init="*ApplyInputs*";
     };
     ForLoop @[6] {
      name="ForLoop_forqtr0qtr4qtr";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="for (qtr = 0; qtr < 4; qtr++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraQuarternetworkinputdata";
	desc="run the quarter program (which iterates over cyles of network activation updating) for each quarter";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraQuarter(network, input_data)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.programs.gp[0][2]$$;
	targ_ld_init="*LeabraQuarter*";
       };
      };
      init {
       expr="qtr = 0";
      };
      test {
       expr="qtr < 4";
      };
      iter {
       expr="qtr++";
      };
     };
     MethodCall @[7] {
      name="MethodCall_networkTrialFinal";
      desc="after the trial is over, do final computations";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Final()";
      result_var=NULL;
      obj=$.programs.gp[0][1].args[0]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Final()";
      meth_desc=" do final processing after trial: Compute_AbsRelNetin";
     };
     ProgramCall @[8] {
      name="ProgramCall_LeabraTrialMonitornetwork";
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraTrialMonitor(network)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=.programs.gp[0][5]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[9] {
      name="NetUpdateView_NetUpdateView";
      desc="update the network view(s) (only if update_net_view is true)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[0][1].args[0]$;
      update_var=.programs.gp[0][1].vars[0]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraTrial";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraTrial";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[2] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][2].doc$$: };
    };
    name="LeabraQuarter";
    short_nm="Quarter";
    tags="Leabra, Std";
    desc="iterates over cycles of activation updating for a gamma-frequency (25 msec / 40 Hz) quarter of an alpha frequency (100 msec / 10 Hz) trial";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[1]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=200;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInitcycle";
      desc="initialize local cycle counter and corresponding counter on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: cycle";
      network_var=.programs.gp[0][2].args[0]$$;
      local_ctr_var=.programs.gp[0][2].vars[0]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      name="LocalVars_LocalVars2vars";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (2 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="cycle_max";
	var_type=T_Int;
	int_val=0;
	completion_type=;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @[1] {
	name="cyc";
	var_type=T_Int;
	int_val=0;
	completion_type=;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     Comment @[1] {
      name="Comment_notecanapplyinpu_Quarterasneeded";
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[2] {
      name="MethodCall_networkInitInputData";
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.programs.gp[0][2].args[0]$;
      method=Network::Init_InputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[3] {
      name="ProgramCall_ApplyInputsnetworkinputdata";
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="ApplyInputs(network, input_data)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=$.programs.gp[0][4]$;
      targ_ld_init="*ApplyInputs*";
     };
     MethodCall @[4] {
      name="MethodCall_networkQuarterInit";
      desc="initializes various counters at start of settling";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Init()";
      result_var=NULL;
      obj=$.programs.gp[0][2].args[0]$;
      method=LeabraNetwork::Quarter_Init;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Init()";
      meth_desc=" initialize network for quarter-level processing (hard clamp, netscale)";
     };
     MethodCall @[5] {
      name="MethodCall_cyclemaxnetworkCycleRunMax";
      desc="will be 25 if network times.cycle_qtr is true, else 1";
      flags=CAN_REVERT_TO_CODE;
      code_string="cycle_max = network->CycleRunMax()";
      result_var=.programs.gp[0][2].prog_code[0].local_vars[0]$$;
      obj=$.programs.gp[0][2].args[0]$;
      method=LeabraNetwork::CycleRunMax;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int CycleRunMax()";
      meth_desc=" max loop counter for running cycles in a gamma quarter of processing, taking into account the fact that threading can run multiple cycles per Cycle_Run call if quarter flag is set";
     };
     ForLoop @[6] {
      name="ForLoop_forcyc0cyccyclemaxcyc";
      desc="// the main loop over cycles of updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="for (cyc=0; cyc<cycle_max; cyc++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraCyclenetwork";
	desc="run the cycle program -- can run multiple cycles at a time due to threading";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraCycle(network)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=.programs.gp[0][3]$$;
	targ_ld_init="*LeabraCycle*";
       };
       AssignExpr @[1] {
	name="AssignExpr_cyclenetworkcycle";
	desc="grab the updated cycle count";
	flags=CAN_REVERT_TO_CODE;
	code_string="cycle = network.cycle";
	result_var=$.programs.gp[0][2].vars[0]$;
	expr {
	 expr="network.cycle";
	};
       };
      };
      init {
       expr="cyc=0";
      };
      test {
       expr="cyc<cycle_max";
      };
      iter {
       expr="cyc++";
      };
     };
     MethodCall @[7] {
      name="MethodCall_networkQuarterFinal";
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Final()";
      result_var=NULL;
      obj=$.programs.gp[0][2].args[0]$;
      method=LeabraNetwork::Quarter_Final;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Final()";
      meth_desc=" do final processing after each quarter: ";
     };
     MethodCall @[8] {
      name="MethodCall_networkComputePhaseStats";
      desc="compute appropriate stats for each phase (MinusStats, PlusStats)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_PhaseStats()";
      result_var=NULL;
      obj=$.programs.gp[0][2].args[0]$;
      method=LeabraNetwork::Compute_PhaseStats;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_PhaseStats()";
      meth_desc=" compute MinusStats at the end of the minus phase, and PlusStats at the end of the plus phase -- this is preferred over the previous implementation of calling TrialStats only at the end of the minus phase, which required targets to be present in the minus phase, which is not always the case";
     };
     NetUpdateView @[9] {
      name="NetUpdateView_NetUpdateView";
      desc="update network views, if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[0][2].args[0]$;
      update_var=.programs.gp[0][2].vars[1]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraQuarter";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraQuarter";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[3] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][3].doc$$: };
    };
    name="LeabraCycle";
    short_nm="Cycle";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[1]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_networkCycleRun";
      desc="this does all the standard leabra processing of activation updating -- either 1 cycle (1 msec) or 25 cycles if times.cycle_qtr is TRUE (default)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Cycle_Run()";
      result_var=NULL;
      obj=.programs.gp[0][3].args[0]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Cycle_Run()";
      meth_desc=" compute cycle(s) of updating: netinput, inhibition, activations -- multiple cycles can be run depending on lthreads.n_cycles setting and whether multiple threads are actually being used -- see lthreads.n_threads_act";
     };
     ProgramCall @[1] {
      name="ProgramCall_LeabraCycleMonitornetwork";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraCycleMonitor(network)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=.programs.gp[0][6]$$;
      targ_ld_init="*LeabraCycleMonitor*";
     };
     NetUpdateView @[2] {
      name="NetUpdateView_NetUpdateView";
      desc="update network views if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[0][3].args[0]$;
      update_var=.programs.gp[0][3].vars[0]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraCycle";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraCycle";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[4] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][4].doc$$: };
    };
    name="ApplyInputs";
    short_nm="Inputs";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @[0] {
      name="LayerWriter_0";
      data=$.data.gp[0][0]$;
      network=$.networks[1]$;
      layer_data {
       name="layer_data";
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	off=0;
	col_name="Input";
	net_target=LAYER;
	layer_name="Input";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="RandomSpec_7": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	off=0;
	col_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=0;
	noise {name="RandomSpec_9": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="layer_writer_0";
      var_type=T_Object;
      object_type=LayerWriter;
      completion_type=;
      object_val=.programs.gp[0][4].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
      init_from=NULL;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      completion_type=;
      object_val=$.networks[1]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_layerwriter0SetD_nputdatanetwork";
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=CAN_REVERT_TO_CODE;
      code_string="layer_writer_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=.programs.gp[0][4].objs_vars[0]$$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      name="MethodCall_layerwriter0AutoConfig";
      desc="configure to fit the network and input data -- this may cause spurious warning messages and problems in some cases so just turn it OFF if necessary";
      flags=CAN_REVERT_TO_CODE;
      code_string="layer_writer_0->AutoConfig()";
      result_var=NULL;
      obj=$.programs.gp[0][4].objs_vars[0]$;
      method=LayerWriter::AutoConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="remove_unused";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 expr=;
	};
       };
      };
      meth_sig="void AutoConfig(bool remove_unused = true)";
      meth_desc=" do a 'best guess' configuration of items by matching up like-named data Channels and network Layers -- if remove_unused is true, then layer writer elements that existed previously but were not found in input data and network are removed";
     };
     MethodCall @[2] {
      name="MethodCall_layerwriter0CheckConfigfalse";
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=CAN_REVERT_TO_CODE;
      code_string="layer_writer_0->CheckConfig(false)";
      result_var=NULL;
      obj=$.programs.gp[0][4].objs_vars[0]$;
      method=taList_impl::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_layerwriter0SetD_nputdatanetwork";
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=CAN_REVERT_TO_CODE;
      code_string="layer_writer_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=$.programs.gp[0][4].objs_vars[0]$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      name="MethodCall_layerwriter0ApplyInputData";
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=CAN_REVERT_TO_CODE;
      code_string="layer_writer_0->ApplyInputData()";
      result_var=NULL;
      obj=$.programs.gp[0][4].objs_vars[0]$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="bool ApplyInputData()";
      meth_desc=" apply data to the layers, using the network's current context settings (TEST,TRAIN,etc) -- returns success";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="ApplyInputs";
     full_url="https://grey.colorado.edu/emergent/index.php/ApplyInputs";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[5] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][5].doc$$: };
    };
    name="LeabraTrialMonitor";
    short_nm="TrialMon";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       ignore_sig=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[1]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[1]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="train_mode";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[1]$;
	variable="train_mode";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="group";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[1]$;
	variable="group";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[1]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="tick";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[1]$;
	variable="tick";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="time";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[1]$;
	variable="time";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[1]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[1]$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="output_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[1]$;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="rt_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[1]$;
	variable="rt_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[11] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[1]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[12] {
	name="norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[1]$;
	variable="norm_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[13] {
	name="cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[1]$;
	variable="cos_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[14] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[1]$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[15] {
	name="lay_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[1]$;
	variable="layers.sse";
	var_label="lay_sse";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[16] {
	name="lay_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[1]$;
	variable="layers.norm_err";
	var_label="lay_norm_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[17] {
	name="lay_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[1]$;
	variable="layers.cos_err";
	var_label="lay_cos_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[18] {
	name="lay_net_sd";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[1]$;
	variable="layers.net_sd";
	var_label="lay_net_sd";
	name_style=AUTO_NAME;
	max_name_len=7;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[19] {
	name="net_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[1]$;
	variable="cos_diff";
	var_label="net_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[20] {
	name="net_trial_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[1]$;
	variable="trial_cos_diff";
	var_label="net_trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[21] {
	name="net_avg_act_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[1]$;
	variable="avg_act_diff";
	var_label="net_avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[22] {
	name="cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[1]$;
	variable="layers.cos_diff";
	var_label="cos_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[23] {
	name="trial_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[1]$;
	variable="layers.trial_cos_diff";
	var_label="trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[24] {
	name="avg_act_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[1]$;
	variable="layers.avg_act_diff";
	var_label="avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.networks[1]$;
      data=$.data.gp[1][0]$;
      rmv_orphan_cols=1;
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      completion_type=;
      object_val=.programs.gp[0][5].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      completion_type=;
      object_val=$.networks[1]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[1][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_trialnetmonSetDa_lmondatanetwork";
      desc="set the network and datatable for the NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->SetDataNetwork(trial_mon_data, network)";
      result_var=NULL;
      obj=.programs.gp[0][5].objs_vars[0]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[1] {
      name="MethodCall_trialnetmonCheckConfigfalse";
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.programs.gp[0][5].objs_vars[0]$;
      method=taBase::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[2] {
      name="MethodCall_trialnetmonUpdateMonitorstrue";
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.programs.gp[0][5].objs_vars[0]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_trialmondataAddBlankRow";
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.programs.gp[0][5].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      name="MethodCall_trialnetmonGetMonVals";
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.programs.gp[0][5].objs_vars[0]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     MethodCall @[2] {
      name="MethodCall_trialmondataWriteClose";
      desc="update views and other things after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.programs.gp[0][5].vars[0]$;
      method=DataTable::WriteClose;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     MethodCall @[3] {
      name="MethodCall_networkDMemShare_tatrialmondata1";
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->DMem_ShareTrialData(trial_mon_data, 1)";
      result_var=NULL;
      obj=.programs.gp[0][5].args[0]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	prev_expr=;
	expr {
	 expr="1";
	};
       };
      };
      meth_sig="void DMem_ShareTrialData(DataTable* dt, int n_rows = 1)";
      meth_desc=" share trial data from given datatable across the trial-level dmem communicator (outer loop) -- each processor gets data from all other processors; if called every trial with n_rows = 1, data will be identical to non-dmem; if called at end of epoch with n_rows = -1 data will be grouped by processor but this is more efficient";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="Monitor_Data";
     full_url="https://grey.colorado.edu/emergent/index.php/Monitor_Data";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[6] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][6].doc$$: };
    };
    name="LeabraCycleMonitor";
    short_nm="CycMnt";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="cycle_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       ignore_sig=0;
       NetMonItem @[0] {
	name="cycle";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[1]$;
	variable="cycle";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="Hidden_acts_avg";
	computed=0;
	object_type=LeabraLayer;
	object=.networks[1].layers[1]$$;
	variable="acts.avg";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="Inhib_acts_avg";
	computed=0;
	object_type=LeabraLayer;
	object=.networks[1].layers[2]$$;
	variable="acts.avg";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.networks[1]$;
      data=.data.gp[1][1]$$;
      rmv_orphan_cols=1;
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      completion_type=;
      object_val=.programs.gp[0][6].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      completion_type=;
      object_val=$.networks[1]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[1][1]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_cyclenetmonSetDa_hmondatanetwork";
      desc="set data and network on NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="cycle_netmon->SetDataNetwork(epoch_mon_data, network)";
      result_var=NULL;
      obj=.programs.gp[0][6].objs_vars[0]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[1] {
      name="MethodCall_cyclenetmonCheckConfigfalse";
      desc="check configuration and emit errors/warnings for problems";
      flags=CAN_REVERT_TO_CODE;
      code_string="cycle_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.programs.gp[0][6].objs_vars[0]$;
      method=taBase::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[2] {
      name="MethodCall_cyclenetmonUpdateMonitorstrue";
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="cycle_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.programs.gp[0][6].objs_vars[0]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_epochmondataAddBlankRow";
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.programs.gp[0][6].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      name="MethodCall_cyclenetmonGetMonVals";
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=CAN_REVERT_TO_CODE;
      code_string="cycle_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.programs.gp[0][6].objs_vars[0]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     MethodCall @[2] {
      name="MethodCall_epochmondataWriteClose";
      desc="update after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.programs.gp[0][6].vars[0]$;
      method=DataTable::WriteClose;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[7] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][7].doc$$: };
    };
    name="SaveWeights";
    short_nm="SavWts";
    tags="Network, Weights";
    desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="tag";
      var_type=T_String;
      string_val="_gui";
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="user-provided tag (startup script will set this!)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="wts_subdir";
      var_type=T_String;
      string_val=;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="user-provided subdirectory to save weights in";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="fname";
      var_type=T_String;
      string_val="/Users/oreilly/emergent/test/leabra_std.00_0010.wts.gz";
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="final generated file name -- do not edit!";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="epoch_str";
      var_type=T_String;
      string_val="0010";
      completion_type=;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="string rep of epoch with leading zeros";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="batch_str";
      var_type=T_String;
      string_val="00";
      completion_type=;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="string rep of batch with leading zeros";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="final_tag";
      var_type=T_String;
      string_val=".00_0010";
      completion_type=;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch + epoch";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     If @[0] {
      name="If_iftaMiscdmemproc0";
      desc=;
      flags=0;
      code_string=;
      cond {
       expr="taMisc::dmem_proc > 0";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       ReturnExpr @[0] {
	name="ReturnExpr_return";
	desc=;
	flags=0;
	code_string=;
	expr {
	 expr=;
	};
       };
      };
     };
     MiscCall @[1] {
      name="MiscCall_batchstrtaMiscLe_osnetworkbatch2";
      desc="get current batch counter for file name, with leading zeros to length 3";
      flags=CAN_REVERT_TO_CODE;
      code_string="batch_str = taMisc::LeadingZeros(network.batch, 2)";
      result_var=.programs.gp[0][7].vars[4]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network.batch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="2";
	};
       };
      };
     };
     MiscCall @[2] {
      name="MiscCall_epochstrtaMiscLe_osnetworkepoch4";
      desc="get current epoch counter with leading zeros to length 4";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_str = taMisc::LeadingZeros(network.epoch, 4)";
      result_var=.programs.gp[0][7].vars[3]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network.epoch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="4";
	};
       };
      };
     };
     AssignExpr @[3] {
      name="AssignExpr_finaltagtagbatchstrepochstr";
      desc="string 'tag' to identify the batch, epoch, and other user id info for the weights";
      flags=CAN_REVERT_TO_CODE;
      code_string="final_tag = tag + \".\" + batch_str + \"_\" + epoch_str";
      result_var=.programs.gp[0][7].vars[5]$$;
      expr {
       expr="tag + \".\" + batch_str + \"_\" + epoch_str";
      };
     };
     MethodCall @[4] {
      name="MethodCall_fnamenetworkGetF_gwtssubdirfalse";
      desc="get a file name based on the project's current file name, for saving the weights";
      flags=CAN_REVERT_TO_CODE;
      code_string="fname = network->GetFileNameFmProject(\".wts.gz\", final_tag, wts_subdir, false)";
      result_var=.programs.gp[0][7].vars[2]$$;
      obj=.programs.gp[0][7].args[0]$$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ext";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="\".wts.gz\"";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="final_tag";
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="wts_subdir";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
      meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
     };
     MethodCall @[5] {
      name="MethodCall_networkSaveWeigh_meNetworkNETFMT";
      desc="save the weights to that file name";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->SaveWeights(fname, Network::NET_FMT)";
      result_var=NULL;
      obj=$.programs.gp[0][7].args[0]$;
      method=Network::SaveWeights;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="taString&";
	name="fname";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="fname";
	};
       };
       ProgArg @[1] {
	arg_type=Network::WtSaveFormat;
	type="Network::WtSaveFormat";
	name="fmt";
	required=0;
	def_val="Network::NET_FMT";
	prev_expr=;
	expr {
	 expr="Network::NET_FMT";
	};
       };
      };
      meth_sig="void SaveWeights(taString& fname, Network::WtSaveFormat fmt = NET_FMT)";
      meth_desc=" write weight values out in a simple ordered list of weights (optionally in binary fmt) (leave fname empty to pull up file chooser)";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="SaveWeights";
     full_url="https://grey.colorado.edu/emergent/index.php/SaveWeights";
     text_size=1;
     text=;
     html_text=;
    };
   };
  };
 };
 viewers {
  name="viewers";
  el_typ=MainWindowViewer;
  el_def=0;
  MainWindowViewer @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="view_win_lft": value=0.6104167: val_type_fixed=0: };
    UserDataItem @[1] {name="view_win_top": value=0: val_type_fixed=0: };
    UserDataItem @[2] {name="view_win_wd": value=0.3932292: val_type_fixed=0: };
    UserDataItem @[3] {name="view_win_ht": value=1.006482: val_type_fixed=0: };
    UserDataItem @[4] {name="view_win_iconified": value=0: val_type_fixed=0: };
    UserDataItem @[5] {name="view_splitter_state": value=AAAA/wAAAAEAAAADAAAARwAAAUoAAAFGAQAAAAYBAAAAAQE=: val_type_fixed=0: };
   };
   name="Browser3";
   m_data=.$$;
   cur_font_size=12;
   visible=1;
   win_name=".projects[\"inhib\"] - inhib.proj [*]";
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   revert_to_tab_no=-1;
   toolbars {
    name="toolbars";
    el_typ=ToolBar;
    el_def=0;
    ToolBar @[0] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_113";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="view_win_visible": value=1: val_type_fixed=0: };
     };
     name="Application";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     lft=0;
     top=0.02037037;
     o=Horizontal;
    };
   };
   frames {
    name="frames";
    el_typ=BrowseViewerTaBase;
    el_def=0;
    BrowseViewerTaBase @[0] {
     name="Navigator";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$.$;
    };
    PanelViewer @[1] {
     name="Editor";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
    };
    T3PanelViewer @[2] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_58";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="view_panel_selected": value=1: val_type_fixed=0: };
     };
     name="Visualizer";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     panels {
      name="panels";
      el_typ=T3Panel;
      el_def=0;
      T3Panel @[0] {
       name="FFExcite";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=NetView;
	 el_def=0;
	 NetView @[0] {
	  name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_FFExcite_root_view_children_0";
	  m_data=$.networks[0]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  display=1;
	  lay_layout=THREE_D;
	  lay_mv=0;
	  net_text=0;
	  net_state_text {
	   name="net_state_text";
	   state_items {
	    name="state_items";
	    el_typ=NetViewStateItem;
	    el_def=0;
	    NetViewStateItem @[0] {name="batch": net_member=1: display=1: width=8: found=1: };
	    NetViewStateItem @[1] {name="epoch": net_member=1: display=1: width=8: found=1: };
	    NetViewStateItem @[2] {name="group": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[3] {name="trial": net_member=1: display=1: width=8: found=1: };
	    NetViewStateItem @[4] {name="tick": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[5] {name="cycle": net_member=1: display=1: width=8: found=1: };
	    NetViewStateItem @[6] {name="time": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[7] {name="total_trials": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[8] {name="sse": net_member=1: display=1: width=8: found=1: };
	    NetViewStateItem @[9] {name="group_name": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[10] {name="trial_name": net_member=1: display=1: width=8: found=1: };
	    NetViewStateItem @[11] {name="output_name": net_member=1: display=1: width=8: found=1: };
	    NetViewStateItem @[12] {name="quarter": net_member=1: display=1: width=8: found=1: };
	    NetViewStateItem @[13] {name="phase": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[14] {name="tot_cycle": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[15] {name="rt_cycles": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[16] {name="ext_rew": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[17] {name="norm_err": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[18] {name="cos_err": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[19] {name="minus_output_name": net_member=1: display=0: width=8: found=1: };
	   };
	   first_pass=0;
	  };
	  show_iconified=0;
	  cur_unit_vals{ act;	  };
	  hot_vars{ ext;act;net;act_eq;r.wt;r.wt*act;s.wt;v_m;gc_i;I_net;gi_syn;	  };
	  unit_src_path=".layers[2][0]";
	  con_type=ANY_CON;
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  movie_size {x=720: y=720: };
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=14: y=10: z=1.5: };
	  max_size2d {x=14: y=22: z=1: };
	  eff_max_size {x=14: y=10: z=1.5: };
	  font_sizes {net_name=0.05: net_vals=0.05: layer=0.04: layer_min=0.01: layer_vals=0.03: prjn=0.01: unit=0.02: un_nm_len=3: un_val_prec=2: };
	  view_params {xy_square=0: unit_spacing=0.05: prjn_disp=L_R_B: prjn_name=0: prjn_width=0.002: prjn_trans=0.5: lay_trans=0.5: unit_trans=0.6: laygp_width=1: show_laygp=1: };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.5;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="scale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=.colorspecs["C_ColdHot"]$$<ColorScaleSpec,C_ColdHot>;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name="scale_ranges";
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    var_name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    var_name="gc.i";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[2] {
	    var_name="s.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[3] {
	    var_name="gc_i";
	    auto_scale=1;
	    min=-0.929994;
	    max=0.929994;
	   };
	   ScaleRange @[4] {
	    var_name="r.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[5] {
	    var_name="ext";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[6] {
	    var_name="act_eq";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[7] {
	    var_name="gi_syn";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[8] {
	    var_name="v_m";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ Input=0;Hidden=0;Inhib=0;	  };
	  selected_unit_var=;
	 };
	 GraphTableView @[1] {
	  name="CycleOutputData_Graph";
	  m_data=$.data.gp[1][1]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=0.4076537: y=0.4076537: z=0.4076537: }: rotate={x=1.000067: y=0: z=0: rot=0.02233331: }: translate={x=0.06998041: y=1.124568: z=-0.002536524: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="cycle";
	    m_data=.data.gp[1][1].data[0]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="Hidden_acts_avg";
	    m_data=.data.gp[1][1].data[1]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="Inhib_acts_avg";
	    m_data=.data.gp[1][1].data[2]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=0.4076537: y=0.4076537: z=0.4076537: }: rotate={x=1.000067: y=0: z=0: rot=0.02233331: }: translate={x=0.06998041: y=1.124568: z=-0.002536524: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=799: };
	  page_rows=-1687724410;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=1;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  string_spacing=1;
	  width=2;
	  depth=1;
	  axis_font_size=0.08;
	  label_font_size=0.08;
	  x_axis_label_rot=0;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="cycle";
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=1: fix_max=0: max=200: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=2;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   col_name_good=;
	   is_string=1;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=-1: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=1;
	   axis_label=;
	  };
	  tot_plots=8;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="CycleOutputData_Graph_plot_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Hidden_acts_avg";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="CycleOutputData_Graph_plot_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Inhib_acts_avg";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.01410821: fix_max=0: max=0.7701536: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="CycleOutputData_Graph_plot_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="CycleOutputData_Graph_plot_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="CycleOutputData_Graph_plot_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="CycleOutputData_Graph_plot_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="CycleOutputData_Graph_plot_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="CycleOutputData_Graph_plot_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="CycleOutputData_Graph_err_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="CycleOutputData_Graph_err_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="CycleOutputData_Graph_err_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="CycleOutputData_Graph_err_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="CycleOutputData_Graph_err_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="CycleOutputData_Graph_err_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="CycleOutputData_Graph_err_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="CycleOutputData_Graph_err_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  x_axis_label=;
	  y_axis_label=;
	  alt_y_axis_label=;
	  z_axis_label=;
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_gp_use_y=0;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=1;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=1;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       fix_name=0;
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.4494631: y=0.7452691: z=2.061438: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=2.061636;
	};
	T3SavedView @[1] {
	 name="Network";
	 view_saved=1;
	 pos {x=0.497463: y=0.7550231: z=1.606663: };
	 orient {x=-0.9999986: y=0: z=0: rot=0.1200001: };
	 focal_dist=1.6185;
	};
	T3SavedView @[2] {
	 name="Graph";
	 view_saved=1;
	 pos {x=0.4494631: y=1.181835: z=1.173361: };
	 orient {x=1.000076: y=0: z=0: rot=0.05399592: };
	 focal_dist=1.175272;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @[1] {
       name="BidirExcite";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=NetView;
	 el_def=0;
	 NetView @[0] {
	  name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_BidirExcite_root_view_children_0";
	  m_data=$.networks[1]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  display=1;
	  lay_layout=THREE_D;
	  lay_mv=0;
	  net_text=0;
	  net_state_text {
	   name="net_state_text";
	   state_items {
	    name="state_items";
	    el_typ=NetViewStateItem;
	    el_def=0;
	    NetViewStateItem @[0] {name="batch": net_member=1: display=1: width=8: found=1: };
	    NetViewStateItem @[1] {name="epoch": net_member=1: display=1: width=8: found=1: };
	    NetViewStateItem @[2] {name="group": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[3] {name="trial": net_member=1: display=1: width=8: found=1: };
	    NetViewStateItem @[4] {name="tick": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[5] {name="cycle": net_member=1: display=1: width=8: found=1: };
	    NetViewStateItem @[6] {name="time": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[7] {name="total_trials": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[8] {name="sse": net_member=1: display=1: width=8: found=1: };
	    NetViewStateItem @[9] {name="group_name": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[10] {name="trial_name": net_member=1: display=1: width=8: found=1: };
	    NetViewStateItem @[11] {name="output_name": net_member=1: display=1: width=8: found=1: };
	    NetViewStateItem @[12] {name="quarter": net_member=1: display=1: width=8: found=1: };
	    NetViewStateItem @[13] {name="phase": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[14] {name="tot_cycle": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[15] {name="rt_cycles": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[16] {name="ext_rew": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[17] {name="norm_err": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[18] {name="cos_err": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[19] {name="minus_output_name": net_member=1: display=0: width=8: found=1: };
	   };
	   first_pass=0;
	  };
	  show_iconified=0;
	  cur_unit_vals{ act;	  };
	  hot_vars{ ext;act;net;act_eq;r.wt;r.wt*act;s.wt;gc_i;v_m;I_net;gi_syn;	  };
	  unit_src_path=".layers[4][0]";
	  con_type=ANY_CON;
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  movie_size {x=720: y=720: };
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=14: y=10: z=2.333333: };
	  max_size2d {x=30: y=22: z=1: };
	  eff_max_size {x=14: y=10: z=2.333333: };
	  font_sizes {net_name=0.05: net_vals=0.05: layer=0.04: layer_min=0.01: layer_vals=0.03: prjn=0.01: unit=0.02: un_nm_len=3: un_val_prec=2: };
	  view_params {xy_square=0: unit_spacing=0.05: prjn_disp=L_R_B: prjn_name=0: prjn_width=0.002: prjn_trans=0.5: lay_trans=0.5: unit_trans=0.6: laygp_width=1: show_laygp=1: };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.5;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="scale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=0;
	   last_max=0;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name="scale_ranges";
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    var_name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    var_name="net";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[2] {
	    var_name="gc.i";
	    auto_scale=1;
	    min=-4.225199;
	    max=4.225199;
	   };
	   ScaleRange @[3] {
	    var_name="r.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[4] {
	    var_name="v_m";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ Input=0;Hidden=0;Inhib=0;Hidden2=0;Inhib2=0;	  };
	  selected_unit_var=;
	 };
	 GraphTableView @[1] {
	  name="CycleOutputData_Graph";
	  m_data=$.data.gp[1][1]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=0.4878761: y=0.4878761: z=0.4878761: }: rotate={x=0: y=-1.023158: z=0: rot=6.281002: }: translate={x=0.007189173: y=1.164547: z=0.0004577675: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="cycle";
	    m_data=$.data.gp[1][1].data[0]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="Hidden_acts_avg";
	    m_data=$.data.gp[1][1].data[1]$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="Inhib_acts_avg";
	    m_data=$.data.gp[1][1].data[2]$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=0.4878761: y=0.4878761: z=0.4878761: }: rotate={x=0: y=-1.023158: z=0: rot=6.281002: }: translate={x=0.007189173: y=1.164547: z=0.0004577675: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=599: };
	  page_rows=0;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=1;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  string_spacing=1;
	  width=2;
	  depth=1;
	  axis_font_size=0.08;
	  label_font_size=0.08;
	  x_axis_label_rot=0;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="cycle";
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=1: fix_max=0: max=200: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=2;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   col_name_good=;
	   is_string=1;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=-1: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=1;
	   axis_label=;
	  };
	  tot_plots=8;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="CycleOutputData_Graph_plot_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Hidden_acts_avg";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="CycleOutputData_Graph_plot_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Inhib_acts_avg";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=1.183117e-6: fix_max=0: max=0.7604626: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="CycleOutputData_Graph_plot_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="CycleOutputData_Graph_plot_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="CycleOutputData_Graph_plot_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="CycleOutputData_Graph_plot_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="CycleOutputData_Graph_plot_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="CycleOutputData_Graph_plot_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="CycleOutputData_Graph_err_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="CycleOutputData_Graph_err_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="CycleOutputData_Graph_err_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="CycleOutputData_Graph_err_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="CycleOutputData_Graph_err_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="CycleOutputData_Graph_err_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="CycleOutputData_Graph_err_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="CycleOutputData_Graph_err_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  x_axis_label=;
	  y_axis_label=;
	  alt_y_axis_label=;
	  z_axis_label=;
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_gp_use_y=0;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=1;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=1;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       fix_name=0;
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.4617444: y=0.7842235: z=2.277743: };
	 orient {x=0.9999996: y=0: z=0: rot=0.01198033: };
	 focal_dist=2.283717;
	};
	T3SavedView @[1] {
	 name="Network";
	 view_saved=1;
	 pos {x=0.5057445: y=0.6395233: z=1.669055: };
	 orient {x=1.001642: y=0: z=0: rot=0.01198033: };
	 focal_dist=1.674986;
	};
	T3SavedView @[2] {
	 name="Graph";
	 view_saved=1;
	 pos {x=0.4617444: y=0.9593826: z=1.393573: };
	 orient {x=0.9999982: y=0: z=0: rot=0.1879807: };
	 focal_dist=1.424477;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @[2] {
       name="InputPattern";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=GridTableView;
	 el_def=0;
	 GridTableView @[0] {
	  name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_InputPattern_root_view_children_0";
	  m_data=$.data.gp[0][0]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    name="Name";
	    m_data=.data.gp[0][0].data[0]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    scale_min=2.766138e+29;
	    scale_max=1.109461e+27;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    name="Input";
	    m_data=.data.gp[0][0].data[1]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=10;
	    scale_on=1;
	    scale_min=4.577902e-41;
	    scale_max=8.44531e-23;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=1;
	  view_range {min=0: max=0: };
	  page_rows=10;
	  display_on=1;
	  manip_ctrl_on=1;
	  view_cols=5;
	  page_cols=5;
	  col_range {min=0: max=1: };
	  need_scale_update=1;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  scale_per_column=0;
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	};
       };
       fix_name=0;
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.5325: y=0.5174999: z=1.443747: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.453747;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
     };
    };
   };
   docks {
    name="docks";
    el_typ=ToolBoxDockViewer;
    el_def=0;
    ToolBoxDockViewer @[0] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_114";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="view_win_lft": value=0: val_type_fixed=0: };
      UserDataItem @[1] {name="view_win_top": value=0.06666667: val_type_fixed=0: };
      UserDataItem @[2] {name="view_win_wd": value=0.04375: val_type_fixed=0: };
      UserDataItem @[3] {name="view_win_ht": value=0.6768519: val_type_fixed=0: };
      UserDataItem @[4] {name="view_win_iconified": value=0: val_type_fixed=0: };
      UserDataItem @[5] {name="view_visible": value=0: val_type_fixed=0: };
     };
     name="Tools";
     m_data=NULL;
     cur_font_size=12;
     visible=0;
     win_name=;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 save_view=1;
 save_as_only=0;
 auto_name=1;
 last_change_desc="Project updated on wiki: CCN changes: clear log";
 tree_state{ .;.patches;.docs;.wizards;.ctrl_panels;.active_params;.data;.data.gp[0];.data.gp[1];.data.gp[2];.programs;.programs.break_points;.programs.gp[0];.networks;.networks[0];.networks[0].spec_tables;.networks[0].specs;.networks[0].specs[0];.networks[0].specs[1];.networks[0].specs[4];.networks[0].param_seqs;.networks[0].layers;.networks[0].weights;.networks[1];.networks[1].spec_tables;.networks[1].specs;.networks[1].specs[0];.networks[1].specs[1];.networks[1].specs[4];.networks[1].param_seqs;.networks[1].layers;.networks[1].weights; };
 networks {
  name="networks";
  el_typ=LeabraNetwork;
  el_def=0;
  LeabraNetwork @[0] {
   name="FFExcite";
   desc=;
   flags=NETIN_PER_PRJN|BUILD_INIT_WTS;
   train_mode=TEST;
   wt_update=ON_LINE;
   small_batch_n=10;
   stats {sse_unit_avg=0: sse_sqrt=0: cnt_err_tol=0: prerr=0: };
   n_units=221;
   n_cons=16400;
   max_prjns=3;
   specs {
    name="specs";
    el_typ=LeabraUnitSpec;
    el_def=0;
    LeabraUnitSpec @[0] {
     name="ExciteUnits";
     is_used=1;
     used_status=USED;
     desc=;
     unique{      };
     saved{      };
     children {
      name="children";
      el_typ=LeabraUnitSpec;
      el_def=0;
      LeabraUnitSpec @[0] {
       name="InhibUnits";
       is_used=1;
       used_status=USED;
       desc=;
       unique{ g_bar;dt;act;       };
       saved{        };
       children {
	name="children";
	el_typ=LeabraUnitSpec;
	el_def=0;
       };
       bias_spec {type=LeabraBiasSpec: spec=.networks[0].specs[5]$$: };
       act_range {min=0: max=1: range=1: scale=1: };
       sse_tol=0.5;
       act_fun=NOISY_XX1;
       act {thr=0.4: gain=100: nvar=0.005: avg_correct=1: vm_act_thr=0.01: sig_mult=0.33: sig_mult_pow=0.8: sig_gain=3: interp_range=0.01: gain_cor_range=10: gain_cor=0.1: sig_gain_nvar=600: sig_mult_eff=0.1895352: sig_val_at_0=0.09476762: interp_val=0.3843991: };
       act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
       spike {rise=0: decay=5: g_gain=9: window=3: act_max_hz=180: int_tau=5: int_dt=0.2: };
       spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.4: };
       opt_thresh {send=0.1: delta=0.005: };
       clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
       vm_range {min=0: max=2: range=2: scale=0.5: };
       init {v_m=0.4: act=0: netin=0: };
       dt {integ=1: vm_tau=3.3: net_tau=20: vm_cyc=1: fast_cyc=0: vm_dt=0.3030303: vm_dt_cyc=0.3030303: net_dt=0.05: };
       act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
       avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
       avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
       g_bar {e=1: l=0.1: i=0.75: k=0.2: };
       e_rev {e=1: l=0.3: i=0.25: k=0.1: };
       kna_adapt {on=0: rate_rise=0.8: f_on=1: f_rise=0.05: f_max=0.1: f_tau=50: m_on=1: m_rise=0.02: m_max=0.1: m_tau=200: s_on=1: s_rise=0.001: s_max=1: s_tau=1000: f_dt=0.02: m_dt=0.005: s_dt=0.001: };
       kna_misc {clamp=1: invert_nd=1: max_gc=0.2: max_adapt=0.3: no_targ=1: };
       stp {on=0: algorithm=CYCLES: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: thresh=0.5: n_trials=1: rec_prob=0.1: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
       syn_delay {on=0: delay=4: };
       deep_raw_qtr=Q4;
       deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: mod_thr=0.1: ctxt_prv=0: tick_updt=-1: else_prv=0.9: mod_range=0.2: ctxt_new=1: else_new=0.1: };
       trc {p_only_m=0: thal_gate=0: clamp_net=0: avg_clamp=0: deep_gain=0.2: clip=0: clip_max=0.4: std_gain=0.8: };
       da_mod {on=0: mod_gain=0: minus=0: plus=0.1: da_neg_gain=0.1: da_pos_gain=0.1: };
       noise_type {type=NO_NOISE: trial_fixed=1: };
       noise {name="noise": type=GAUSSIAN: mean=0: var=0: par=1: };
      };
     };
     bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs[5]$: };
     act_range {min=0: max=1: range=1: scale=1: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {thr=0.5: gain=100: nvar=0.005: avg_correct=1: vm_act_thr=0.01: sig_mult=0.33: sig_mult_pow=0.8: sig_gain=3: interp_range=0.01: gain_cor_range=10: gain_cor=0.1: sig_gain_nvar=600: sig_mult_eff=0.1895352: sig_val_at_0=0.09476762: interp_val=0.3843991: };
     act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
     spike {rise=0: decay=5: g_gain=9: window=3: act_max_hz=180: int_tau=5: int_dt=0.2: };
     spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
     opt_thresh {send=0.1: delta=0.005: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=2: range=2: scale=0.5: };
     init {v_m=0.4: act=0: netin=0: };
     dt {integ=1: vm_tau=3.3: net_tau=40: vm_cyc=1: fast_cyc=0: vm_dt=0.3030303: vm_dt_cyc=0.3030303: net_dt=0.025: };
     act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
     avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
     avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
     g_bar {e=1: l=0.1: i=0.4: k=0.2: };
     e_rev {e=1: l=0.3: i=0.25: k=0.1: };
     kna_adapt {on=0: rate_rise=0.8: f_on=1: f_rise=0.05: f_max=0.1: f_tau=50: m_on=1: m_rise=0.02: m_max=0.1: m_tau=200: s_on=1: s_rise=0.001: s_max=1: s_tau=1000: f_dt=0.02: m_dt=0.005: s_dt=0.001: };
     kna_misc {clamp=1: invert_nd=1: max_gc=0.2: max_adapt=0.3: no_targ=1: };
     stp {on=0: algorithm=CYCLES: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: thresh=0.5: n_trials=1: rec_prob=0.1: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
     syn_delay {on=0: delay=4: };
     deep_raw_qtr=Q4;
     deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: mod_thr=0.1: ctxt_prv=0: tick_updt=-1: else_prv=0.9: mod_range=0.2: ctxt_new=1: else_new=0.1: };
     trc {p_only_m=0: thal_gate=0: clamp_net=0: avg_clamp=0: deep_gain=0.2: clip=0: clip_max=0.4: std_gain=0.8: };
     da_mod {on=0: mod_gain=0: minus=0: plus=0.1: da_neg_gain=0.1: da_pos_gain=0.1: };
     noise_type {type=NO_NOISE: trial_fixed=1: };
     noise {name="noise": type=GAUSSIAN: mean=0: var=0: par=1: };
    };
    LeabraConSpec @[1] {
     name="ExciteCons";
     is_used=1;
     used_status=USED;
     desc=;
     unique{      };
     saved{      };
     children {
      name="children";
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraConSpec @[0] {
       name="FFInhib";
       is_used=1;
       used_status=USED;
       desc=;
       unique{ rnd;wt_limits;wt_scale;       };
       saved{        };
       children {
	name="children";
	el_typ=LeabraConSpec;
	el_def=0;
       };
       rnd {name="rnd": type=GAUSSIAN: mean=0.25: var=0.2: par=1: };
       wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
       inhib=0;
       wt_scale {abs=1: rel=1: no_plus_net=0: };
       learn=0;
       learn_qtr=Q4;
       lrate=0.04;
       cur_lrate=0.04;
       lrs_mult=1;
       use_unlearnable=1;
       xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: s_mult=1: d_rev_ratio=-9: };
       wt_sig {gain=6: off=1: soft_bound=1: };
       momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
       wt_bal {on=1: avg_thr=0.25: hi_thr=0.4: hi_gain=4: lo_thr=0.4: lo_gain=6: act_thr=0.25: act_gain=0: no_targ=1: };
       adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
       slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
       deep {on=0: bg_lrate=1: fg_lrate=0: };
       margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
       dwt_share {on=0: neigh=8: p_share=0.05: };
       use_lrate_sched=1;
       lrate_sched {
	name="lrate_sched";
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=0;
       };
      };
      LeabraConSpec @[1] {
       name="FBInhib";
       is_used=1;
       used_status=USED;
       desc=;
       unique{ rnd;wt_limits;wt_scale;       };
       saved{        };
       children {
	name="children";
	el_typ=LeabraConSpec;
	el_def=0;
       };
       rnd {name="rnd": type=UNIFORM: mean=0.25: var=0.2: par=1: };
       wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
       inhib=0;
       wt_scale {abs=1: rel=1: no_plus_net=0: };
       learn=0;
       learn_qtr=Q4;
       lrate=0.04;
       cur_lrate=0.04;
       lrs_mult=1;
       use_unlearnable=1;
       xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: s_mult=1: d_rev_ratio=-9: };
       wt_sig {gain=6: off=1: soft_bound=1: };
       momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
       wt_bal {on=1: avg_thr=0.25: hi_thr=0.4: hi_gain=4: lo_thr=0.4: lo_gain=6: act_thr=0.25: act_gain=0: no_targ=1: };
       adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
       slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
       deep {on=0: bg_lrate=1: fg_lrate=0: };
       margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
       dwt_share {on=0: neigh=8: p_share=0.05: };
       use_lrate_sched=1;
       lrate_sched {
	name="lrate_sched";
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=0;
       };
      };
     };
     rnd {name="rnd": type=GAUSSIAN: mean=0.25: var=0.7: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
     inhib=0;
     wt_scale {abs=1: rel=1: no_plus_net=0: };
     learn=0;
     learn_qtr=Q4;
     lrate=0.04;
     cur_lrate=0.04;
     lrs_mult=1;
     use_unlearnable=1;
     xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: s_mult=1: d_rev_ratio=-9: };
     wt_sig {gain=6: off=1: soft_bound=1: };
     momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
     wt_bal {on=1: avg_thr=0.25: hi_thr=0.4: hi_gain=4: lo_thr=0.4: lo_gain=6: act_thr=0.25: act_gain=0: no_targ=1: };
     adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
     slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
     deep {on=0: bg_lrate=1: fg_lrate=0: };
     margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
     dwt_share {on=0: neigh=8: p_share=0.05: };
     use_lrate_sched=1;
     lrate_sched {
      name="lrate_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
     };
    };
    LeabraLayerSpec @[2] {
     name="LayerSpec";
     is_used=1;
     used_status=USED;
     desc=;
     unique{      };
     saved{      };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
     };
     lay_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     unit_gp_inhib {on=0: gi=2: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     lay_gp_inhib {on=0: gi=2: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     avg_act {targ_init=0.2: fixed=1: use_ext_act=0: use_first=1: tau=100: adjust=1: dt=0.01: };
     inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
     inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
     clamp {hard=1: gain=0.5: avg=0: avg_gain=0.2: };
     decay {trial=1: };
     del_inhib {on=0: prv_trl=0: prv_q=0: };
     margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
     lay_lrate=1;
     cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
     lstats {pre_hog_thr=0.2: hog_thr=0.3: dead_thr=0.01: };
    };
    FullPrjnSpec @[3] {
     name="FullPrjnSpec_0";
     is_used=1;
     used_status=USED;
     desc=;
     unique{      };
     saved{      };
     children {
      name="children";
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=1;
     init_wts=0;
     set_scale=0;
     init_wt_val=1;
     add_rnd_var=0;
     renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
    };
    LeabraConSpec @[4] {
     name="InhibConSpec";
     is_used=1;
     used_status=USED;
     desc=;
     unique{      };
     saved{      };
     children {
      name="children";
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraConSpec @[0] {
       name="InhibInhibCon";
       is_used=1;
       used_status=USED;
       desc=;
       unique{ rnd;wt_scale;       };
       saved{        };
       children {
	name="children";
	el_typ=LeabraConSpec;
	el_def=0;
       };
       rnd {name="rnd": type=UNIFORM: mean=0.5: var=0: par=1: };
       wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
       inhib=1;
       wt_scale {abs=1: rel=1: no_plus_net=0: };
       learn=0;
       learn_qtr=Q4;
       lrate=0;
       cur_lrate=0;
       lrs_mult=1;
       use_unlearnable=1;
       xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: s_mult=1: d_rev_ratio=-9: };
       wt_sig {gain=6: off=1: soft_bound=1: };
       momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
       wt_bal {on=0: avg_thr=0.25: hi_thr=0.4: hi_gain=4: lo_thr=0.4: lo_gain=6: act_thr=0.25: act_gain=0: no_targ=1: };
       adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
       slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
       deep {on=0: bg_lrate=1: fg_lrate=0: };
       margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
       dwt_share {on=0: neigh=8: p_share=0.05: };
       use_lrate_sched=1;
       lrate_sched {
	name="lrate_sched";
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=0;
       };
      };
     };
     rnd {name="rnd": type=UNIFORM: mean=0.5: var=0: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
     inhib=1;
     wt_scale {abs=1: rel=1: no_plus_net=0: };
     learn=0;
     learn_qtr=Q4;
     lrate=0;
     cur_lrate=0;
     lrs_mult=1;
     use_unlearnable=1;
     xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: s_mult=1: d_rev_ratio=-9: };
     wt_sig {gain=6: off=1: soft_bound=1: };
     momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
     wt_bal {on=0: avg_thr=0.25: hi_thr=0.4: hi_gain=4: lo_thr=0.4: lo_gain=6: act_thr=0.25: act_gain=0: no_targ=1: };
     adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
     slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
     deep {on=0: bg_lrate=1: fg_lrate=0: };
     margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
     dwt_share {on=0: neigh=8: p_share=0.05: };
     use_lrate_sched=1;
     lrate_sched {
      name="lrate_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
     };
    };
    LeabraBiasSpec @[5] {
     name="BiasSpec";
     is_used=1;
     used_status=USED;
     desc=;
     unique{ rnd;wt_limits;wt_scale;wt_scale_init;     };
     saved{      };
     children {
      name="children";
      el_typ=LeabraBiasSpec;
      el_def=0;
     };
     rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
     wt_limits {type=NONE: min=-1: max=5: sym=0: sym_fm_top=0: };
     inhib=0;
     wt_scale {abs=1: rel=1: no_plus_net=0: };
     learn=1;
     learn_qtr=Q4;
     lrate=0.02;
     cur_lrate=0.02;
     lrs_mult=1;
     use_unlearnable=1;
     xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: s_mult=1: d_rev_ratio=-9: };
     wt_sig {gain=6: off=1.25: soft_bound=1: };
     momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
     wt_bal {on=0: avg_thr=0.25: hi_thr=0.4: hi_gain=4: lo_thr=0.4: lo_gain=6: act_thr=0.25: act_gain=0: no_targ=1: };
     adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
     slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
     deep {on=0: bg_lrate=1: fg_lrate=0: };
     margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
     dwt_share {on=0: neigh=8: p_share=0.05: };
     use_lrate_sched=1;
     lrate_sched {
      name="lrate_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
     };
     dwt_thresh=0.1;
    };
   };
   param_seqs {
    name="param_seqs";
    el_typ=ParamSeq;
    el_def=0;
   };
   monitor {
    name="monitor";
    items {
     name="items";
     el_typ=NetMonItem;
     el_def=0;
     ignore_sig=0;
    };
    network=$.networks[0]$;
    data=.networks[0].mon_data$$;
    rmv_orphan_cols=1;
   };
   mon_data {
    name="mon_data";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   layers {
    name="layers";
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    pos2d {x=0: y=0: };
    max_disp_size {x=14: y=10: z=2: };
    max_disp_size2d {x=14: y=22: };
    LeabraLayer @[0] {
     name="Input";
     n_recv_prjns=0;
     n_send_prjns=2;
     un_geom_x=10;
     un_geom_y=10;
     un_geom_n=100;
     gp_geom_x=1;
     gp_geom_y=1;
     gp_geom_n=1;
     flat_geom_x=10;
     flat_geom_y=10;
     flat_geom_n=100;
     gp_spc_x=0;
     gp_spc_y=0;
     flags=0;
     layer_type=INPUT;
     desc=;
     pos_rel {rel=ABS_POS: other=NULL: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
     pos {x=0: y=0: z=0: };
     pos_abs {x=0: y=0: z=0: };
     pos2d {x=0: y=0: };
     pos2d_abs {x=0: y=0: };
     disp_scale=1;
     un_geom {x=10: y=10: n_not_xy=0: n=100: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=0: y=0: };
     flat_geom {x=10: y=10: n_not_xy=0: n=100: };
     disp_geom {x=10: y=10: n_not_xy=0: n=100: };
     scaled_disp_geom {x=10: y=10: n_not_xy=0: n=100: };
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_List @. = [0] = LeabraPrjn .networks[0].layers[1].projections[0];
      Projection_List @. = [1] = LeabraPrjn .networks[0].layers[2].projections[1];
     };
     unit_spec {type=LeabraUnitSpec: spec=$.networks[0].specs[0]$: };
     dist {fm_input=0: fm_output=-1: };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LeabraLayerSpec: spec=$.networks[0].specs[2]$: };
     adapt_gi=1;
     acts_m_avg=0.2;
     acts_p_avg=0.2;
     acts_p_avg_eff=0.2;
    };
    LeabraLayer @[1] {
     name="Hidden";
     n_recv_prjns=2;
     n_send_prjns=1;
     un_geom_x=10;
     un_geom_y=10;
     un_geom_n=100;
     gp_geom_x=1;
     gp_geom_y=1;
     gp_geom_n=1;
     flat_geom_x=10;
     flat_geom_y=10;
     flat_geom_n=100;
     gp_spc_x=0;
     gp_spc_y=0;
     flags=0;
     layer_type=HIDDEN;
     desc=;
     pos_rel {rel=ABS_POS: other=NULL: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
     pos {x=0: y=0: z=1: };
     pos_abs {x=0: y=0: z=1: };
     pos2d {x=0: y=12: };
     pos2d_abs {x=0: y=12: };
     disp_scale=1;
     un_geom {x=10: y=10: n_not_xy=0: n=100: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=0: y=0: };
     flat_geom {x=10: y=10: n_not_xy=0: n=100: };
     disp_geom {x=10: y=10: n_not_xy=0: n=100: };
     scaled_disp_geom {x=10: y=10: n_not_xy=0: n=100: };
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Input";
       off=0;
       disp=1;
       notes=;
       from_type=CUSTOM;
       from=.networks[0].layers[0]$$;
       spec {type=FullPrjnSpec: spec=.networks[0].specs[3]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=.networks[0].specs[1]$$: };
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @[1] {
       name="Inhib_Fm_Inhib";
       off=0;
       disp=1;
       notes=;
       from_type=CUSTOM;
       from=.networks[0].layers[2]$$;
       spec {type=FullPrjnSpec: spec=$.networks[0].specs[3]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=.networks[0].specs[4]$$: };
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_List @. = [0] = LeabraPrjn .networks[0].layers[2].projections[0];
     };
     unit_spec {type=LeabraUnitSpec: spec=$.networks[0].specs[0]$: };
     dist {fm_input=1: fm_output=-1: };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LeabraLayerSpec: spec=$.networks[0].specs[2]$: };
     adapt_gi=1;
     acts_m_avg=0.2;
     acts_p_avg=0.2;
     acts_p_avg_eff=0.2;
    };
    LeabraLayer @[2] {
     name="Inhib";
     n_recv_prjns=3;
     n_send_prjns=2;
     un_geom_x=2;
     un_geom_y=10;
     un_geom_n=20;
     gp_geom_x=1;
     gp_geom_y=1;
     gp_geom_n=1;
     flat_geom_x=2;
     flat_geom_y=10;
     flat_geom_n=20;
     gp_spc_x=0;
     gp_spc_y=0;
     flags=0;
     layer_type=HIDDEN;
     desc=;
     pos_rel {rel=ABS_POS: other=NULL: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
     pos {x=12: y=0: z=1: };
     pos_abs {x=12: y=0: z=1: };
     pos2d {x=12: y=12: };
     pos2d_abs {x=12: y=12: };
     disp_scale=1;
     un_geom {x=2: y=10: n_not_xy=0: n=20: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=0: y=0: };
     flat_geom {x=2: y=10: n_not_xy=0: n=20: };
     disp_geom {x=2: y=10: n_not_xy=0: n=20: };
     scaled_disp_geom {x=2: y=10: n_not_xy=0: n=20: };
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Hidden";
       off=0;
       disp=1;
       notes=;
       from_type=CUSTOM;
       from=.networks[0].layers[1]$$;
       spec {type=FullPrjnSpec: spec=$.networks[0].specs[3]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.networks[0].specs[1].children[1]$: };
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @[1] {
       name="Fm_Input";
       off=0;
       disp=1;
       notes=;
       from_type=CUSTOM;
       from=$.networks[0].layers[0]$;
       spec {type=FullPrjnSpec: spec=$.networks[0].specs[3]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.networks[0].specs[1].children[0]$: };
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @[2] {
       name="Inhib_Fm_Inhib";
       off=0;
       disp=1;
       notes=;
       from_type=SELF;
       from=$.networks[0].layers[2]$;
       spec {type=FullPrjnSpec: spec=$.networks[0].specs[3]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=.networks[0].specs[4].children[0]$$: };
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_List @. = [0] = LeabraPrjn .networks[0].layers[1].projections[1];
      Projection_List @. = [1] = LeabraPrjn .networks[0].layers[2].projections[2];
     };
     unit_spec {type=LeabraUnitSpec: spec=$.networks[0].specs[0].children[0]$: };
     dist {fm_input=1: fm_output=-1: };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LeabraLayerSpec: spec=$.networks[0].specs[2]$: };
     adapt_gi=1;
     acts_m_avg=0.2;
     acts_p_avg=0.2;
     acts_p_avg_eff=0.2;
    };
   };
   weights {
    name="weights";
    el_typ=Weights;
    el_def=0;
   };
   auto_build=AUTO_BUILD;
   auto_load_wts=NO_AUTO_LOAD;
   auto_load_file=;
   brain_atlas_name=;
   cuda {sync_units=0: sync_cons=0: min_threads=32: max_threads=1024: cons_per_thread=2: timers_on=0: n_threads=32: };
   wt_save_fmt=TEXT;
   max_disp_size {x=14: y=10: z=2: };
   max_disp_size2d {x=14: y=22: };
   times {quarter=50: deep_cyc=5: time_inc=0.001: wt_bal_int=10: minus=150: plus=50: total_cycles=200: thal_gate_cycle=-2: };
   lstats {trg_max_act_crit=0.5: off_errs=1: on_errs=1: agg_unlearnable=0: wt_bal=0: };
   net_misc {spike=0: deep=0: bias_learn=1: trial_decay=1: diff_scale_p=0: diff_scale_q1=0: wt_bal=1: lay_gp_inhib=0: inhib_cons=1: };
   deep {on=0: ctxt=0: raw_net=0: mod_net=0: raw_qtr=0: };
   rel_netin {on=1: trl_skip=10: epc_skip=10: };
  };
  LeabraNetwork @[1] {
   name="BidirExcite";
   desc=;
   flags=NETIN_PER_PRJN|BUILD_INIT_WTS;
   train_mode=TEST;
   wt_update=ON_LINE;
   small_batch_n=10;
   stats {sse_unit_avg=0: sse_sqrt=0: cnt_err_tol=0: prerr=0: };
   n_units=341;
   n_cons=44800;
   max_prjns=4;
   specs {
    name="specs";
    el_typ=LeabraUnitSpec;
    el_def=0;
    LeabraUnitSpec @[0] {
     name="ExciteUnits";
     is_used=1;
     used_status=USED;
     desc=;
     unique{      };
     saved{      };
     children {
      name="children";
      el_typ=LeabraUnitSpec;
      el_def=0;
      LeabraUnitSpec @[0] {
       name="InhibUnits";
       is_used=1;
       used_status=USED;
       desc=;
       unique{ g_bar;dt;act;bias_spec;       };
       saved{        };
       children {
	name="children";
	el_typ=LeabraUnitSpec;
	el_def=0;
       };
       bias_spec {type=LeabraBiasSpec: spec=.networks[1].specs[5]$$: };
       act_range {min=0: max=1: range=1: scale=1: };
       sse_tol=0.5;
       act_fun=NOISY_XX1;
       act {thr=0.4: gain=100: nvar=0.005: avg_correct=1: vm_act_thr=0.01: sig_mult=0.33: sig_mult_pow=0.8: sig_gain=3: interp_range=0.01: gain_cor_range=10: gain_cor=0.1: sig_gain_nvar=600: sig_mult_eff=0.1895352: sig_val_at_0=0.09476762: interp_val=0.3843991: };
       act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
       spike {rise=0: decay=5: g_gain=9: window=3: act_max_hz=180: int_tau=5: int_dt=0.2: };
       spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.4: };
       opt_thresh {send=0.1: delta=0.005: };
       clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
       vm_range {min=0: max=2: range=2: scale=0.5: };
       init {v_m=0.4: act=0: netin=0: };
       dt {integ=1: vm_tau=3.3: net_tau=20: vm_cyc=1: fast_cyc=0: vm_dt=0.3030303: vm_dt_cyc=0.3030303: net_dt=0.05: };
       act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
       avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
       avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
       g_bar {e=1: l=0.1: i=0.75: k=0.2: };
       e_rev {e=1: l=0.3: i=0.25: k=0.1: };
       kna_adapt {on=0: rate_rise=0.8: f_on=1: f_rise=0.05: f_max=0.1: f_tau=50: m_on=1: m_rise=0.02: m_max=0.1: m_tau=200: s_on=1: s_rise=0.001: s_max=1: s_tau=1000: f_dt=0.02: m_dt=0.005: s_dt=0.001: };
       kna_misc {clamp=1: invert_nd=1: max_gc=0.2: max_adapt=0.3: no_targ=1: };
       stp {on=0: algorithm=CYCLES: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: thresh=0.5: n_trials=1: rec_prob=0.1: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
       syn_delay {on=0: delay=4: };
       deep_raw_qtr=Q4;
       deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: mod_thr=0.1: ctxt_prv=0: tick_updt=-1: else_prv=0.9: mod_range=0.2: ctxt_new=1: else_new=0.1: };
       trc {p_only_m=0: thal_gate=0: clamp_net=0: avg_clamp=0: deep_gain=0.2: clip=0: clip_max=0.4: std_gain=0.8: };
       da_mod {on=0: mod_gain=0: minus=0: plus=0.1: da_neg_gain=0.1: da_pos_gain=0.1: };
       noise_type {type=NO_NOISE: trial_fixed=1: };
       noise {name="noise": type=GAUSSIAN: mean=0: var=0: par=1: };
      };
     };
     bias_spec {type=LeabraBiasSpec: spec=$.networks[1].specs[5]$: };
     act_range {min=0: max=1: range=1: scale=1: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {thr=0.5: gain=100: nvar=0.005: avg_correct=1: vm_act_thr=0.01: sig_mult=0.33: sig_mult_pow=0.8: sig_gain=3: interp_range=0.01: gain_cor_range=10: gain_cor=0.1: sig_gain_nvar=600: sig_mult_eff=0.1895352: sig_val_at_0=0.09476762: interp_val=0.3843991: };
     act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
     spike {rise=0: decay=5: g_gain=9: window=3: act_max_hz=180: int_tau=5: int_dt=0.2: };
     spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
     opt_thresh {send=0.1: delta=0.005: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=2: range=2: scale=0.5: };
     init {v_m=0.4: act=0: netin=0: };
     dt {integ=1: vm_tau=3.3: net_tau=40: vm_cyc=1: fast_cyc=0: vm_dt=0.3030303: vm_dt_cyc=0.3030303: net_dt=0.025: };
     act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
     avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
     avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
     g_bar {e=1: l=0.1: i=0.4: k=0.2: };
     e_rev {e=1: l=0.3: i=0.25: k=0.1: };
     kna_adapt {on=0: rate_rise=0.8: f_on=1: f_rise=0.05: f_max=0.1: f_tau=50: m_on=1: m_rise=0.02: m_max=0.1: m_tau=200: s_on=1: s_rise=0.001: s_max=1: s_tau=1000: f_dt=0.02: m_dt=0.005: s_dt=0.001: };
     kna_misc {clamp=1: invert_nd=1: max_gc=0.2: max_adapt=0.3: no_targ=1: };
     stp {on=0: algorithm=CYCLES: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: thresh=0.5: n_trials=1: rec_prob=0.1: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
     syn_delay {on=0: delay=4: };
     deep_raw_qtr=Q4;
     deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: mod_thr=0.1: ctxt_prv=0: tick_updt=-1: else_prv=0.9: mod_range=0.2: ctxt_new=1: else_new=0.1: };
     trc {p_only_m=0: thal_gate=0: clamp_net=0: avg_clamp=0: deep_gain=0.2: clip=0: clip_max=0.4: std_gain=0.8: };
     da_mod {on=0: mod_gain=0: minus=0: plus=0.1: da_neg_gain=0.1: da_pos_gain=0.1: };
     noise_type {type=NO_NOISE: trial_fixed=1: };
     noise {name="noise": type=GAUSSIAN: mean=0: var=0: par=1: };
    };
    LeabraConSpec @[1] {
     name="ExciteCons";
     is_used=1;
     used_status=USED;
     desc=;
     unique{      };
     saved{      };
     children {
      name="children";
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraConSpec @[0] {
       name="FFInhib";
       is_used=1;
       used_status=USED;
       desc=;
       unique{ rnd;wt_limits;wt_scale;       };
       saved{        };
       children {
	name="children";
	el_typ=LeabraConSpec;
	el_def=0;
       };
       rnd {name="rnd": type=GAUSSIAN: mean=0.25: var=0.2: par=1: };
       wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
       inhib=0;
       wt_scale {abs=1: rel=0.5: no_plus_net=0: };
       learn=0;
       learn_qtr=Q4;
       lrate=0.04;
       cur_lrate=0.04;
       lrs_mult=1;
       use_unlearnable=1;
       xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: s_mult=1: d_rev_ratio=-9: };
       wt_sig {gain=6: off=1: soft_bound=1: };
       momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
       wt_bal {on=1: avg_thr=0.25: hi_thr=0.4: hi_gain=4: lo_thr=0.4: lo_gain=6: act_thr=0.25: act_gain=0: no_targ=1: };
       adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
       slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
       deep {on=0: bg_lrate=1: fg_lrate=0: };
       margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
       dwt_share {on=0: neigh=8: p_share=0.05: };
       use_lrate_sched=1;
       lrate_sched {
	name="lrate_sched";
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=0;
       };
      };
      LeabraConSpec @[1] {
       name="FBInhib";
       is_used=1;
       used_status=USED;
       desc=;
       unique{ rnd;wt_limits;wt_scale;       };
       saved{        };
       children {
	name="children";
	el_typ=LeabraConSpec;
	el_def=0;
       };
       rnd {name="rnd": type=UNIFORM: mean=0.25: var=0.2: par=1: };
       wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
       inhib=0;
       wt_scale {abs=1: rel=1: no_plus_net=0: };
       learn=0;
       learn_qtr=Q4;
       lrate=0.04;
       cur_lrate=0.04;
       lrs_mult=1;
       use_unlearnable=1;
       xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: s_mult=1: d_rev_ratio=-9: };
       wt_sig {gain=6: off=1: soft_bound=1: };
       momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
       wt_bal {on=1: avg_thr=0.25: hi_thr=0.4: hi_gain=4: lo_thr=0.4: lo_gain=6: act_thr=0.25: act_gain=0: no_targ=1: };
       adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
       slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
       deep {on=0: bg_lrate=1: fg_lrate=0: };
       margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
       dwt_share {on=0: neigh=8: p_share=0.05: };
       use_lrate_sched=1;
       lrate_sched {
	name="lrate_sched";
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=0;
       };
      };
     };
     rnd {name="rnd": type=GAUSSIAN: mean=0.25: var=0.7: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
     inhib=0;
     wt_scale {abs=1: rel=1: no_plus_net=0: };
     learn=0;
     learn_qtr=Q4;
     lrate=0.04;
     cur_lrate=0.04;
     lrs_mult=1;
     use_unlearnable=1;
     xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: s_mult=1: d_rev_ratio=-9: };
     wt_sig {gain=6: off=1: soft_bound=1: };
     momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
     wt_bal {on=1: avg_thr=0.25: hi_thr=0.4: hi_gain=4: lo_thr=0.4: lo_gain=6: act_thr=0.25: act_gain=0: no_targ=1: };
     adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
     slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
     deep {on=0: bg_lrate=1: fg_lrate=0: };
     margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
     dwt_share {on=0: neigh=8: p_share=0.05: };
     use_lrate_sched=1;
     lrate_sched {
      name="lrate_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
     };
    };
    LeabraLayerSpec @[2] {
     name="LayerSpec";
     is_used=1;
     used_status=USED;
     desc=;
     unique{      };
     saved{      };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
     };
     lay_inhib {on=1: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     unit_gp_inhib {on=0: gi=2: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     lay_gp_inhib {on=0: gi=2: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     avg_act {targ_init=0.2: fixed=1: use_ext_act=0: use_first=1: tau=100: adjust=1: dt=0.01: };
     inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
     inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
     clamp {hard=1: gain=0.5: avg=0: avg_gain=0.2: };
     decay {trial=1: };
     del_inhib {on=0: prv_trl=0: prv_q=0: };
     margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
     lay_lrate=1;
     cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
     lstats {pre_hog_thr=0.2: hog_thr=0.3: dead_thr=0.01: };
    };
    FullPrjnSpec @[3] {
     name="FullPrjnSpec_0";
     is_used=1;
     used_status=USED;
     desc=;
     unique{      };
     saved{      };
     children {
      name="children";
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=1;
     init_wts=0;
     set_scale=0;
     init_wt_val=1;
     add_rnd_var=0;
     renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
    };
    LeabraConSpec @[4] {
     name="InhibConSpec";
     is_used=1;
     used_status=USED;
     desc=;
     unique{      };
     saved{      };
     children {
      name="children";
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraConSpec @[0] {
       name="InhibInhibCon";
       is_used=1;
       used_status=USED;
       desc=;
       unique{ rnd;wt_scale;       };
       saved{        };
       children {
	name="children";
	el_typ=LeabraConSpec;
	el_def=0;
       };
       rnd {name="rnd": type=UNIFORM: mean=0.5: var=0: par=1: };
       wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
       inhib=1;
       wt_scale {abs=1: rel=1: no_plus_net=0: };
       learn=0;
       learn_qtr=Q4;
       lrate=0;
       cur_lrate=0;
       lrs_mult=1;
       use_unlearnable=1;
       xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: s_mult=1: d_rev_ratio=-9: };
       wt_sig {gain=6: off=1: soft_bound=1: };
       momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
       wt_bal {on=0: avg_thr=0.25: hi_thr=0.4: hi_gain=4: lo_thr=0.4: lo_gain=6: act_thr=0.25: act_gain=0: no_targ=1: };
       adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
       slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
       deep {on=0: bg_lrate=1: fg_lrate=0: };
       margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
       dwt_share {on=0: neigh=8: p_share=0.05: };
       use_lrate_sched=1;
       lrate_sched {
	name="lrate_sched";
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=0;
       };
      };
     };
     rnd {name="rnd": type=UNIFORM: mean=0.5: var=0: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
     inhib=1;
     wt_scale {abs=0: rel=1: no_plus_net=0: };
     learn=0;
     learn_qtr=Q4;
     lrate=0;
     cur_lrate=0;
     lrs_mult=1;
     use_unlearnable=1;
     xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: s_mult=1: d_rev_ratio=-9: };
     wt_sig {gain=6: off=1: soft_bound=1: };
     momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
     wt_bal {on=0: avg_thr=0.25: hi_thr=0.4: hi_gain=4: lo_thr=0.4: lo_gain=6: act_thr=0.25: act_gain=0: no_targ=1: };
     adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
     slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
     deep {on=0: bg_lrate=1: fg_lrate=0: };
     margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
     dwt_share {on=0: neigh=8: p_share=0.05: };
     use_lrate_sched=1;
     lrate_sched {
      name="lrate_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
     };
    };
    LeabraBiasSpec @[5] {
     name="BiasSpec";
     is_used=1;
     used_status=USED;
     desc=;
     unique{ rnd;wt_limits;wt_scale;wt_scale_init;     };
     saved{      };
     children {
      name="children";
      el_typ=LeabraBiasSpec;
      el_def=0;
     };
     rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
     wt_limits {type=NONE: min=-1: max=5: sym=0: sym_fm_top=0: };
     inhib=0;
     wt_scale {abs=1: rel=1: no_plus_net=0: };
     learn=0;
     learn_qtr=Q4;
     lrate=0.04;
     cur_lrate=0.04;
     lrs_mult=1;
     use_unlearnable=1;
     xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: s_mult=1: d_rev_ratio=-9: };
     wt_sig {gain=6: off=1: soft_bound=1: };
     momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
     wt_bal {on=1: avg_thr=0.25: hi_thr=0.4: hi_gain=4: lo_thr=0.4: lo_gain=6: act_thr=0.25: act_gain=0: no_targ=1: };
     adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
     slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
     deep {on=0: bg_lrate=1: fg_lrate=0: };
     margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
     dwt_share {on=0: neigh=8: p_share=0.05: };
     use_lrate_sched=1;
     lrate_sched {
      name="lrate_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
     };
     dwt_thresh=0.1;
    };
   };
   param_seqs {
    name="param_seqs";
    el_typ=ParamSeq;
    el_def=0;
   };
   monitor {
    name="monitor";
    items {
     name="items";
     el_typ=NetMonItem;
     el_def=0;
     ignore_sig=0;
    };
    network=$.networks[1]$;
    data=.networks[1].mon_data$$;
    rmv_orphan_cols=1;
   };
   mon_data {
    name="mon_data";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   layers {
    name="layers";
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    pos2d {x=0: y=0: };
    max_disp_size {x=14: y=10: z=3: };
    max_disp_size2d {x=30: y=22: };
    LeabraLayer @[0] {
     name="Input";
     n_recv_prjns=0;
     n_send_prjns=2;
     un_geom_x=10;
     un_geom_y=10;
     un_geom_n=100;
     gp_geom_x=1;
     gp_geom_y=1;
     gp_geom_n=1;
     flat_geom_x=10;
     flat_geom_y=10;
     flat_geom_n=100;
     gp_spc_x=0;
     gp_spc_y=0;
     flags=0;
     layer_type=INPUT;
     desc=;
     pos_rel {rel=ABS_POS: other=NULL: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
     pos {x=0: y=0: z=0: };
     pos_abs {x=0: y=0: z=0: };
     pos2d {x=0: y=0: };
     pos2d_abs {x=0: y=0: };
     disp_scale=1;
     un_geom {x=10: y=10: n_not_xy=0: n=100: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=0: y=0: };
     flat_geom {x=10: y=10: n_not_xy=0: n=100: };
     disp_geom {x=10: y=10: n_not_xy=0: n=100: };
     scaled_disp_geom {x=10: y=10: n_not_xy=0: n=100: };
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_List @. = [0] = LeabraPrjn .networks[1].layers[1].projections[0];
      Projection_List @. = [1] = LeabraPrjn .networks[1].layers[2].projections[1];
     };
     unit_spec {type=LeabraUnitSpec: spec=$.networks[1].specs[0]$: };
     dist {fm_input=0: fm_output=-1: };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LeabraLayerSpec: spec=$.networks[1].specs[2]$: };
     adapt_gi=1;
     acts_m_avg=0.195;
     acts_p_avg=0.195;
     acts_p_avg_eff=0.2;
    };
    LeabraLayer @[1] {
     name="Hidden";
     n_recv_prjns=3;
     n_send_prjns=3;
     un_geom_x=10;
     un_geom_y=10;
     un_geom_n=100;
     gp_geom_x=1;
     gp_geom_y=1;
     gp_geom_n=1;
     flat_geom_x=10;
     flat_geom_y=10;
     flat_geom_n=100;
     gp_spc_x=0;
     gp_spc_y=0;
     flags=0;
     layer_type=HIDDEN;
     desc=;
     pos_rel {rel=ABS_POS: other=NULL: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
     pos {x=0: y=0: z=1: };
     pos_abs {x=0: y=0: z=1: };
     pos2d {x=0: y=12: };
     pos2d_abs {x=0: y=12: };
     disp_scale=1;
     un_geom {x=10: y=10: n_not_xy=0: n=100: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=0: y=0: };
     flat_geom {x=10: y=10: n_not_xy=0: n=100: };
     disp_geom {x=10: y=10: n_not_xy=0: n=100: };
     scaled_disp_geom {x=10: y=10: n_not_xy=0: n=100: };
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Input";
       off=0;
       disp=1;
       notes=;
       from_type=CUSTOM;
       from=.networks[1].layers[0]$$;
       spec {type=FullPrjnSpec: spec=.networks[1].specs[3]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=.networks[1].specs[1]$$: };
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @[1] {
       name="Inhib_Fm_Inhib";
       off=0;
       disp=1;
       notes=;
       from_type=CUSTOM;
       from=$.networks[1].layers[2]$;
       spec {type=FullPrjnSpec: spec=$.networks[1].specs[3]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.networks[1].specs[4]$: };
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @[2] {
       name="Fm_Hidden2";
       off=0;
       disp=1;
       notes=;
       from_type=CUSTOM;
       from=.networks[1].layers[3]$$;
       spec {type=FullPrjnSpec: spec=$.networks[1].specs[3]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.networks[1].specs[1]$: };
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_List @. = [0] = LeabraPrjn .networks[1].layers[2].projections[0];
      Projection_List @. = [1] = LeabraPrjn .networks[1].layers[3].projections[0];
      Projection_List @. = [2] = LeabraPrjn .networks[1].layers[4].projections[2];
     };
     unit_spec {type=LeabraUnitSpec: spec=$.networks[1].specs[0]$: };
     dist {fm_input=1: fm_output=-1: };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LeabraLayerSpec: spec=$.networks[1].specs[2]$: };
     adapt_gi=1;
     acts_m_avg=0.5798864;
     acts_p_avg=0.583703;
     acts_p_avg_eff=0.2;
    };
    LeabraLayer @[2] {
     name="Inhib";
     n_recv_prjns=4;
     n_send_prjns=2;
     un_geom_x=2;
     un_geom_y=10;
     un_geom_n=20;
     gp_geom_x=1;
     gp_geom_y=1;
     gp_geom_n=1;
     flat_geom_x=2;
     flat_geom_y=10;
     flat_geom_n=20;
     gp_spc_x=0;
     gp_spc_y=0;
     flags=0;
     layer_type=HIDDEN;
     desc=;
     pos_rel {rel=ABS_POS: other=NULL: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
     pos {x=12: y=0: z=1: };
     pos_abs {x=12: y=0: z=1: };
     pos2d {x=12: y=12: };
     pos2d_abs {x=12: y=12: };
     disp_scale=1;
     un_geom {x=2: y=10: n_not_xy=0: n=20: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=0: y=0: };
     flat_geom {x=2: y=10: n_not_xy=0: n=20: };
     disp_geom {x=2: y=10: n_not_xy=0: n=20: };
     scaled_disp_geom {x=2: y=10: n_not_xy=0: n=20: };
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Hidden";
       off=0;
       disp=1;
       notes=;
       from_type=CUSTOM;
       from=$.networks[1].layers[1]$;
       spec {type=FullPrjnSpec: spec=$.networks[1].specs[3]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.networks[1].specs[1].children[1]$: };
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @[1] {
       name="Fm_Input";
       off=0;
       disp=1;
       notes=;
       from_type=CUSTOM;
       from=$.networks[1].layers[0]$;
       spec {type=FullPrjnSpec: spec=$.networks[1].specs[3]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.networks[1].specs[1].children[0]$: };
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @[2] {
       name="Inhib_Fm_Inhib";
       off=0;
       disp=1;
       notes=;
       from_type=SELF;
       from=$.networks[1].layers[2]$;
       spec {type=FullPrjnSpec: spec=$.networks[1].specs[3]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=.networks[1].specs[4].children[0]$$: };
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @[3] {
       name="Fm_Hidden2";
       off=0;
       disp=1;
       notes=;
       from_type=CUSTOM;
       from=$.networks[1].layers[3]$;
       spec {type=FullPrjnSpec: spec=$.networks[1].specs[3]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.networks[1].specs[1].children[0]$: };
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_List @. = [0] = LeabraPrjn .networks[1].layers[1].projections[1];
      Projection_List @. = [1] = LeabraPrjn .networks[1].layers[2].projections[2];
     };
     unit_spec {type=LeabraUnitSpec: spec=$.networks[1].specs[0].children[0]$: };
     dist {fm_input=1: fm_output=-1: };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LeabraLayerSpec: spec=$.networks[1].specs[2]$: };
     adapt_gi=1;
     acts_m_avg=0.4770758;
     acts_p_avg=0.4798115;
     acts_p_avg_eff=0.2;
    };
    LeabraLayer @[3] {
     name="Hidden2";
     n_recv_prjns=2;
     n_send_prjns=3;
     un_geom_x=10;
     un_geom_y=10;
     un_geom_n=100;
     gp_geom_x=1;
     gp_geom_y=1;
     gp_geom_n=1;
     flat_geom_x=10;
     flat_geom_y=10;
     flat_geom_n=100;
     gp_spc_x=0;
     gp_spc_y=0;
     flags=0;
     layer_type=HIDDEN;
     desc=;
     pos_rel {rel=ABS_POS: other=NULL: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
     pos {x=0: y=0: z=2: };
     pos_abs {x=0: y=0: z=2: };
     pos2d {x=16: y=12: };
     pos2d_abs {x=16: y=12: };
     disp_scale=1;
     un_geom {x=10: y=10: n_not_xy=0: n=100: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=0: y=0: };
     flat_geom {x=10: y=10: n_not_xy=0: n=100: };
     disp_geom {x=10: y=10: n_not_xy=0: n=100: };
     scaled_disp_geom {x=10: y=10: n_not_xy=0: n=100: };
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Hidden";
       off=0;
       disp=1;
       notes=;
       from_type=CUSTOM;
       from=$.networks[1].layers[1]$;
       spec {type=FullPrjnSpec: spec=$.networks[1].specs[3]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.networks[1].specs[1]$: };
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @[1] {
       name="Inhib_Fm_Inhib2";
       off=0;
       disp=1;
       notes=;
       from_type=CUSTOM;
       from=.networks[1].layers[4]$$;
       spec {type=FullPrjnSpec: spec=$.networks[1].specs[3]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.networks[1].specs[4]$: };
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_List @. = [0] = LeabraPrjn .networks[1].layers[1].projections[2];
      Projection_List @. = [1] = LeabraPrjn .networks[1].layers[2].projections[3];
      Projection_List @. = [2] = LeabraPrjn .networks[1].layers[4].projections[0];
     };
     unit_spec {type=LeabraUnitSpec: spec=$.networks[1].specs[0]$: };
     dist {fm_input=2: fm_output=-1: };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LeabraLayerSpec: spec=$.networks[1].specs[2]$: };
     adapt_gi=1;
     acts_m_avg=0.5914926;
     acts_p_avg=0.593031;
     acts_p_avg_eff=0.2;
    };
    LeabraLayer @[4] {
     name="Inhib2";
     n_recv_prjns=3;
     n_send_prjns=2;
     un_geom_x=2;
     un_geom_y=10;
     un_geom_n=20;
     gp_geom_x=1;
     gp_geom_y=1;
     gp_geom_n=1;
     flat_geom_x=2;
     flat_geom_y=10;
     flat_geom_n=20;
     gp_spc_x=0;
     gp_spc_y=0;
     flags=0;
     layer_type=HIDDEN;
     desc=;
     pos_rel {rel=ABS_POS: other=NULL: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
     pos {x=12: y=0: z=2: };
     pos_abs {x=12: y=0: z=2: };
     pos2d {x=28: y=12: };
     pos2d_abs {x=28: y=12: };
     disp_scale=1;
     un_geom {x=2: y=10: n_not_xy=0: n=20: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=0: y=0: };
     flat_geom {x=2: y=10: n_not_xy=0: n=20: };
     disp_geom {x=2: y=10: n_not_xy=0: n=20: };
     scaled_disp_geom {x=2: y=10: n_not_xy=0: n=20: };
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Hidden2";
       off=0;
       disp=1;
       notes=;
       from_type=CUSTOM;
       from=$.networks[1].layers[3]$;
       spec {type=FullPrjnSpec: spec=$.networks[1].specs[3]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.networks[1].specs[1].children[1]$: };
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @[1] {
       name="Inhib_Fm_Inhib2";
       off=0;
       disp=1;
       notes=;
       from_type=SELF;
       from=$.networks[1].layers[4]$;
       spec {type=FullPrjnSpec: spec=$.networks[1].specs[3]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.networks[1].specs[4].children[0]$: };
       dir_fixed=0;
       direction=LATERAL;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @[2] {
       name="Fm_Hidden";
       off=0;
       disp=1;
       notes=;
       from_type=CUSTOM;
       from=$.networks[1].layers[1]$;
       spec {type=FullPrjnSpec: spec=$.networks[1].specs[3]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.networks[1].specs[1].children[0]$: };
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_List @. = [0] = LeabraPrjn .networks[1].layers[3].projections[1];
      Projection_List @. = [1] = LeabraPrjn .networks[1].layers[4].projections[1];
     };
     unit_spec {type=LeabraUnitSpec: spec=$.networks[1].specs[0].children[0]$: };
     dist {fm_input=2: fm_output=-1: };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LeabraLayerSpec: spec=$.networks[1].specs[2]$: };
     adapt_gi=1;
     acts_m_avg=0.5539457;
     acts_p_avg=0.5565676;
     acts_p_avg_eff=0.2;
    };
   };
   weights {
    name="weights";
    el_typ=Weights;
    el_def=0;
   };
   auto_build=AUTO_BUILD;
   auto_load_wts=NO_AUTO_LOAD;
   auto_load_file=;
   brain_atlas_name=;
   cuda {sync_units=0: sync_cons=0: min_threads=32: max_threads=1024: cons_per_thread=2: timers_on=0: n_threads=32: };
   wt_save_fmt=TEXT;
   max_disp_size {x=14: y=10: z=3: };
   max_disp_size2d {x=30: y=22: };
   times {quarter=50: deep_cyc=5: time_inc=0.001: wt_bal_int=10: minus=150: plus=50: total_cycles=200: thal_gate_cycle=-2: };
   lstats {trg_max_act_crit=0.5: off_errs=1: on_errs=1: agg_unlearnable=0: wt_bal=0: };
   net_misc {spike=0: deep=1: bias_learn=0: trial_decay=1: diff_scale_p=0: diff_scale_q1=0: wt_bal=1: lay_gp_inhib=0: inhib_cons=1: };
   deep {on=0: ctxt=0: raw_net=0: mod_net=0: raw_qtr=0: };
   rel_netin {on=1: trl_skip=10: epc_skip=10: };
  };
 };
};
