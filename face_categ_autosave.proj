// ta_Dump File v3.0 -- code v8.5.2.0 rev11409
LeabraProject .projects[0] { 
 Doc_Group @.docs = [2] {
  taDoc @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
   };
  };
  taDoc @[1] { };
 };

 Wizard_Group @.wizards = [1] {
  LeabraWizard @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
   };
  };
 };

 ControlPanel_Group @.ctrl_panels = [2] {
  ControlPanel @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
   };

   ControlPanelMember_Group @.mbrs = [4] {
    ControlPanelMember @[0] { };
    ControlPanelMember @[1] { };
    ControlPanelMember @[2] { };
    ControlPanelMember @[3] { };
    ControlPanelMember_Group @.gp[0] = [2] { 
     ControlPanelMember @[0] { };
     ControlPanelMember @[1] { };
    };
   };

   ControlPanelMethod_Group @.mths = [5] {
    ControlPanelMethod @[0] { };
    ControlPanelMethod @[1] { };
    ControlPanelMethod @[2] { };
    ControlPanelMethod @[3] { };
    ControlPanelMethod @[4] { };
   };
  };
  ClusterRun @[1] { 
   ControlPanelMember_Group @.mbrs = [0] {
   };

   ControlPanelMethod_Group @.mths = [0] {
   };

   ParamSearchAlgo_List @.search_algos = [0] {
   };
  };
 };

 ParamSet_Group @.active_params = [0] {
 };

 ArchivedParams_Group @.archived_params = [0] {
 };

 DataTable_Group @.data = [0] {
  DataTable_Group @.gp[0] = [2] { 
   DataTable @[0] { 
    DataTableCols @.data = [5] {
     String_Data @[0] { };
     float_Data @[1] { };
     float_Data @[2] { };
     float_Data @[3] { };
     float_Data @[4] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[1] { 
    DataTableCols @.data = [5] {
     String_Data @[0] { };
     float_Data @[1] { };
     float_Data @[2] { };
     float_Data @[3] { };
     float_Data @[4] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
  };
  DataTable_Group @.gp[1] = [2] { 
   DataTable @[0] { 
    DataTableCols @.data = [60] {
     int_Data @[0] { };
     int_Data @[1] { };
     float_Data @[2] { };
     float_Data @[3] { };
     float_Data @[4] { };
     float_Data @[5] { };
     float_Data @[6] { };
     float_Data @[7] { };
     float_Data @[8] { };
     float_Data @[9] { };
     float_Data @[10] { };
     float_Data @[11] { };
     float_Data @[12] { };
     float_Data @[13] { };
     float_Data @[14] { };
     float_Data @[15] { };
     float_Data @[16] { };
     float_Data @[17] { };
     float_Data @[18] { };
     float_Data @[19] { };
     float_Data @[20] { };
     float_Data @[21] { };
     float_Data @[22] { };
     float_Data @[23] { };
     float_Data @[24] { };
     float_Data @[25] { };
     float_Data @[26] { };
     float_Data @[27] { };
     float_Data @[28] { };
     float_Data @[29] { };
     float_Data @[30] { };
     float_Data @[31] { };
     float_Data @[32] { };
     float_Data @[33] { };
     float_Data @[34] { };
     float_Data @[35] { };
     float_Data @[36] { };
     float_Data @[37] { };
     float_Data @[38] { };
     float_Data @[39] { };
     float_Data @[40] { };
     float_Data @[41] { };
     float_Data @[42] { };
     float_Data @[43] { };
     float_Data @[44] { };
     float_Data @[45] { };
     float_Data @[46] { };
     float_Data @[47] { };
     float_Data @[48] { };
     float_Data @[49] { };
     float_Data @[50] { };
     float_Data @[51] { };
     float_Data @[52] { };
     float_Data @[53] { };
     float_Data @[54] { };
     float_Data @[55] { };
     float_Data @[56] { };
     float_Data @[57] { };
     float_Data @[58] { };
     float_Data @[59] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[1] { 
    DataTableCols @.data = [5] {
     int_Data @[0] { };
     String_Data @[1] { };
     float_Data @[2] { };
     float_Data @[3] { };
     float_Data @[4] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
  };
  DataTable_Group @.gp[2] = [1] { 
   DataTable @[0] { 
    DataTableCols @.data = [3] {
     float_Data @[0] { };
     float_Data @[1] { };
     String_Data @[2] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
  };
 };

 Program_TopGroup @.programs = [1] {
  Program @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [2] {
    DataTable @[0] { 
     DataTableCols @.data = [5] {
      int_Data @[0] { };
      String_Data @[1] { };
      float_Data @[2] { };
      float_Data @[3] { };
      float_Data @[4] { };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
    SimpleMathSpec @[1] { };
   };

   ProgVar_List @.objs_vars = [0] {
   };

   ProgType_List @.types = [1] {
    DynEnumType @[0] { 
     DynEnumItem_List @.enums = [4] {
      DynEnumItem @[0] { };
      DynEnumItem @[1] { };
      DynEnumItem @[2] { };
      DynEnumItem @[3] { };
     };
    };
   };

   ProgVar_List @.args = [2] {
    ProgVar @[0] { };
    ProgVar @[1] { };
   };

   ProgVar_List @.vars = [5] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [4] {
    AssignExpr @[0] { };
    If @[1] { 
     ProgEl_List @.true_code = [5] {
      AssignExpr @[0] { };
      AssignExpr @[1] { };
      DataProcCall @[2] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      DataGenCall @[3] { 
       ProgArg_List @.meth_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
       };
      };
      DataAnalCall @[4] { 
       ProgArg_List @.meth_args = [8] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
	ProgArg @[4] { };
	ProgArg @[5] { };
	ProgArg @[6] { };
	ProgArg @[7] { };
       };
      };
     };
    };
    Else @[2] { 
     ProgEl_List @.true_code = [1] {
      AssignExpr @[0] { };
     };
    };
    DataAnalCall @[3] { 
     ProgArg_List @.meth_args = [8] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
      ProgArg @[4] { };
      ProgArg @[5] { };
      ProgArg @[6] { };
      ProgArg @[7] { };
     };
    };
   };
  };
  Program_Group @.gp[0] = [6] { 
   Program @[0] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [1] {
     DynEnumType @[0] { 
      DynEnumItem_List @.enums = [2] {
       DynEnumItem @[0] { };
       DynEnumItem @[1] { };
      };
     };
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [7] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
     ProgVar @[3] { };
     ProgVar @[4] { };
     ProgVar @[5] { };
     ProgVar @[6] { };
    };

    Function_List @.functions = [1] {
     Function @[0] { 
      ProgVar_List @.args = [0] {
      };

      ProgEl_List @.fun_code = [3] {
       LocalVars @[0] { 
	ProgVar_List @.local_vars = [0] {
	};
       };
       If @[1] { 
	ProgEl_List @.true_code = [4] {
	 MemberAssign @[0] { };
	 MemberAssign @[1] { };
	 MemberAssign @[2] { };
	 MemberAssign @[3] { };
	};
       };
       Else @[2] { 
	ProgEl_List @.true_code = [4] {
	 MemberAssign @[0] { };
	 MemberAssign @[1] { };
	 MemberAssign @[2] { };
	 MemberAssign @[3] { };
	};
       };
      };
     };
    };

    ProgEl_List @.init_code = [6] {
     NetCounterInit @[0] { };
     AssignExpr @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MemberAssign @[5] { };
    };

    ProgEl_List @.prog_code = [11] {
     NetCounterInit @[0] { };
     MemberAssign @[1] { };
     FunctionCall @[2] { 
      ProgArg_List @.fun_args = [0] {
      };
     };
     AssignExpr @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetDataLoop @[6] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
      };
     };
     If @[7] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[9] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MemberAssign @[10] { };
    };
   };
   Program @[1] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @[0] { };
      };
     };
     If @[1] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     Comment @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[5] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[8] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @[2] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [2] {
       ProgVar @[0] { };
       ProgVar @[1] { };
      };
     };
     Comment @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[3] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
       AssignExpr @[1] { };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @[3] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[1] { };
    };
   };
   Program @[4] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     LayerWriter @[0] { 
      LayerDataEl_List @.layer_data = [5] {
       LayerWriterEl @[0] { };
       LayerWriterEl @[1] { };
       LayerWriterEl @[2] { };
       LayerWriterEl @[3] { };
       LayerWriterEl @[4] { };
      };
     };
    };

    ProgVar_List @.objs_vars = [1] {
     ProgVar @[0] { };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [0] {
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @[5] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @[0] { 
      NetMonItem_List @.items = [3] {
       NetMonItem @[0] { };
       NetMonItem @[1] { };
       NetMonItem @[2] { };
      };
     };
    };

    ProgVar_List @.objs_vars = [1] {
     ProgVar @[0] { };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [4] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
  };
  Program_Group @.gp[1] = [10] { 
   Program @[0] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [4] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @[0] { };
      };
     };
     AssignExpr @[1] { };
     MemberAssign @[2] { };
     ForLoop @[3] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [3] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	 ProgArg @[2] { };
	};
       };
       NetCounterIncr @[1] { };
      };
     };
    };
   };
   Program @[1] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [2] {
     RndSeed_List @[0] { 
      taList @.seeds = [25] {
       RndSeed @[0] { };
       RndSeed @[1] { };
       RndSeed @[2] { };
       RndSeed @[3] { };
       RndSeed @[4] { };
       RndSeed @[5] { };
       RndSeed @[6] { };
       RndSeed @[7] { };
       RndSeed @[8] { };
       RndSeed @[9] { };
       RndSeed @[10] { };
       RndSeed @[11] { };
       RndSeed @[12] { };
       RndSeed @[13] { };
       RndSeed @[14] { };
       RndSeed @[15] { };
       RndSeed @[16] { };
       RndSeed @[17] { };
       RndSeed @[18] { };
       RndSeed @[19] { };
       RndSeed @[20] { };
       RndSeed @[21] { };
       RndSeed @[22] { };
       RndSeed @[23] { };
       RndSeed @[24] { };
      };
     };
     RndSeed @[1] { };
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [1] {
     DynEnumType @[0] { 
      DynEnumItem_List @.enums = [3] {
       DynEnumItem @[0] { };
       DynEnumItem @[1] { };
       DynEnumItem @[2] { };
      };
     };
    };

    ProgVar_List @.args = [3] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
    };

    ProgVar_List @.vars = [12] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
     ProgVar @[3] { };
     ProgVar @[4] { };
     ProgVar @[5] { };
     ProgVar @[6] { };
     ProgVar @[7] { };
     ProgVar @[8] { };
     ProgVar @[9] { };
     ProgVar @[10] { };
     ProgVar @[11] { };
    };

    Function_List @.functions = [1] {
     Function @[0] { 
      ProgVar_List @.args = [0] {
      };

      ProgEl_List @.fun_code = [2] {
       LocalVars @[0] { 
	ProgVar_List @.local_vars = [0] {
	};
       };
       Switch @[1] { 
	ProgEl_List @.cases = [3] {
	 CaseBlock @[0] { 
	  ProgEl_List @.prog_code = [1] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	   };
	  };
	 };
	 CaseBlock @[1] { 
	  ProgEl_List @.prog_code = [1] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	   };
	  };
	 };
	 CaseBlock @[2] { 
	  ProgEl_List @.prog_code = [1] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [1] {
	     ProgArg @[0] { };
	    };
	   };
	  };
	 };
	};
       };
      };
     };
    };

    ProgEl_List @.init_code = [7] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     AssignExpr @[2] { };
     AssignExpr @[3] { };
     FunctionCall @[4] { 
      ProgArg_List @.fun_args = [0] {
      };
     };
     WtInitPrompt @[5] { 
      ProgEl_List @.yes_code = [3] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       MethodCall @[1] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       PrintExpr @[2] { };
      };
     };
     AssignExpr @[6] { };
    };

    ProgEl_List @.prog_code = [10] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     AssignExpr @[2] { };
     MemberAssign @[3] { };
     FunctionCall @[4] { 
      ProgArg_List @.fun_args = [0] {
      };
     };
     If @[5] { 
      ProgEl_List @.true_code = [2] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       PrintExpr @[1] { };
      };
     };
     AssignExpr @[6] { };
     WhileLoop @[7] { 
      ProgEl_List @.loop_code = [5] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       NetCounterIncr @[1] { };
       If @[2] { 
	ProgEl_List @.true_code = [2] {
	 VarIncr @[0] { };
	 IfBreak @[1] { };
	};
       };
       Else @[3] { 
	ProgEl_List @.true_code = [1] {
	 AssignExpr @[0] { };
	};
       };
       If @[4] { 
	ProgEl_List @.true_code = [1] {
	 If @[0] { 
	  ProgEl_List @.true_code = [1] {
	   ProgramCall @[0] { 
	    ProgArg_List @.prog_args = [1] {
	     ProgArg @[0] { };
	    };
	   };
	  };
	 };
	};
       };
      };
     };
     If @[8] { 
      ProgEl_List @.true_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
      };
     };
     MethodCall @[9] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @[2] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [6] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
     ProgVar @[3] { };
     ProgVar @[4] { };
     ProgVar @[5] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [2] {
     NetCounterInit @[0] { };
     AssignExpr @[1] { };
    };

    ProgEl_List @.prog_code = [10] {
     NetCounterInit @[0] { };
     AssignExpr @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetDataLoop @[5] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       If @[1] { 
	ProgEl_List @.true_code = [1] {
	 StopStepPoint @[0] { };
	};
       };
      };
     };
     If @[6] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[9] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
   Program @[3] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @[0] { };
      };
     };
     If @[1] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     Comment @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[5] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[8] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @[4] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [2] {
       ProgVar @[0] { };
       ProgVar @[1] { };
      };
     };
     Comment @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[3] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
       AssignExpr @[1] { };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @[5] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[1] { };
    };
   };
   Program @[6] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     LayerWriter @[0] { 
      LayerDataEl_List @.layer_data = [3] {
       LayerWriterEl @[0] { };
       LayerWriterEl @[1] { };
       LayerWriterEl @[2] { };
      };
     };
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @[7] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @[0] { 
      NetMonItem_List @.items = [25] {
       NetMonItem @[0] { };
       NetMonItem @[1] { };
       NetMonItem @[2] { };
       NetMonItem @[3] { };
       NetMonItem @[4] { };
       NetMonItem @[5] { };
       NetMonItem @[6] { };
       NetMonItem @[7] { };
       NetMonItem @[8] { };
       NetMonItem @[9] { };
       NetMonItem @[10] { };
       NetMonItem @[11] { };
       NetMonItem @[12] { };
       NetMonItem @[13] { };
       NetMonItem @[14] { };
       NetMonItem @[15] { };
       NetMonItem @[16] { };
       NetMonItem @[17] { };
       NetMonItem @[18] { };
       NetMonItem @[19] { };
       NetMonItem @[20] { };
       NetMonItem @[21] { };
       NetMonItem @[22] { };
       NetMonItem @[23] { };
       NetMonItem @[24] { };
      };
     };
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [4] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @[8] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @[0] { 
      NetMonItem_List @.items = [30] {
       NetMonItem @[0] { };
       NetMonItem @[1] { };
       NetMonItem @[2] { };
       NetMonItem @[3] { };
       NetMonItem @[4] { };
       NetMonItem @[5] { };
       NetMonItem @[6] { };
       NetMonItem @[7] { };
       NetMonItem @[8] { };
       NetMonItem @[9] { };
       NetMonItem @[10] { };
       NetMonItem @[11] { };
       NetMonItem @[12] { };
       NetMonItem @[13] { };
       NetMonItem @[14] { };
       NetMonItem @[15] { };
       NetMonItem @[16] { };
       NetMonItem @[17] { };
       NetMonItem @[18] { };
       NetMonItem @[19] { };
       NetMonItem @[20] { };
       NetMonItem @[21] { };
       NetMonItem @[22] { };
       NetMonItem @[23] { };
       NetMonItem @[24] { };
       NetMonItem @[25] { };
       NetMonItem @[26] { };
       NetMonItem @[27] { };
       NetMonItem @[28] { };
       NetMonItem @[29] { };
      };
     };
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [4] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [7] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     Comment @[6] { };
    };
   };
   Program @[9] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [6] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
     ProgVar @[3] { };
     ProgVar @[4] { };
     ProgVar @[5] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [6] {
     If @[0] { 
      ProgEl_List @.true_code = [1] {
       ReturnExpr @[0] { };
      };
     };
     MiscCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MiscCall @[2] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     AssignExpr @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
  };
 };

 taViewer_List @.viewers = [1] {
  MainWindowViewer @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
    UserDataItem @[1] { };
    UserDataItem @[2] { };
    UserDataItem @[3] { };
    UserDataItem @[4] { };
    UserDataItem @[5] { };
   };

   ToolBar_List @.toolbars = [1] {
    ToolBar @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   FrameViewer_List @.frames = [3] {
    BrowseViewerTaBase @[0] { };
    PanelViewer @[1] { };
    T3PanelViewer @[2] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };

     T3Panel_List @.panels = [4] {
      T3Panel @[0] { 
       T3DataView_List @.root_view.children = [2] {
	NetView @[0] { 
	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 NetViewStateItem_List @.net_state_text.state_items = [20] {
	  NetViewStateItem @[0] { };
	  NetViewStateItem @[1] { };
	  NetViewStateItem @[2] { };
	  NetViewStateItem @[3] { };
	  NetViewStateItem @[4] { };
	  NetViewStateItem @[5] { };
	  NetViewStateItem @[6] { };
	  NetViewStateItem @[7] { };
	  NetViewStateItem @[8] { };
	  NetViewStateItem @[9] { };
	  NetViewStateItem @[10] { };
	  NetViewStateItem @[11] { };
	  NetViewStateItem @[12] { };
	  NetViewStateItem @[13] { };
	  NetViewStateItem @[14] { };
	  NetViewStateItem @[15] { };
	  NetViewStateItem @[16] { };
	  NetViewStateItem @[17] { };
	  NetViewStateItem @[18] { };
	  NetViewStateItem @[19] { };
	 };

	 ScaleRange_List @.scale_ranges = [15] {
	  ScaleRange @[0] { };
	  ScaleRange @[1] { };
	  ScaleRange @[2] { };
	  ScaleRange @[3] { };
	  ScaleRange @[4] { };
	  ScaleRange @[5] { };
	  ScaleRange @[6] { };
	  ScaleRange @[7] { };
	  ScaleRange @[8] { };
	  ScaleRange @[9] { };
	  ScaleRange @[10] { };
	  ScaleRange @[11] { };
	  ScaleRange @[12] { };
	  ScaleRange @[13] { };
	  ScaleRange @[14] { };
	 };
	};
	GridTableView @[1] { 
	 T3DataView_List @.children = [5] {
	  GridColView @[0] { };
	  GridColView @[1] { };
	  GridColView @[2] { };
	  GridColView @[3] { };
	  GridColView @[4] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
      T3Panel @[1] { 
       T3DataView_List @.root_view.children = [2] {
	GridTableView @[0] { 
	 T3DataView_List @.children = [5] {
	  GridColView @[0] { };
	  GridColView @[1] { };
	  GridColView @[2] { };
	  GridColView @[3] { };
	  GridColView @[4] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
	GridTableView @[1] { 
	 T3DataView_List @.children = [5] {
	  GridColView @[0] { };
	  GridColView @[1] { };
	  GridColView @[2] { };
	  GridColView @[3] { };
	  GridColView @[4] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
      T3Panel @[2] { 
       T3DataView_List @.root_view.children = [1] {
	GraphTableView @[0] { 
	 T3DataView_List @.children = [3] {
	  GraphColView @[0] { };
	  GraphColView @[1] { };
	  GraphColView @[2] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [16] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	 };

	 GraphPlotView_List @.errbars = [16] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
      T3Panel @[3] { 
       T3DataView_List @.root_view.children = [1] {
	GraphTableView @[0] { 
	 T3DataView_List @.children = [60] {
	  GraphColView @[0] { };
	  GraphColView @[1] { };
	  GraphColView @[2] { };
	  GraphColView @[3] { };
	  GraphColView @[4] { };
	  GraphColView @[5] { };
	  GraphColView @[6] { };
	  GraphColView @[7] { };
	  GraphColView @[8] { };
	  GraphColView @[9] { };
	  GraphColView @[10] { };
	  GraphColView @[11] { };
	  GraphColView @[12] { };
	  GraphColView @[13] { };
	  GraphColView @[14] { };
	  GraphColView @[15] { };
	  GraphColView @[16] { };
	  GraphColView @[17] { };
	  GraphColView @[18] { };
	  GraphColView @[19] { };
	  GraphColView @[20] { };
	  GraphColView @[21] { };
	  GraphColView @[22] { };
	  GraphColView @[23] { };
	  GraphColView @[24] { };
	  GraphColView @[25] { };
	  GraphColView @[26] { };
	  GraphColView @[27] { };
	  GraphColView @[28] { };
	  GraphColView @[29] { };
	  GraphColView @[30] { };
	  GraphColView @[31] { };
	  GraphColView @[32] { };
	  GraphColView @[33] { };
	  GraphColView @[34] { };
	  GraphColView @[35] { };
	  GraphColView @[36] { };
	  GraphColView @[37] { };
	  GraphColView @[38] { };
	  GraphColView @[39] { };
	  GraphColView @[40] { };
	  GraphColView @[41] { };
	  GraphColView @[42] { };
	  GraphColView @[43] { };
	  GraphColView @[44] { };
	  GraphColView @[45] { };
	  GraphColView @[46] { };
	  GraphColView @[47] { };
	  GraphColView @[48] { };
	  GraphColView @[49] { };
	  GraphColView @[50] { };
	  GraphColView @[51] { };
	  GraphColView @[52] { };
	  GraphColView @[53] { };
	  GraphColView @[54] { };
	  GraphColView @[55] { };
	  GraphColView @[56] { };
	  GraphColView @[57] { };
	  GraphColView @[58] { };
	  GraphColView @[59] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [16] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	 };

	 GraphPlotView_List @.errbars = [16] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
     };
    };
   };

   DockViewer_List @.docks = [1] {
    ToolBoxDockViewer @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
      UserDataItem @[2] { };
      UserDataItem @[3] { };
      UserDataItem @[4] { };
      UserDataItem @[5] { };
     };
    };
   };
  };
 };

 Network_Group @.networks = [1] {
  LeabraNetwork @[0] { 
   BaseSpec_Group @.specs = [4] {
    LeabraUnitSpec @[0] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    LeabraConSpec @[1] { 
     BaseSpec_Group @.children = [1] {
      LeabraBiasSpec @[0] { 
       BaseSpec_Group @.children = [0] {
       };

       Schedule @.lrate_sched = [0] {
       };
      };
     };

     Schedule @.lrate_sched = [0] {
     };
    };
    LeabraLayerSpec @[2] { 
     BaseSpec_Group @.children = [4] {
      LeabraLayerSpec @[0] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      LeabraLayerSpec @[1] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      LeabraLayerSpec @[2] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      LeabraLayerSpec @[3] { 
       BaseSpec_Group @.children = [0] {
       };
      };
     };
    };
    FullPrjnSpec @[3] { 
     BaseSpec_Group @.children = [0] {
     };
    };
   };

   ParamSeq_Group @.param_seqs = [0] {
   };

   NetMonItem_List @.monitor.items = [0] {
   };

   DataTableCols @.mon_data.data = [0] {
   };

   DataOpList @.mon_data.last_sort_spec.ops = [0] {
   };

   Layer_Group @.layers = [4] {
    LeabraLayer @[0] { 
     Projection_List @.projections = [3] {
      LeabraPrjn @[0] { };
      LeabraPrjn @[1] { };
      LeabraPrjn @[2] { };
     };
    };
    LeabraLayer @[1] { 
     Projection_List @.projections = [1] {
      LeabraPrjn @[0] { };
     };
    };
    LeabraLayer @[2] { 
     Projection_List @.projections = [1] {
      LeabraPrjn @[0] { };
     };
    };
    LeabraLayer @[3] { 
     Projection_List @.projections = [1] {
      LeabraPrjn @[0] { };
     };
    };
   };

   Weights_List @.weights = [1] {
    Weights @[0] { };
   };
  };
 };
};
LeabraProject .projects[0] {
 name="face_categ_autosave";
 desc="This project explores how sensory inputs (in this case simple cartoon faces) can be categorized in multiple different ways, to extract the relevant information and collapse across the irrelevant";
 tags="Categorization, Network, Faces, Emotion";
 version {
  major=8;
  minor=0;
  step=7;
 };
 author="Randall C. O'Reilly";
 email="emergent-users@grey.colorado.edu";
 license {
  license=GPLv2;
  owner_name="Regents of the University of Colorado";
  org="CCNLab at the University of Colorado Boulder";
  year="2016";
  custom=;
 };
 pub_cite="OReillyMunakataFrankEtAl12";
 wiki {wiki="CCN": page_name="CCNBook/Sims/Networks/Categ": };
 docs {
  name="docs";
  el_typ=taDoc;
  el_def=0;
  taDoc @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="user_pinned": value=1: val_type_fixed=0: };
   };
   name="ProjectDocs";
   desc=;
   web_doc=1;
   wiki="CCN";
   url="CCNBook/Sims/Networks/Categ";
   full_url="https://grey.colorado.edu/CompCogNeuro/index.php/CCNBook/Sims/Networks/Categ";
   text_size=1;
   text="<html>
<head></head>
<body>


</body>
</html>
";
   html_text="<!DOCTYPE html><html lang=\"en\" dir=\"ltr\" class=\"client-js\"><head>
<meta charset=\"UTF-8\">
<title>CCNBook/Sims/Networks/Categ - Computational Cognitive Neuroscience Wiki</title>
<script>document.documentElement.className = document.documentElement.className.replace( /(^|\\s)client-nojs(\\s|$)/, \"$1client-js$2\" );</script>
<script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({\"wgCanonicalNamespace\":\"\",\"wgCanonicalSpecialPageName\":!1,\"wgNamespaceNumber\":0,\"wgPageName\":\"CCNBook/Sims/Networks/Categ\",\"wgTitle\":\"CCNBook/Sims/Networks/Categ\",\"wgCurRevisionId\":5445,\"wgRevisionId\":5445,\"wgArticleId\":543,\"wgIsArticle\":!0,\"wgIsRedirect\":!1,\"wgAction\":\"view\",\"wgUserName\":\"Oreilly\",\"wgUserGroups\":[\"sysop\",\"*\",\"user\",\"autoconfirmed\"],\"wgCategories\":[\"PublishedProject\"],\"wgBreakFrames\":!1,\"wgPageContentLanguage\":\"en\",\"wgPageContentModel\":\"wikitext\",\"wgSeparatorTransformTable\":[\"\",\"\"],\"wgDigitTransformTable\":[\"\",\"\"],\"wgDefaultDateFormat\":\"dmy\",\"wgMonthNames\":[\"\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\"wgMonthNamesShort\":[\"\",\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],\"wgRelevantPageName\":\"CCNBook/Sims/Networks/Categ\",\"wgRelevantArticleId\":543,\"wgUserId\":3,\"wgUserEditCount\":3247,\"wgUserRegistration\":1200074928000,\"wgUserNewMsgRevisionId\":null,
\"wgIsProbablyEditable\":!0,\"wgRestrictionEdit\":[],\"wgRestrictionMove\":[],\"sfgAutocompleteValues\":[],\"sfgAutocompleteOnAllChars\":!1,\"sfgFieldProperties\":[],\"sfgDependentFields\":[],\"sfgShowOnSelect\":[],\"sfgScriptPath\":\"/CompCogNeuro/extensions/SemanticForms\",\"wgSVGEditEditor\":\"http://svg-edit.googlecode.com/svn/trunk/editor/svg-editor.html\",\"wgHeaderTabsTabIndexes\":[],\"wgWikiEditorEnabledModules\":{\"toolbar\":!0,\"dialogs\":!0,\"preview\":!0,\"publish\":!1},\"wgCategoryTreePageCategoryOptions\":\"{\\\"mode\\\":0,\\\"hideprefix\\\":20,\\\"showcount\\\":true,\\\"namespaces\\\":false}\"});mw.loader.implement(\"user.options\",function($,jQuery){mw.user.options.set({\"editsectiononrightclick\":\"1\",\"enotifminoredits\":\"1\",\"previewontop\":\"\",\"watchmoves\":\"1\",\"searchNs1\":\"1\",\"searchNs2\":\"1\",\"searchNs3\":\"1\",\"searchNs4\":\"1\",\"searchNs5\":\"1\",\"searchNs10\":\"1\",\"timecorrection\":\"ZoneInfo|-360|America/Denver\",\"watchlisttoken\":\"d0d481c226fbf5f75451a79f689ec8ed40c261a9\"});});mw.loader.implement(\"user.tokens\",function($,jQuery){mw.user.tokens.set({\"editToken\":\"0c5411ff84e11259d2e7196925f72ceb5a66c6c3+\\\\\",\"patrolToken\":\"3e1a9f6e1c0332ff33cc1f4a5f51a5ee5a66c6c3+\\\\\",\"watchToken\":\"d2fbab8239c7021a3c4502474844f9cc5a66c6c3+\\\\\"});});mw.loader.load([\"ext.smw.style\",\"ext.smw.tooltips\",\"mediawiki.page.startup\",\"mediawiki.legacy.wikibits\",\"skins.vector.js\"]);
} );</script>
<link rel=\"stylesheet\" href=\"/CompCogNeuro/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.sectionAnchor%7Cmediawiki.skinning.interface%7Cskins.vector.styles&amp;only=styles&amp;skin=vector\">
<link rel=\"stylesheet\" href=\"/CompCogNeuro/extensions/HeaderTabs/skins/ext.headertabs.large.css\">
<meta name=\"ResourceLoaderDynamicStyles\" content=\"\">
<link rel=\"stylesheet\" href=\"/CompCogNeuro/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector\">
<style>a:lang(ar),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}</style>
<script async=\"\" src=\"/CompCogNeuro/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector\"></script>
<meta name=\"generator\" content=\"MediaWiki 1.26.4\">
<link rel=\"ExportRDF\" type=\"application/rdf+xml\" title=\"CCNBook/Sims/Networks/Categ\" href=\"/CompCogNeuro/index.php?title=Special:ExportRDF/CCNBook/Sims/Networks/Categ&amp;xmlmime=rdf\">
<link rel=\"alternate\" type=\"application/x-wiki\" title=\"Edit\" href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Categ&amp;action=edit\">
<link rel=\"edit\" title=\"Edit\" href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Categ&amp;action=edit\">
<link rel=\"shortcut icon\" href=\"/emergent/favicon.ico\">
<link rel=\"search\" type=\"application/opensearchdescription+xml\" href=\"/CompCogNeuro/opensearch_desc.php\" title=\"Computational Cognitive Neuroscience Wiki (en)\">
<link rel=\"EditURI\" type=\"application/rsd+xml\" href=\"https://grey.colorado.edu/CompCogNeuro/api.php?action=rsd\">
<link rel=\"alternate\" type=\"application/atom+xml\" title=\"Computational Cognitive Neuroscience Wiki Atom feed\" href=\"/CompCogNeuro/index.php?title=Special:RecentChanges&amp;feed=atom\">
<!--[if lt IE 7]><style type=\"text/css\">body{behavior:url(\"/CompCogNeuro/skins/Vector/csshover.min.htc\")}</style><![endif]-->
<script src=\"/CompCogNeuro/load.php?debug=false&amp;lang=en&amp;modules=jquery%2Cmediawiki&amp;only=scripts&amp;skin=vector&amp;version=%2B%2Bg4NuYj\"></script></head>
<body class=\"mediawiki ltr sitedir-ltr ns-0 ns-subject page-CCNBook_Sims_Networks_Categ skin-vector action-view\">
		<div id=\"mw-page-base\" class=\"noprint\"></div>
		<div id=\"mw-head-base\" class=\"noprint\"></div>
		<div id=\"content\" class=\"mw-body\" role=\"main\">
			<a id=\"top\"></a>

						<div class=\"mw-indicators\">
</div>
			<h1 id=\"firstHeading\" class=\"firstHeading\" lang=\"en\">CCNBook/Sims/Networks/Categ</h1>
									<div id=\"bodyContent\" class=\"mw-body-content\">
									<div id=\"siteSub\">From Computational Cognitive Neuroscience Wiki</div>
								<div id=\"contentSub\"></div>
												<div id=\"jump-to-nav\" class=\"mw-jump\">
					Jump to:					<a href=\"#mw-head\">navigation</a>, 					<a href=\"#p-search\">search</a>
				</div>
				<div id=\"mw-content-text\" lang=\"en\" dir=\"ltr\" class=\"mw-content-ltr\"><table style=\"width: 35em; font-size: 90%; border: 1px solid #aaaaaa; background-color: #f9f9f9; color: black; margin-bottom: 0.5em; margin-left: 1em; padding: 0.2em; float: right; clear: right; text-align:left;\">
<tbody><tr>
<th style=\"text-align: center; background-color:#ccccff;\" colspan=\"2\"><big>CCNBook/Sims/Networks/Categ</big>
</th></tr>
<tr>
<th> Project Name
</th>
<td> face_categ
</td></tr>
<tr>
<th> Filename
</th>
<td> <a href=\"/CompCogNeuro/index.php/File:face_categ.proj\" title=\"File:face categ.proj\">File:face categ.proj</a> <a href=\"/CompCogNeuro/index.php?title=.OpenProjectFromWeb(face_categ.proj,https://grey.colorado.edu/CompCogNeuro/index.php/MainPage)&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".OpenProjectFromWeb(face categ.proj,https://grey.colorado.edu/CompCogNeuro/index.php/MainPage) (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Open Project in emergent</span></a>
</td></tr>
<tr>
<th> Author
</th>
<td>  Randall C. O'Reilly
</td></tr>
<tr>
<th> Email
</th>
<td> emergent-users@grey.colorado.edu
</td></tr>
<tr>
<th> Publication
</th>
<td> <a href=\"/CompCogNeuro/index.php/OReillyMunakataFrankEtAl12\" title=\"OReillyMunakataFrankEtAl12\">(O'Reilly, Munakata, Frank, Hazy, &amp; Contributors, 2012)</a>
</td></tr>
<tr>
<th> First Published
</th>
<td> Jul 27 2016
</td></tr>
<tr>
<th> Tags
</th>
<td>  Categorization, Network, Faces, Emotion
</td></tr>
<tr>
<th> Description
</th>
<td>  This project explores how sensory inputs (in this case simple cartoon faces) can be categorized in multiple different ways, to extract the relevant information and collapse across the irrelevant
</td></tr>
<tr>
<th> Updated
</th>
<td> 28 July 2016,  6 September 2016,  12 January 2017,  13 January 2017,  11 January 2018
</td></tr>
<tr>
<th> Versions
</th>
<td> 8.0.0,  8.0.2,  8.0.3,  8.0.4,  8.0.5
</td></tr>
<tr>
<th> Emergent Versions
</th>
<td> 8.0.0,  8.0.4,  8.5.0
</td></tr>
<tr>
<th> Other Files
</th>
<td> <a href=\"/CompCogNeuro/index.php/File:FaceNetwork.wts\" title=\"File:FaceNetwork.wts\">File:FaceNetwork.wts</a>
</td></tr></tbody></table>
<p><br>
Back to <a href=\"/CompCogNeuro/index.php/CCNBook/Sims/All\" title=\"CCNBook/Sims/All\">CCNBook/Sims/All</a> or <a href=\"/CompCogNeuro/index.php/CCNBook/Networks\" title=\"CCNBook/Networks\">Networks Chapter</a>.
</p>
<div id=\"toc\" class=\"toc\"><div id=\"toctitle\"><h2>Contents</h2></div>
<ul>
<li class=\"toclevel-1 tocsection-1\"><a href=\"#Introduction\"><span class=\"tocnumber\">1</span> <span class=\"toctext\">Introduction</span></a></li>
<li class=\"toclevel-1 tocsection-2\"><a href=\"#Part_I:_Feedforward_.28bottom-up.29_Flow_of_Information_from_Inputs_to_Categories\"><span class=\"tocnumber\">2</span> <span class=\"toctext\">Part I: Feedforward (bottom-up) Flow of Information from Inputs to Categories</span></a>
<ul>
<li class=\"toclevel-2 tocsection-3\"><a href=\"#The_Network_and_Face_Inputs\"><span class=\"tocnumber\">2.1</span> <span class=\"toctext\">The Network and Face Inputs</span></a></li>
<li class=\"toclevel-2 tocsection-4\"><a href=\"#Testing_the_Network\"><span class=\"tocnumber\">2.2</span> <span class=\"toctext\">Testing the Network</span></a></li>
<li class=\"toclevel-2 tocsection-5\"><a href=\"#Using_Cluster_Plots_to_Understand_the_Categorization_Process\"><span class=\"tocnumber\">2.3</span> <span class=\"toctext\">Using Cluster Plots to Understand the Categorization Process</span></a></li>
</ul>
</li>
<li class=\"toclevel-1 tocsection-6\"><a href=\"#Part_II:_Bidirectional_.28Top-Down_and_Bottom-Up.29_Processing\"><span class=\"tocnumber\">3</span> <span class=\"toctext\">Part II: Bidirectional (Top-Down and Bottom-Up) Processing</span></a>
<ul>
<li class=\"toclevel-2 tocsection-7\"><a href=\"#Top-Down_Imagery\"><span class=\"tocnumber\">3.1</span> <span class=\"toctext\">Top-Down Imagery</span></a></li>
<li class=\"toclevel-2 tocsection-8\"><a href=\"#Interactive_Top-Down_and_Bottom-Up_and_Partial_Faces\"><span class=\"tocnumber\">3.2</span> <span class=\"toctext\">Interactive Top-Down and Bottom-Up and Partial Faces</span></a></li>
</ul>
</li>
</ul>
</div>

<h1><span class=\"mw-headline\" id=\"Introduction\">Introduction</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Categ&amp;action=edit&amp;section=1\" title=\"Edit section: Introduction\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h1>
<p>This project explores how sensory inputs (in this case simple cartoon faces) can be categorized in multiple different ways, to extract the relevant information and collapse across the irrelevant.  It allows you to explore both bottom-up processing from face image to categories, and top-down processing from category values to face images (imagery), including the ability to dynamically iterate both bottom-up and top-down to cleanup partial inputs (partially occluded face images).
</p><p>If you are following along with the text, then first do Part I in the section on Categorization, and then come back for Part II after reading about Bidirectional Excitatory Dynamics and Attractors.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> It is recommended that you <a href=\"/CompCogNeuro/index.php?title=.docs.ProjectDocs.OpenInWindow()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".docs.ProjectDocs.OpenInWindow() (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">click here to undock</span></a> this document from the main project window. Use the Window menu to find this window if you lose it, and you can always return to this document by browsing to this document from the <span style=\"background:#FFFFD0\"><tt><b>docs</b></tt></span> section in the left browser panel of the project's main window. <br>
</td></tr>
</tbody></table>
<h1><span class=\"mw-headline\" id=\"Part_I:_Feedforward_.28bottom-up.29_Flow_of_Information_from_Inputs_to_Categories\">Part I: Feedforward (bottom-up) Flow of Information from Inputs to Categories</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Categ&amp;action=edit&amp;section=2\" title=\"Edit section: Part I: Feedforward (bottom-up) Flow of Information from Inputs to Categories\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h1>
<h2><span class=\"mw-headline\" id=\"The_Network_and_Face_Inputs\">The Network and Face Inputs</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Categ&amp;action=edit&amp;section=3\" title=\"Edit section: The Network and Face Inputs\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>
<p>Let's first examine the network, shown in the <a href=\"/CompCogNeuro/index.php?title=.T3Tab.Network&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".T3Tab.Network (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Network</span></a> tab in the right 3D panel.  It has a 16x16 <span style=\"background:#FFFFD0\"><tt><b>Input</b></tt></span> layer for the face images, and three different categorization output layers:
</p>
<ul><li> <span style=\"background:#FFFFD0\"><tt><b>Emotion</b></tt></span> with \"Happy\" and \"Sad\" units, categorizes the emotion represented in the face into these two different categories.</li>
<li> <span style=\"background:#FFFFD0\"><tt><b>Gender</b></tt></span> with \"Female\" and \"Male\" units, categorizes the face according to these two gender categories.</li>
<li> <span style=\"background:#FFFFD0\"><tt><b>Identity</b></tt></span> with 6 labeled units with the names given to the different faces in the input (Alberto, Betty, Lisa, Mark, Wendy, Zane) -- the network can categorize the individual despite differences in emotional expression.  Four additional units are available if you want to explore further by adding new faces.</li></ul>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Select the <span style=\"background:#FFFFD0\"><tt><b>r.wt</b></tt></span> variable to view in the network view, and click on each of the different output category neurons in the network.  This will display the weight values going into each neuron. <br>
</td></tr>
</tbody></table>
<p>These weights were learned in a way that makes their representations particularly obvious by looking at these weights, so you can hopefully see sensible-looking patterns for each unit.  To further understand how this network works, we can look at the input face patterns and corresponding categorization values that it was trained on (we'll explain this learning process in the <a href=\"/CompCogNeuro/index.php/CCNBook/Learning\" title=\"CCNBook/Learning\">Learning Chapter</a>).
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Select the <a href=\"/CompCogNeuro/index.php?title=.T3Tab.Faces&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".T3Tab.Faces (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Faces</span></a> tab in the right panel -- look at the patterns shown in the left portion of the display -- these are the names, faces, and emotional expresions that the network was trained on. <br>
</td></tr>
</tbody></table>
<h2><span class=\"mw-headline\" id=\"Testing_the_Network\">Testing the Network</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Categ&amp;action=edit&amp;section=4\" title=\"Edit section: Testing the Network\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>
<p>The next step in understanding the basics of the network is to see it respond to the inputs.  
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Select the <span style=\"background:#FFFFD0\"><tt><b>act</b></tt></span> value to view the unit activities in the <a href=\"/CompCogNeuro/index.php?title=.T3Tab.Network&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".T3Tab.Network (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Network</span></a>, and then select the <a href=\"/CompCogNeuro/index.php?title=.PanelTab.ControlPanel&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".PanelTab.ControlPanel (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">ControlPanel</span></a> tab and do <a href=\"/CompCogNeuro/index.php?title=.programs.LeabraEpochTest.Init()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraEpochTest.Init() (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Init</span></a> and then <a href=\"/CompCogNeuro/index.php?title=.programs.LeabraEpochTest.Step(.programs.LeabraTrialTest)&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraEpochTest.Step(.programs.LeabraTrialTest) (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Step Trial</span></a> to single-step through the input patterns. <br>
</td></tr>
</tbody></table>
<p>You will see the network process the face input and activate the appropriate output categories for it (e.g., for the first pattern, it will activate Happy, Male, and Alberto).  Note that we are using the NOISY_XX1 rate coded activation function, as with most of our simulations.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Proceed to {<a href=\"/CompCogNeuro/index.php?title=.programs.LeabraEpochTest.Step(.programs.LeabraTrialTest)&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraEpochTest.Step(.programs.LeabraTrialTest) (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Step Trial</span></a> through the entire set of faces. <br>
</td></tr>
</tbody></table>
<p>You have probably noticed that the pattern of network activations was recorded in the <span style=\"background:#FFFFD0\"><tt><b>TrialOutputData</b></tt></span> <a href=\"/CompCogNeuro/index.php?title=.Wiki.Grid_View&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".Wiki.Grid View (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Grid View</span></a> display next to the network. This allows you to see the whole picture of network behavior in one glance.
</p>
<h2><span class=\"mw-headline\" id=\"Using_Cluster_Plots_to_Understand_the_Categorization_Process\">Using Cluster Plots to Understand the Categorization Process</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Categ&amp;action=edit&amp;section=5\" title=\"Edit section: Using Cluster Plots to Understand the Categorization Process\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>
<p>A <a href=\"/CompCogNeuro/index.php?title=.Wiki.Cluster_Plot&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".Wiki.Cluster Plot (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Cluster Plot</span></a> provides a convenient way of visualizing the similarity relationships among a set of items, where multiple different forms of similarity may be in effect at the same time (i.e., multidimensional similarity structure).  First, we'll look at the cluster plot of the input faces, and then of the different categorizations performed on them, to see how the network transforms the similarity structure to extract the relevant information and collapse across the irrelevant.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> In the <a href=\"/CompCogNeuro/index.php?title=.PanelTab.ControlPanel&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".PanelTab.ControlPanel (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">ControlPanel</span></a>, check that the <span style=\"background:#FFFFD0\"><tt><b>cluster_data_src</b></tt></span> (source data for cluster plotting) is set to <span style=\"background:#FFFFD0\"><tt><b>Faces</b></tt></span>, and the <span style=\"background:#FFFFD0\"><tt><b>cluster_layer</b></tt></span> is set to <span style=\"background:#FFFFD0\"><tt><b>Input</b></tt></span>, and then hit the <a href=\"/CompCogNeuro/index.php?title=.programs.ClusterPlot.Run()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.ClusterPlot.Run() (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">ClusterPlot Run</span></a> button. <br>
</td></tr>
</tbody></table>
<p>You should see the resulting cluster plot in the <a href=\"/CompCogNeuro/index.php?title=.T3Tab.ClusterPlotData&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".T3Tab.ClusterPlotData (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">ClusterPlotData</span></a> tab.
</p>
<hr>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#90FF90;font-size:small\"><b>Question 3.1:</b> Given what you know about how a Cluster Plot works (see above link), explain the similarity structure among the different face inputs.  Describe which items are most similar to each other, and next-most similar, etc.  Specifically, list the ordering of the Emotion, Gender, and Identity factors in terms of how similar items are -- i.e., are different versions of the same Identity more similar to each other than faces with the same Emotion?<br>
</td></tr>
</tbody></table>
<hr>
<p>Now, let's see how this input similarity structure is transformed by the different types of categorization.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Set the <span style=\"background:#FFFFD0\"><tt><b>cluster_layer</b></tt></span> to <span style=\"background:#FFFFD0\"><tt><b>Emotion</b></tt></span> and do another <a href=\"/CompCogNeuro/index.php?title=.programs.ClusterPlot.Run()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.ClusterPlot.Run() (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">ClusterPlot Run</span></a>. <br>
</td></tr>
</tbody></table>
<hr>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#90FF90;font-size:small\"><b>Question 3.2:</b> How does the Emotion categorization transform the input similarity -- ie., what items are now the most similar to each other?<br>
</td></tr>
</tbody></table>
<hr>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Set the <span style=\"background:#FFFFD0\"><tt><b>cluster_layer</b></tt></span> to the other options (<span style=\"background:#FFFFD0\"><tt><b>Gender</b></tt></span>, <span style=\"background:#FFFFD0\"><tt><b>Identity</b></tt></span>) and do cluster plots of those as well. <br>
</td></tr>
</tbody></table>
<p>You should observe that the different ways of categorizing the input faces each emphasize some differences while collapsing across others.  For example, if you go back and look at the <span style=\"background:#FFFFD0\"><tt><b>r.wt</b></tt></span> values of the \"Happy\" and \"Sad\" Emotion units, you will clearly see that these units care most about (i.e., have the largest weights from) the mouth and eye features associated with each of the different emotions, while having weaker other weights from the inputs that are common across all faces.
</p><p>This ability of synaptic weights to drive the detection of specific features in the input is what drives the categorization process in a network, and it is critical for extracting the behaviorally-relevant information from inputs, so it can be used at a higher level to drive appropriate behavior.  For example, if Zane is looking sad, then perhaps it is not a good time to approach him for help on your homework..
</p><p>In terms of <b>localist vs. distributed</b> representations, the category units are localist within each layer, having only one unit active, uniquely representing a specific category value (e.g., Happy vs. Sad).  However, if you aggregate across the set of three category layers, it actually is a simple kind of distributed representation, where there is a distributed pattern of activity for each input, and the similarity structure of that pattern is meaningful.  In more completely distributed representations, the individual units are no longer so clearly identifiable, but that just makes things more complicated for the purposes of this simple simulation.
</p><p>Having multiple different ways of categorizing the same input in effect at the same time (in parallel) is a critical feature of neural processing -- all too often researchers assume that one has to choose a particular level at which the brain is categorizing a given input, when in fact all evidence suggests that it does massively parallel categorization along many different dimensions at the same time.
</p>
<h1><span class=\"mw-headline\" id=\"Part_II:_Bidirectional_.28Top-Down_and_Bottom-Up.29_Processing\">Part II: Bidirectional (Top-Down and Bottom-Up) Processing</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Categ&amp;action=edit&amp;section=6\" title=\"Edit section: Part II: Bidirectional (Top-Down and Bottom-Up) Processing\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h1>
<p>In this section, we use the same face categorization network to explore bidirectional top-down and bottom-up processing through the bidirectional connections present in the network.  First, let's see these bidirectional connections.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> In the <a href=\"/CompCogNeuro/index.php?title=.T3Tab.Network&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".T3Tab.Network (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Network</span></a> tab, select the <span style=\"background:#FFFFD0\"><tt><b>s.wt</b></tt></span> (sending weights) variable and click on the various category output units -- you can click back and forth between <span style=\"background:#FFFFD0\"><tt><b>r.wt</b></tt></span> and <span style=\"background:#FFFFD0\"><tt><b>s.wt</b></tt></span> to compare the receiving and sending weights for a given unit -- in general they should have a similar pattern with somewhat different overall magnitudes. <br>
</td></tr>
</tbody></table>
<p>Thus, as we discussed in the <a href=\"/CompCogNeuro/index.php/CCNBook/Networks\" title=\"CCNBook/Networks\">Networks Chapter</a>, the network has roughly symmetric bidirectional connectivity, so that information can flow in both directions and works to develop a consistent overall interpretation of the inputs that satisfies all the relevant constraints at each level (<i>multiple constraint satisfaction</i>).
</p>
<h2><span class=\"mw-headline\" id=\"Top-Down_Imagery\">Top-Down Imagery</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Categ&amp;action=edit&amp;section=7\" title=\"Edit section: Top-Down Imagery\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>
<p>A simple first step for observing the effects of bidirectional connectivity is to activate a set of high-level category values and have that information flow top-down to the input layer to generate an image that corresponds to the combination of such categories.  For example, if we activate Happy, Female, and Lisa, then we might expect that the network will be able to \"imagine\" what Lisa looks like when she's happy.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> In the <a href=\"/CompCogNeuro/index.php?title=.PanelTab.ControlPanel&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".PanelTab.ControlPanel (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">ControlPanel</span></a>, change the <span style=\"background:#FFFFD0\"><tt><b>input_type</b></tt></span> to <span style=\"background:#FFFFD0\"><tt><b>TOP_DOWN</b></tt></span> instead of the current BOTTOM_UP, and then do <a href=\"/CompCogNeuro/index.php?title=.programs.LeabraEpochTest.Init()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraEpochTest.Init() (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Init</span></a> and  hit <a href=\"/CompCogNeuro/index.php?title=.programs.LeabraEpochTest.Step(.programs.LeabraCycleTest)&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraEpochTest.Step(.programs.LeabraCycleTest) (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Step Cycle</span></a> multiple times to see the activation dynamics unfold one cycle at a time. <br>
</td></tr>
</tbody></table>
<p>You should see that the high-level category values for the first face in the list (Happy, Male, Alberto) were activated at the start, and then the face image filed in over time based on this top-down information.
</p>
<h2><span class=\"mw-headline\" id=\"Interactive_Top-Down_and_Bottom-Up_and_Partial_Faces\">Interactive Top-Down and Bottom-Up and Partial Faces</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Categ&amp;action=edit&amp;section=8\" title=\"Edit section: Interactive Top-Down and Bottom-Up and Partial Faces\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>
<p>Next, let's try a more challenging test of bidirectional connectivity, where we have partially occluded face input images (20 pixels at random have been turned off from the full face images), and we can test whether the network will first correctly recognize the face (via bottom-up processing from input to categories), and then use top-down activation to fill in or <b>pattern complete</b> the missing elements of the input image, based on the learned knowledge of what each of the individuals (and their emotions) look like.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Set the <span style=\"background:#FFFFD0\"><tt><b>input_type</b></tt></span> back to <span style=\"background:#FFFFD0\"><tt><b>BOTTOM_UP</b></tt></span> in the <a href=\"/CompCogNeuro/index.php?title=.PanelTab.ControlPanel&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".PanelTab.ControlPanel (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">ControlPanel</span></a>, and change the <span style=\"background:#FFFFD0\"><tt><b>input_data</b></tt></span> to <span style=\"background:#FFFFD0\"><tt><b>PartialFaces</b></tt></span> instead of Faces, and then do <a href=\"/CompCogNeuro/index.php?title=.programs.LeabraEpochTest.Init()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraEpochTest.Init() (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Init</span></a> and hit <a href=\"/CompCogNeuro/index.php?title=.programs.LeabraEpochTest.Step(.programs.LeabraCycleTest)&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraEpochTest.Step(.programs.LeabraCycleTest) (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Step Cycle</span></a> multiple times while watching the Network display. <br>
</td></tr>
</tbody></table>
<p>You should observe the initial partial activation pattern, followed by activation of the category-level units, and then the missing elements of the face image gradually get filled in.
</p>
<hr>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#90FF90;font-size:small\"><b>Question 3.3:</b> Across multiple different such partial faces, what is the order in which the category units get active? How does this relate to the timing of when the missing features in the input face start to get filled in?<br>
</td></tr>
</tbody></table>
<hr>
<p>Another way of thinking about the behavior of this network is in terms of <b>attractor dynamics</b>, where each specific face and associated category values represents a coordinated attractor, and the process of activation updating over cycles results in the network settling into a specific attractor from a partial input pattern that neverthelss lies within its overall attractor basin.
</p><p>At a technical level, the ability of the network to fill in the missing parts of the input requires <b>soft clamping</b> of the input patterns -- the face pattern comes into each input as an extra contribution to the excitatory net input, which is then integrated with the other synaptic inputs coming top-down from the category level.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> You may now close the project (use the window manager close button on the project window or <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>File/Close Project</tt></span> menu item) and then open a new one, or just quit emergent entirely by doing <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Quit emergent</tt></span> menu option or clicking the close button on the root window. <br>
</td></tr>
</tbody></table>

<!-- 
NewPP limit report
Cached time: 20180122210714
Cache expiry: 86400
Dynamic content: false
CPU time usage: 0.292 seconds
Real time usage: 0.337 seconds
Preprocessor visited node count: 546/1000000
Preprocessor generated node count: 2085/1000000
Post?expand include size: 17487/2097152 bytes
Template argument size: 9052/2097152 bytes
Highest expansion depth: 6/40
Expensive parser function count: 0/100
-->

<!-- 
Transclusion expansion time report (%,ms,calls,template)
100.00%  132.496      1 - -total
 60.22%   79.789      1 - Template:PublishedProject
 23.98%   31.773     12 - Template:cmd
  8.54%   11.311     22 - Template:emerlink
  7.79%   10.318      1 - Template:DocEditDialog
  6.52%    8.643     27 - Template:var
  4.79%    6.346      1 - Template:DocQuit
  3.13%    4.145      1 - Template:cite
  2.70%    3.573      3 - Template:hwq
  2.06%    2.735      2 - Template:fun
-->

<!-- Saved in parser cache with key compcogneuro:pcache:idhash:543-0!*!0!!en!5!* and timestamp 20180122210714 and revision id 5445
 -->
</div>					<div class=\"printfooter\">
						Retrieved from \"<a dir=\"ltr\" href=\"https://grey.colorado.edu/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Categ&amp;oldid=5445\">https://grey.colorado.edu/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Categ&amp;oldid=5445</a>\"					</div>
				<div id=\"catlinks\" class=\"catlinks\"><div id=\"mw-normal-catlinks\" class=\"mw-normal-catlinks\"><a href=\"/CompCogNeuro/index.php/Special:Categories\" title=\"Special:Categories\">Category</a>: <ul><li><a href=\"/CompCogNeuro/index.php/Category:PublishedProject\" title=\"Category:PublishedProject\">PublishedProject</a></li></ul></div></div>				<div class=\"visualClear\"></div>
							</div>
		</div>
		<div id=\"mw-navigation\">
			<h2>Navigation menu</h2>

			<div id=\"mw-head\">
									<div id=\"p-personal\" role=\"navigation\" class=\"\" aria-labelledby=\"p-personal-label\">
						<h3 id=\"p-personal-label\">Personal tools</h3>
						<ul>
							<li id=\"pt-userpage\"><a href=\"/CompCogNeuro/index.php/User:Oreilly\" dir=\"auto\" title=\"Your user page [.]\" accesskey=\".\">Oreilly</a></li><li id=\"pt-mytalk\"><a href=\"/CompCogNeuro/index.php/User_talk:Oreilly\" class=\"new\" title=\"Your talk page [n]\" accesskey=\"n\">Talk</a></li><li id=\"pt-preferences\"><a href=\"/CompCogNeuro/index.php/Special:Preferences\" title=\"Your preferences\">Preferences</a></li><li id=\"pt-watchlist\"><a href=\"/CompCogNeuro/index.php/Special:Watchlist\" title=\"A list of pages you are monitoring for changes [l]\" accesskey=\"l\">Watchlist</a></li><li id=\"pt-mycontris\"><a href=\"/CompCogNeuro/index.php/Special:Contributions/Oreilly\" title=\"A list of your contributions [y]\" accesskey=\"y\">Contributions</a></li><li id=\"pt-logout\"><a href=\"/CompCogNeuro/index.php?title=Special:UserLogout&amp;returnto=CCNBook%2FSims%2FNetworks%2FCateg\" title=\"Log out\">Log out</a></li>						</ul>
					</div>
									<div id=\"left-navigation\">
										<div id=\"p-namespaces\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-namespaces-label\">
						<h3 id=\"p-namespaces-label\">Namespaces</h3>
						<ul>
															<li id=\"ca-nstab-main\" class=\"selected\"><span><a href=\"/CompCogNeuro/index.php/CCNBook/Sims/Networks/Categ\" title=\"View the content page [c]\" accesskey=\"c\">Page</a></span></li>
															<li id=\"ca-talk\" class=\"new\"><span><a href=\"/CompCogNeuro/index.php?title=Talk:CCNBook/Sims/Networks/Categ&amp;action=edit&amp;redlink=1\" title=\"Discussion about the content page [t]\" accesskey=\"t\" rel=\"discussion\">Discussion</a></span></li>
													</ul>
					</div>
										<div id=\"p-variants\" role=\"navigation\" class=\"vectorMenu emptyPortlet\" aria-labelledby=\"p-variants-label\">
												<h3 id=\"p-variants-label\">
							<span>Variants</span><a href=\"#\"></a>
						</h3>

						<div class=\"menu\">
							<ul>
															</ul>
						</div>
					</div>
									</div>
				<div id=\"right-navigation\">
										<div id=\"p-views\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-views-label\">
						<h3 id=\"p-views-label\">Views</h3>
						<ul>
															<li id=\"ca-view\" class=\"selected\"><span><a href=\"/CompCogNeuro/index.php/CCNBook/Sims/Networks/Categ\">Read</a></span></li>
															<li id=\"ca-edit\"><span><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Categ&amp;action=edit\" title=\"Edit this page [e]\" accesskey=\"e\">Edit</a></span></li>
															<li id=\"ca-history\" class=\"collapsible\"><span><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Categ&amp;action=history\" title=\"Past revisions of this page [h]\" accesskey=\"h\">View history</a></span></li>
															<li id=\"ca-unwatch\" class=\"icon\"><span><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Categ&amp;action=unwatch&amp;token=edcf172de6b4d892d2b38ba8aabfaf665a66c6c3%2B%5C\" title=\"Remove this page from your watchlist [w]\" accesskey=\"w\">Unwatch</a></span></li>
													</ul>
					</div>
										<div id=\"p-cactions\" role=\"navigation\" class=\"vectorMenu\" aria-labelledby=\"p-cactions-label\">
						<h3 id=\"p-cactions-label\"><span>More</span><a href=\"#\"></a></h3>

						<div class=\"menu\">
							<ul>
																	<li id=\"ca-delete\">
										<a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Categ&amp;action=delete\" title=\"Delete this page [d]\" accesskey=\"d\">Delete</a>
									</li>
																	<li id=\"ca-move\">
										<a href=\"/CompCogNeuro/index.php/Special:MovePage/CCNBook/Sims/Networks/Categ\" title=\"Move this page [m]\" accesskey=\"m\">Move</a>
									</li>
																	<li id=\"ca-protect\">
										<a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Categ&amp;action=protect\" title=\"Protect this page [=]\" accesskey=\"=\">Protect</a>
									</li>
																	<li id=\"ca-purge\">
										<a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Categ&amp;action=purge\">Refresh</a>
									</li>
															</ul>
						</div>
					</div>
										<div id=\"p-search\" role=\"search\">
						<h3>
							<label for=\"searchInput\">Search</label>
						</h3>

						<form action=\"/CompCogNeuro/index.php\" id=\"searchform\">
							<div id=\"simpleSearch\">
							<input type=\"search\" name=\"search\" placeholder=\"Search\" title=\"Search Computational Cognitive Neuroscience Wiki [f]\" accesskey=\"f\" id=\"searchInput\"><input type=\"hidden\" value=\"Special:Search\" name=\"title\"><input type=\"submit\" name=\"fulltext\" value=\"Search\" title=\"Search the pages for this text\" id=\"mw-searchButton\" class=\"searchButton mw-fallbackSearchButton\"><input type=\"submit\" name=\"go\" value=\"Go\" title=\"Go to a page with this exact name if it exists\" id=\"searchButton\" class=\"searchButton\">							</div>
						</form>
					</div>
									</div>
			</div>
			<div id=\"mw-panel\">
				<div id=\"p-logo\" role=\"banner\"><a class=\"mw-wiki-logo\" href=\"/CompCogNeuro/index.php/Main_Page\" title=\"Visit the main page\"></a></div>
						<div class=\"portal\" role=\"navigation\" id=\"p-navigation\" aria-labelledby=\"p-navigation-label\">
			<h3 id=\"p-navigation-label\">Navigation</h3>

			<div class=\"body\">
									<ul>
						<li id=\"n-mainpage-description\"><a href=\"/CompCogNeuro/index.php/Main_Page\" title=\"Visit the main page [z]\" accesskey=\"z\">Main page</a></li><li id=\"n-CCN-Book\"><a href=\"/CompCogNeuro/index.php/CCNBook/Main\">CCN Book</a></li><li id=\"n-recentchanges\"><a href=\"/CompCogNeuro/index.php/Special:RecentChanges\" title=\"A list of recent changes in the wiki [r]\" accesskey=\"r\">Recent changes</a></li><li id=\"n-randompage\"><a href=\"/CompCogNeuro/index.php/Special:Random\" title=\"Load a random page [x]\" accesskey=\"x\">Random page</a></li><li id=\"n-help\"><a href=\"https://www.mediawiki.org/wiki/Special:MyLanguage/Help:Contents\" title=\"The place to find out\">Help</a></li>					</ul>
							</div>
		</div>
			<div class=\"portal\" role=\"navigation\" id=\"p-tb\" aria-labelledby=\"p-tb-label\">
			<h3 id=\"p-tb-label\">Tools</h3>

			<div class=\"body\">
									<ul>
						<li id=\"t-whatlinkshere\"><a href=\"/CompCogNeuro/index.php/Special:WhatLinksHere/CCNBook/Sims/Networks/Categ\" title=\"A list of all wiki pages that link here [j]\" accesskey=\"j\">What links here</a></li><li id=\"t-recentchangeslinked\"><a href=\"/CompCogNeuro/index.php/Special:RecentChangesLinked/CCNBook/Sims/Networks/Categ\" title=\"Recent changes in pages linked from this page [k]\" accesskey=\"k\">Related changes</a></li><li id=\"t-upload\"><a href=\"/CompCogNeuro/index.php/Special:Upload\" title=\"Upload files [u]\" accesskey=\"u\">Upload file</a></li><li id=\"t-specialpages\"><a href=\"/CompCogNeuro/index.php/Special:SpecialPages\" title=\"A list of all special pages [q]\" accesskey=\"q\">Special pages</a></li><li id=\"t-permalink\"><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Categ&amp;oldid=5445\" title=\"Permanent link to this revision of the page\">Permanent link</a></li><li id=\"t-info\"><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Categ&amp;action=info\" title=\"More information about this page\">Page information</a></li><li id=\"t-smwbrowselink\"><a href=\"/CompCogNeuro/index.php/Special:Browse/CCNBook/Sims/Networks/Categ\" rel=\"smw-browse\">Browse properties</a></li>					</ul>
							</div>
		</div>
			<div class=\"portal\" role=\"navigation\" id=\"p-coll-print_export\" aria-labelledby=\"p-coll-print_export-label\">
			<h3 id=\"p-coll-print_export-label\">Print/export</h3>

			<div class=\"body\">
									<ul>
						<li id=\"coll-create_a_book\"><a href=\"/CompCogNeuro/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=CCNBook%2FSims%2FNetworks%2FCateg\">Create a book</a></li><li id=\"coll-download-as-rl\"><a href=\"/CompCogNeuro/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=CCNBook%2FSims%2FNetworks%2FCateg&amp;oldid=5445&amp;writer=rl\">Download as PDF</a></li><li id=\"t-print\"><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Networks/Categ&amp;printable=yes\" title=\"Printable version of this page [p]\" accesskey=\"p\">Printable version</a></li>					</ul>
							</div>
		</div>
				</div>
		</div>
		<div id=\"footer\" role=\"contentinfo\">
							<ul id=\"footer-info\">
											<li id=\"footer-info-lastmod\"> This page was last modified on 5 August 2016, at 15:06.</li>
									</ul>
							<ul id=\"footer-places\">
											<li id=\"footer-places-privacy\"><a href=\"/CompCogNeuro/index.php/Project:Privacy_policy\" title=\"Project:Privacy policy\">Privacy policy</a></li>
											<li id=\"footer-places-about\"><a href=\"/CompCogNeuro/index.php/Project:About\" title=\"Project:About\">About Computational Cognitive Neuroscience Wiki</a></li>
											<li id=\"footer-places-disclaimer\"><a href=\"/CompCogNeuro/index.php/Project:General_disclaimer\" title=\"Project:General disclaimer\">Disclaimers</a></li>
									</ul>
										<ul id=\"footer-icons\" class=\"noprint\">
											<li id=\"footer-copyrightico\">
							<a rel=\"license\" href=\"https://creativecommons.org/licenses/by-sa/3.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://licensebuttons.net/l/by-sa/3.0/88x31.png\"></a><br>This work is licensed under a <a rel=\"license\" href=\"https://creativecommons.org/licenses/by-sa/3.0/\">Creative Commons Attribution-ShareAlike 3.0 Unported License</a>.						</li>
											<li id=\"footer-poweredbyico\">
							<a href=\"//www.mediawiki.org/\"><img src=\"/CompCogNeuro/resources/assets/poweredby_mediawiki_88x31.png\" alt=\"Powered by MediaWiki\" srcset=\"/CompCogNeuro/resources/assets/poweredby_mediawiki_132x47.png 1.5x, /CompCogNeuro/resources/assets/poweredby_mediawiki_176x62.png 2x\" width=\"88\" height=\"31\"></a><a href=\"https://www.semantic-mediawiki.org/wiki/Semantic_MediaWiki\"><img src=\"/CompCogNeuro/extensions/SemanticMediaWiki/resources/images/smw_button.png\" alt=\"Powered by Semantic MediaWiki\" width=\"88\" height=\"31\"></a>						</li>
									</ul>
						<div style=\"clear:both\"></div>
		</div>
		<script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.loader.state({\"user\":\"ready\",\"user.groups\":\"ready\"});mw.loader.load([\"mediawiki.toc\",\"mediawiki.action.view.postEdit\",\"site\",\"mediawiki.user\",\"mediawiki.hidpi\",\"mediawiki.page.ready\",\"mediawiki.searchSuggest\",\"mediawiki.page.watch.ajax\",\"mediawiki.action.view.rightClickEdit\",\"ext.headertabs\"]);
} );</script><script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({\"wgBackendResponseTime\":141});
} );</script>
	

</body></html>";
  };
  taDoc @[1] {
   name="ChangeLog";
   desc=;
   web_doc=0;
   wiki=;
   url="local";
   full_url="local";
   text_size=1;
   text="<html>
<head>ChangeLog</head>
<body>
<h1>ChangeLog</h1>
<ul>


<li>Mon Jan 22 22:25:18 2018 version: 8.0.7 user: oreilly file_name: <code>face_categ.proj</code> <br>
Project updated on wiki: CCN changes: 8.5.1 update: use OUTPUT instead of TARGET for layer_type so it doesn't clamp layers in the plus phase



<li>Mon Jan 22 14:17:45 2018 version: 8.0.6 user: oreilly file_name: <code>face_categ.proj</code> <br>
svn rev: 415364 switch TARGET -> OUTPUT so plus phase is not clamped



<li>Thu Jan 11 03:01:32 2018 version: 8.0.5 user: oreilly file_name: <code>face_categ.proj</code> <br>
Project updated on wiki: CCN changes: 8.5 update, no changes



<li>Fri Jan 13 03:03:13 2017 version: 8.0.4 user: oreilly file_name: <code>face_categ.proj</code> <br>
Project updated on wiki: CCN changes: 10446 8.0.4 update



<li>Thu Jan 12 13:08:37 2017 version: 8.0.3 user: oreilly file_name: <code>face_categ.proj</code> <br>
Project updated on wiki: CCN changes: 8.0.4 update -- no changes



<li>Tue Sep  6 03:13:15 2016 version: 8.0.2 user: oreilly file_name: <code>face_categ.proj</code> <br>
Project updated on wiki: CCN changes: current upload


<li>Mon Aug 15 23:52:35 2016 version: 8.0.1 user: oreilly file_name: <code>face_categ.proj</code> <br>
Updated to 8.0 specs and programs.  No major changes.  It auto-turns off the Network.times.cycle_qtr at the start so that you always see cycle-level updates (at 1msec level..)
</ul>
</body>
</html>
";
   html_text="<html>
<head>ChangeLog</head>
<body>
<h1>ChangeLog</h1>
<ul>
<P>
<P>
<li>Mon Jan 22 22:25:18 2018 version: 8.0.7 user: oreilly file_name: <code>face_categ.proj</code> <br>
Project updated on wiki: CCN changes: 8.5.1 update: use OUTPUT instead of TARGET for layer_type so it doesn't clamp layers in the plus phase
<P>
<P>
<P>
<li>Mon Jan 22 14:17:45 2018 version: 8.0.6 user: oreilly file_name: <code>face_categ.proj</code> <br>
svn rev: 415364 switch TARGET -> OUTPUT so plus phase is not clamped
<P>
<P>
<P>
<li>Thu Jan 11 03:01:32 2018 version: 8.0.5 user: oreilly file_name: <code>face_categ.proj</code> <br>
Project updated on wiki: CCN changes: 8.5 update, no changes
<P>
<P>
<P>
<li>Fri Jan 13 03:03:13 2017 version: 8.0.4 user: oreilly file_name: <code>face_categ.proj</code> <br>
Project updated on wiki: CCN changes: 10446 8.0.4 update
<P>
<P>
<P>
<li>Thu Jan 12 13:08:37 2017 version: 8.0.3 user: oreilly file_name: <code>face_categ.proj</code> <br>
Project updated on wiki: CCN changes: 8.0.4 update -- no changes
<P>
<P>
<P>
<li>Tue Sep  6 03:13:15 2016 version: 8.0.2 user: oreilly file_name: <code>face_categ.proj</code> <br>
Project updated on wiki: CCN changes: current upload
<P>
<P>
<li>Mon Aug 15 23:52:35 2016 version: 8.0.1 user: oreilly file_name: <code>face_categ.proj</code> <br>
Updated to 8.0 specs and programs.  No major changes.  It auto-turns off the Network.times.cycle_qtr at the start so that you always see cycle-level updates (at 1msec level..)
</ul>
</body>
</html>
";
  };
 };
 wizards {
  name="wizards";
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="NO_CLIP": value=1: val_type_fixed=0: };
   };
   name="LeabraWizard_1";
  };
 };
 ctrl_panels {
  name="ctrl_panels";
  el_typ=ControlPanel;
  el_def=0;
  master_and_clones=0;
  ControlPanel @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="user_pinned": value=1: val_type_fixed=0: };
   };
   name="ControlPanel";
   cp_state=REGULAR;
   updt_while_running=0;
   desc="master control for the Transform project";
   mbrs {
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
    ControlPanelMember @[0] {
     label="cluster_data_src";
     short_label=1;
     cust_label=0;
     desc="data table to use as a source for cluster plot -- options are Faces, PartialFaces (both are input data), or TrialOutputData which records the last responses of the network";
     cust_desc=1;
     base=.programs[0].args[0]$$;
     mbr=ProgVar::object_val;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[1] {
     label="cluster_layer";
     short_label=0;
     cust_label=1;
     desc="what layer to cluster on in the source data";
     cust_desc=1;
     base=.programs[0].args[1].dyn_enum_val$$;
     mbr=DynEnum::value;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[2] {
     label="input_type";
     short_label=1;
     cust_label=0;
     desc=;
     cust_desc=0;
     base=.programs.gp[0][0].vars[6].dyn_enum_val$$;
     mbr=DynEnum::value;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="": range="": notes="": };
    };
    ControlPanelMember @[3] {
     label="Input_data";
     short_label=0;
     cust_label=1;
     desc="table of patterns to present to the network, one row at a time";
     cust_desc=0;
     base=.programs.gp[0][0].vars[0]$$;
     mbr=ProgVar::object_val;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="": range="": notes="": };
    };
    ControlPanelMember_Group @.gp[0] {
     name="Net_Data";
     el_typ=ControlPanelMember;
     el_def=0;
     ControlPanelMember @[0] {
      label="Localist_Network_trial";
      short_label=0;
      cust_label=1;
      desc=" trial counter: number of external input patterns that have been presented in the current epoch (updated by program)";
      cust_desc=0;
      base=.networks[0]$$;
      mbr=Network::trial;
      data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="": range="0:1:0.1": notes="": };
     };
     ControlPanelMember @[1] {
      label="Localist_Network_trial_name";
      short_label=0;
      cust_label=1;
      desc=" name associated with the current trial (e.g., name of input pattern, typically set by a LayerWriter)";
      cust_desc=0;
      base=$.networks[0]$;
      mbr=Network::trial_name;
      data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="": range="0:1:0.1": notes="": };
     };
    };
   };
   mths {
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
    ControlPanelMethod @[0] {
     label="Init";
     short_label=0;
     cust_label=0;
     desc=" run init_code, global variables retain current values unless reset in the init_code";
     cust_desc=0;
     base=.programs.gp[0][0]$$;
     mth=Program::Init;
    };
    ControlPanelMethod @[1] {
     label="Run";
     short_label=0;
     cust_label=0;
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.programs.gp[0][0]$;
     mth=Program::Run_Gui;
    };
    ControlPanelMethod @[2] {
     label="Step";
     short_label=0;
     cust_label=0;
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.programs.gp[0][0]$;
     mth=Program::Step_Gui;
    };
    ControlPanelMethod @[3] {
     label="Stop";
     short_label=0;
     cust_label=0;
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     cust_desc=0;
     base=$.programs.gp[0][0]$;
     mth=Program::Stop;
    };
    ControlPanelMethod @[4] {
     label="ClusterPlot_Run";
     short_label=0;
     cust_label=1;
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=.programs[0]$$;
     mth=Program::Run_Gui;
    };
   };
  };
  ClusterRun @[1] {
   name="ClusterRun";
   cp_state=REGULAR;
   updt_while_running=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
   };
   mths {
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   search_algos {
    name="search_algos";
    el_typ=ParamSearchAlgo;
    el_def=0;
   };
   use_search_algo=0;
   cur_search_algo=NULL;
   set_proj_name=0;
   proj_name=;
   auto_updt_interval=10;
   auto_updt_timeout=30;
   cluster=;
   clusters=;
   users=;
   last_submit_time=;
   notes=;
   label=;
   extra_files=;
   svn_repo=;
   repo_url=;
   queue=;
   run_time=;
   exe_cmd="emergent";
   ram_gb=0;
   n_threads=1;
   use_cuda=0;
   use_mpi=0;
   mpi_nodes=10;
   mpi_per_node=1;
   parallel_batch=0;
   pb_batches=10;
   pb_n_batches_per=1;
   nowin_x=0;
   enable_kill=0;
   enable_load=0;
   enable_notes=0;
  };
 };
 active_params {
  name="active_params";
  el_typ=ParamSet;
  el_def=0;
  master_and_clones=0;
 };
 archived_params {
  name="archived_params";
  el_typ=ParamSet;
  el_def=0;
  master_and_clones=0;
 };
 data {
  name="data";
  el_typ=DataTable;
  el_def=0;
  save_tables=1;
  DataTable_Group @.gp[0] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @[0] {
    name="Faces";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [12] "Alberto_happy";"Alberto_sad";"Betty_happy";"Betty_sad";"Lisa_happy";"Lisa_sad";"Mark_happy";"Mark_sad";"Wendy_happy";"Wendy_sad";
"Zane_happy";"Zane_sad";      };
     };
     float_Data @[1] {
      name="Input";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 16;16;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [16 16 12] 0;0;0;0;0;1;1;1;1;1;
1;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;1;0;0;0;1;
1;0;0;0;1;0;0;0;0;0;
1;0;0;0;1;0;0;1;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;1;1;0;0;0;0;1;1;0;
0;0;0;1;1;0;0;1;1;0;
0;0;0;1;0;0;0;0;0;1;
1;0;0;1;1;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;0;
1;0;1;0;1;0;0;1;0;1;
0;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;1;
1;1;1;1;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;1;1;1;1;1;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;0;0;0;1;0;0;0;
0;1;1;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;1;1;0;
0;0;0;1;1;0;0;0;0;1;
1;0;0;1;1;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;1;
1;0;0;0;0;1;0;0;0;0;
0;1;1;0;0;0;1;0;0;0;
1;0;0;1;0;0;0;1;0;0;
0;0;1;0;1;1;0;0;0;0;
1;1;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;1;1;1;1;1;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;1;0;0;0;1;1;
1;1;0;0;0;1;0;1;0;1;
0;1;0;1;0;0;0;0;1;0;
1;0;1;0;0;0;1;0;1;0;
0;1;1;0;0;1;0;1;0;0;
0;1;0;1;0;0;1;0;0;1;
0;1;0;0;1;0;0;0;1;1;
0;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;1;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
1;1;0;0;0;1;0;0;0;0;
1;1;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;1;0;1;0;1;0;
1;0;1;0;0;0;0;0;0;1;
0;1;0;0;0;1;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;1;1;1;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
1;0;0;0;1;1;1;1;0;0;
0;1;0;1;0;1;0;1;0;1;
0;0;0;0;1;0;1;0;1;0;
0;0;1;0;1;0;1;0;0;1;
0;1;0;1;0;0;0;1;0;1;
0;0;0;1;1;0;0;1;0;0;
1;0;0;0;1;1;0;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;1;1;0;0;
0;1;0;0;0;0;1;1;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;1;
0;0;1;0;1;0;0;0;1;0;
0;0;0;0;0;1;1;1;0;0;
0;1;1;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;1;0;0;0;
1;1;1;1;0;0;0;1;0;1;
0;1;0;1;0;1;0;0;0;0;
1;0;1;0;1;0;0;0;1;0;
1;0;0;1;1;0;0;1;0;1;
0;0;0;1;0;1;0;0;1;0;
0;1;0;1;0;0;1;0;0;0;
1;1;0;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;1;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;1;1;0;0;0;1;0;0;
0;0;1;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;1;1;0;1;0;
1;0;1;0;1;1;0;0;0;0;
0;1;0;1;0;0;0;1;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
1;1;1;1;0;0;0;0;0;0;
1;0;1;0;0;0;1;1;1;1;
0;0;0;1;0;1;0;1;0;1;
0;1;0;0;0;0;1;0;1;0;
1;0;0;0;1;0;1;0;1;0;
0;1;0;1;0;1;0;0;0;1;
0;1;0;0;0;1;1;0;0;1;
0;0;1;0;0;0;1;1;0;0;
0;0;0;0;0;0;1;1;0;0;
0;0;0;1;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;1;1;
0;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;1;0;1;0;0;0;
1;0;0;0;0;0;0;1;1;1;
0;0;0;1;1;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;1;1;1;1;
0;0;0;0;0;0;0;0;0;0;
0;1;1;1;1;1;1;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;1;0;0;0;1;1;0;0;0;
1;0;0;0;0;0;1;0;0;0;
1;0;0;1;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;1;1;0;0;0;0;1;
0;0;0;1;1;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;1;
1;0;0;0;0;1;0;0;0;0;
0;1;1;0;0;1;1;0;1;0;
1;0;0;1;0;1;0;1;1;0;
0;0;1;0;0;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;1;1;1;1;1;1;0;0;0;
0;0;0;0;0;0;0;1;1;1;
1;1;1;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;1;0;0;
1;0;0;1;0;0;1;0;0;0;
0;0;1;0;0;0;0;1;1;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;1;
1;0;0;0;0;1;0;0;0;1;
1;0;0;0;0;1;0;0;0;0;
0;1;1;0;0;1;1;0;0;0;
0;1;0;0;0;0;0;1;1;0;
0;1;1;0;0;0;1;0;0;1;
0;0;0;1;1;0;0;0;1;0;
1;1;0;0;0;0;1;1;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;1;1;1;
1;1;1;0;0;0;0;0;0;1;
1;1;0;0;1;1;1;1;0;0;
1;1;1;0;0;0;0;1;0;1;
0;0;0;0;1;0;1;0;0;0;
0;0;1;0;1;0;0;1;1;0;
0;1;0;1;0;0;0;0;0;1;
0;0;1;0;0;1;0;1;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;1;1;0;0;
0;1;0;0;0;0;1;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;0;1;1;0;0;0;0;1;1;
1;0;1;0;1;0;1;0;1;1;
0;0;0;0;0;1;0;1;0;0;
0;1;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;1;1;1;
1;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;1;1;0;0;
1;1;1;1;0;0;1;1;1;0;
0;0;0;1;0;1;0;0;0;0;
1;1;1;0;0;0;0;0;1;0;
1;0;1;0;0;1;0;1;0;1;
0;0;0;0;0;1;0;0;0;1;
1;0;0;1;0;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;1;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;1;1;0;0;0;1;0;0;
0;0;1;1;0;0;0;0;1;1;
0;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;1;0;0;1;0;
1;0;0;0;1;1;0;0;0;0;
0;1;1;1;0;0;0;1;1;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;1;1;1;1;1;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;1;1;1;1;
1;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;1;0;0;0;1;
1;0;0;0;1;0;0;0;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;1;1;0;0;0;0;1;1;0;
0;0;0;1;1;0;0;1;1;0;
0;0;0;1;0;0;0;0;0;1;
1;0;0;1;1;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;0;
1;0;1;0;1;0;0;1;0;1;
0;1;0;0;0;0;1;0;0;1;
0;0;0;0;1;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;1;1;1;1;1;1;
1;1;0;0;0;0;0;0;0;0;
0;1;1;1;1;1;1;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;0;0;0;0;1;0;0;
0;1;1;0;0;0;1;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;1;1;0;
0;0;0;1;1;0;0;0;0;1;
1;0;0;1;1;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;1;
1;0;0;0;0;1;0;0;0;0;
0;1;1;0;0;0;1;0;0;0;
1;0;0;1;0;0;0;1;0;0;
0;0;1;0;1;1;0;0;0;0;
1;1;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;1;1;1;1;1;1;0;0;
0;0;      };
     };
     float_Data @[2] {
      name="Emotion";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=7;
      matrix_col_width=10;
      ar {
       name="ar";
      [2 1 12] 1;0;0;1;1;0;0;1;1;0;
0;1;1;0;0;1;1;0;0;1;
1;0;0;1;      };
     };
     float_Data @[3] {
      name="Gender";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=6;
      matrix_col_width=10;
      ar {
       name="ar";
      [2 1 12] 0;1;0;1;1;0;1;0;1;0;
1;0;0;1;0;1;1;0;1;0;
0;1;0;1;      };
     };
     float_Data @[4] {
      name="Identity";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 10;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=10;
      matrix_col_width=10;
      ar {
       name="ar";
      [10 1 12] 1;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [12] 0;1;2;3;4;5;6;7;8;9;
10;11;    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[1] {
    name="PartialFaces";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [12] "Alberto_happy";"Alberto_sad";"Betty_happy";"Betty_sad";"Lisa_happy";"Lisa_sad";"Mark_happy";"Mark_sad";"Wendy_happy";"Wendy_sad";
"Zane_happy";"Zane_sad";      };
     };
     float_Data @[1] {
      name="Input";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 16;16;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [16 16 12] 0;0;0;0;0;0;1;1;1;1;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;1;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;1;
1;0;0;1;0;0;0;0;0;1;
0;0;0;0;0;0;1;0;0;0;
0;0;1;0;1;0;0;0;0;1;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;1;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;1;
0;0;1;1;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;1;1;0;
0;0;0;1;1;0;0;0;0;1;
1;0;0;1;0;0;0;0;0;1;
0;0;0;0;0;1;0;0;0;1;
1;0;0;0;0;1;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
0;1;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;1;1;1;0;1;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
1;1;0;0;0;1;0;1;0;1;
0;1;0;1;0;0;0;0;1;0;
1;0;1;0;0;0;0;0;1;0;
0;0;1;0;0;1;0;1;0;0;
0;1;0;1;0;0;1;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;1;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;0;0;0;1;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;1;1;0;1;0;0;
0;1;0;1;0;1;0;0;0;0;
0;0;0;0;1;0;1;0;0;0;
0;0;0;0;1;0;0;0;0;1;
0;0;0;1;0;0;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
1;0;0;0;1;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;1;1;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;1;0;1;0;0;0;1;0;
0;0;0;0;0;1;0;1;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;1;
1;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;1;0;0;0;
1;0;1;1;0;0;0;1;0;1;
0;1;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
1;0;0;1;0;0;0;1;0;1;
0;0;0;0;0;0;0;0;1;0;
0;1;0;1;0;0;1;0;0;0;
1;1;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;0;1;1;
0;0;0;0;1;0;1;0;1;0;
1;0;0;0;1;1;0;0;0;0;
0;1;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
1;1;1;1;0;0;0;0;0;0;
1;0;0;0;0;0;1;1;0;1;
0;0;0;1;0;0;0;1;0;1;
0;1;0;0;0;0;0;0;1;0;
1;0;0;0;1;0;1;0;1;0;
0;1;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;1;0;0;0;1;1;0;0;
0;0;0;0;0;0;1;1;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;1;1;
0;0;0;1;0;0;0;0;1;1;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;1;1;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;1;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;1;1;1;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;1;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
1;0;0;1;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;0;
1;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;1;0;1;0;1;1;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;1;1;0;1;1;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;1;0;0;0;0;1;1;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;1;0;0;0;1;
1;0;0;0;0;1;0;0;0;0;
0;1;1;0;0;1;0;0;0;0;
0;1;0;0;0;0;0;1;0;0;
0;1;1;0;0;0;1;0;0;1;
0;0;0;1;0;0;0;0;0;0;
1;0;0;0;0;0;1;1;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;1;0;1;
1;1;0;0;0;0;0;0;0;1;
0;1;0;0;1;1;1;1;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;1;0;0;0;
0;0;0;0;1;0;0;1;1;0;
0;0;0;1;0;0;0;0;0;0;
0;0;1;0;0;1;0;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;1;0;0;0;0;1;1;0;0;
0;0;1;1;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;1;
1;0;1;0;0;0;1;0;1;1;
0;0;0;0;0;1;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;1;0;1;
1;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;1;0;0;
1;1;0;1;0;0;1;0;1;0;
0;0;0;1;0;1;0;0;0;0;
1;1;1;0;0;0;0;0;1;0;
1;0;0;0;0;1;0;0;0;1;
0;0;0;0;0;1;0;0;0;1;
1;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;1;0;0;0;0;0;1;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;1;0;0;0;0;1;0;0;
0;0;1;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;1;1;0;0;1;0;
1;0;0;0;1;1;0;0;0;0;
0;0;0;1;0;0;0;1;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;1;1;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;1;1;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;1;0;0;0;1;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;1;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;1;0;
0;0;0;0;1;0;0;1;1;0;
0;0;0;1;0;0;0;0;0;0;
1;0;0;1;0;0;0;0;0;1;
0;0;0;0;0;0;1;0;0;0;
1;0;1;0;1;0;0;1;0;1;
0;0;0;0;0;0;1;0;0;1;
0;0;0;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;1;0;1;0;0;1;
1;1;0;0;0;0;0;0;0;0;
0;1;0;1;1;1;1;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;1;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;1;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;1;0;0;0;0;0;1;
1;0;0;1;0;0;0;0;0;1;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;1;1;0;0;0;1;0;0;0;
1;0;0;1;0;0;0;1;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;1;0;1;1;1;0;1;0;0;
0;0;      };
     };
     float_Data @[2] {
      name="Emotion";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=7;
      matrix_col_width=10;
      ar {
       name="ar";
      [2 1 12] 1;0;0;1;1;0;0;1;1;0;
0;1;1;0;0;1;1;0;0;1;
1;0;0;1;      };
     };
     float_Data @[3] {
      name="Gender";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=6;
      matrix_col_width=10;
      ar {
       name="ar";
      [2 1 12] 0;1;0;1;1;0;1;0;1;0;
1;0;0;1;0;1;1;0;1;0;
0;1;0;1;      };
     };
     float_Data @[4] {
      name="Identity";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 10;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=10;
      matrix_col_width=10;
      ar {
       name="ar";
      [10 1 12] 1;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [12] 0;1;2;3;4;5;6;7;8;9;
10;11;    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
  };
  DataTable_Group @.gp[1] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @[0] {
    name="EpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @[1] {
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[2] {
      name="avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[3] {
      name="cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[4] {
      name="pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[5] {
      name="pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[6] {
      name="avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     float_Data @[7] {
      name="avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
     };
     float_Data @[8] {
      name="avg_ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
     };
     float_Data @[9] {
      name="avg_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     float_Data @[10] {
      name="epoch_time_tot";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @[11] {
      name="epoch_time_usr";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @[12] {
      name="Emotio_lay_avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[13] {
      name="Gender_lay_avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[14] {
      name="Identi_lay_avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[15] {
      name="Emotio_lay_cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[16] {
      name="Gender_lay_cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[17] {
      name="Identi_lay_cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[18] {
      name="Emotio_lay_pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[19] {
      name="Gender_lay_pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[20] {
      name="Identi_lay_pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[21] {
      name="Emotio_lay_pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[22] {
      name="Gender_lay_pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[23] {
      name="Identi_lay_pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[24] {
      name="Emotio_lay_avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
     };
     float_Data @[25] {
      name="Gender_lay_avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
     };
     float_Data @[26] {
      name="Identi_lay_avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
     };
     float_Data @[27] {
      name="Emotio_lay_avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
     };
     float_Data @[28] {
      name="Gender_lay_avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
     };
     float_Data @[29] {
      name="Identi_lay_avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
     };
     float_Data @[30] {
      name="net_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     float_Data @[31] {
      name="net_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
     };
     float_Data @[32] {
      name="net_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=20;
      matrix_col_width=10;
     };
     float_Data @[33] {
      name="Emotion_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=20;
      matrix_col_width=10;
     };
     float_Data @[34] {
      name="Gender_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @[35] {
      name="Identity_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
     };
     float_Data @[36] {
      name="Emotion_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=26;
      matrix_col_width=10;
     };
     float_Data @[37] {
      name="Gender_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=25;
      matrix_col_width=10;
     };
     float_Data @[38] {
      name="Identity_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=27;
      matrix_col_width=10;
     };
     float_Data @[39] {
      name="Emotion_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=24;
      matrix_col_width=10;
     };
     float_Data @[40] {
      name="Gender_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
     };
     float_Data @[41] {
      name="Identity_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=25;
      matrix_col_width=10;
     };
     float_Data @[42] {
      name="Emotion_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[43] {
      name="Gender_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
     };
     float_Data @[44] {
      name="Identity_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @[45] {
      name="Emotion_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @[46] {
      name="Gender_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @[47] {
      name="Identity_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     float_Data @[48] {
      name="Emotion_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     float_Data @[49] {
      name="Gender_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @[50] {
      name="Identity_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
     };
     float_Data @[51] {
      name="Emotio_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=13;
      matrix_col_width=10;
     };
     float_Data @[52] {
      name="Gender_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=13;
      matrix_col_width=10;
     };
     float_Data @[53] {
      name="Identi_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=13;
      matrix_col_width=10;
     };
     float_Data @[54] {
      name="Emotio_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @[55] {
      name="Gender_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @[56] {
      name="Identi_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @[57] {
      name="Emotio_Fm_Input_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
     };
     float_Data @[58] {
      name="Gender_Fm_Input_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
     };
     float_Data @[59] {
      name="Identi_Fm_Input_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[1] {
    name="TrialOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      name="trial";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [9] 0;1;2;3;4;5;6;7;8;      };
     };
     String_Data @[1] {
      name="trial_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [9] "Alberto_happy";"Alberto_sad";"Betty_happy";"Betty_sad";"Lisa_happy";"Lisa_sad";"Mark_happy";"Mark_sad";"Wendy_happy";      };
     };
     float_Data @[2] {
      name="Emotio_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      matrix_col_width=10;
      ar {
       name="ar";
      [2 1 9] 0.93393534;0.099259861;0.080851428;0.92862195;0.92471486;0.10889823;0.23151582;0.9137668;0.92472744;0.2822414;
0.22160317;0.9284851;0.92956448;0.14814104;0.10247911;0.92794919;0.93516314;0.24139613;      };
     };
     float_Data @[3] {
      name="Gender_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 2;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      matrix_col_width=10;
      ar {
       name="ar";
      [2 1 9] 2.1684814e-26;0.9290477;8.5454195e-28;0.92811298;0.96330631;5.3312442e-39;0.96291769;3.6396036e-36;0.95496225;3.7944961e-30;
0.95943487;1.5911374e-32;5.0685669e-30;0.94876266;6.4615373e-32;0.94953424;0.95594627;2.1554242e-29;      };
     };
     float_Data @[4] {
      name="Identi_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 10;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=0;
      matrix_col_width=10;
      ar {
       name="ar";
      [10 1 9] 0.79234999;1.7201999e-31;7.2869495e-28;0.00010697028;7.2907085e-24;6.4051005e-07;9.5288296e-44;6.3058431e-44;4.4841551e-44;6.1657132e-44;
0.87076372;4.6804365e-33;4.5870836e-29;1.2239228e-05;6.0990931e-24;1.2217434e-07;4.2038954e-45;2.8025969e-45;2.8025969e-45;1.4012985e-45;
7.4086056e-38;0.89722812;0.64164162;2.1102686e-39;1.384953e-05;3.3031292e-38;4.2038954e-45;1.4012985e-45;1.4012985e-45;1.4012985e-45;
7.3620977e-34;0.91797632;0.32172903;6.7381437e-38;0.00029667234;8.0700595e-37;1.4012985e-45;1.4012985e-45;1.4012985e-45;1.4012985e-45;
1.8786069e-31;4.6384692e-05;0.89651686;6.5373684e-32;0.00055293832;7.4021265e-31;1.4012985e-45;1.4012985e-45;1.4012985e-45;1.4012985e-45;
1.0286303e-31;0.075188622;0.9047479;1.2841493e-34;0.00034399162;1.8692445e-33;1.4012985e-45;1.4012985e-45;1.4012985e-45;1.4012985e-45;
5.8206479e-07;9.3039695e-35;5.1851682e-28;0.89937729;4.054248e-30;0.00033547205;1.4012985e-45;1.4012985e-45;1.4012985e-45;1.4012985e-45;
1.5622456e-06;3.7640934e-36;1.3437702e-28;0.91075999;1.7738915e-31;0.0021486792;1.4012985e-45;1.4012985e-45;1.4012985e-45;1.4012985e-45;
2.3194198e-26;6.5426997e-05;0.0015295795;4.3954985e-34;0.87571114;4.5178689e-33;1.4012985e-45;1.4012985e-45;1.4012985e-45;1.4012985e-45;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [9] 0;1;2;3;4;5;6;7;8;    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
  };
  DataTable_Group @.gp[2] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @[0] {
    name="ClusterPlotData";
    desc=;
    data {
     name="data";
     el_typ=float_Data;
     el_def=0;
     float_Data @[0] {
      name="X";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [107] 0;0;0;0;0;9.0265503;9.0265503;14.138214;14.138214;17.743765;
14.138214;14.138214;14.138214;14.138214;17.743765;14.138214;14.138214;14.138214;9.0265503;9.0265503;
9.0265503;14.138214;14.138215;18.778351;18.778351;22.242453;18.778351;18.778351;18.778351;18.778351;
22.242453;18.778351;18.778351;18.778351;14.138215;14.138214;14.138215;18.778351;18.778351;22.778351;
18.778351;18.778351;18.778351;18.778351;22.778351;18.778351;18.778351;18.778351;14.138215;14.138214;
9.0265503;9.0265503;0;0;0;9.0265503;9.0265503;14.560906;14.560905;18.025007;
14.560905;14.560905;14.560906;14.560905;18.025007;14.560905;14.560905;14.560906;9.0265503;9.0265503;
9.0265503;14.560906;14.560906;19.420839;19.420839;22.884941;19.420839;19.420839;19.420839;19.420839;
22.884941;19.420839;19.420839;19.420839;14.560906;14.560906;14.560906;19.420839;19.420839;22.884941;
19.420839;19.420839;19.420839;19.420839;22.884941;19.420839;19.420839;19.420839;14.560906;14.560906;
9.0265503;9.0265503;0;0;0;0;0;      };
     };
     float_Data @[1] {
      name="Y";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [107] 5.5;5.5;5.5;5.5;2.5;2.5;1;1;0.5;0.5;
0.5;0.5;1;1.5;1.5;1.5;1.5;1;1;2.5;
4;4;3;3;2.5;2.5;2.5;2.5;3;3.5;
3.5;3.5;3.5;3;3;4;5;5;4.5;4.5;
4.5;4.5;5;5.5;5.5;5.5;5.5;5;5;4;
4;2.5;2.5;5.5;8.5;8.5;7;7;6.5;6.5;
6.5;6.5;7;7.5;7.5;7.5;7.5;7;7;8.5;
10;10;9;9;8.5;8.5;8.5;8.5;9;9.5;
9.5;9.5;9.5;9;9;10;11;11;10.5;10.5;
10.5;10.5;11;11.5;11.5;11.5;11.5;11;11;10;
10;8.5;8.5;5.5;5.5;5.5;5.5;      };
     };
     String_Data @[2] {
      name="Label";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [107] ;;;;;;;;;"Wendy_happy";
;;;;"Wendy_sad";;;;;;
;;;;;"Betty_happy";;;;;
"Betty_sad";;;;;;;;;"Lisa_happy";
;;;;"Lisa_sad";;;;;;
;;;;;;;;;"Alberto_happy";
;;;;"Alberto_sad";;;;;;
;;;;;"Mark_happy";;;;;
"Mark_sad";;;;;;;;;"Zane_happy";
;;;;"Zane_sad";;;;;;
;;;;;;;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [107] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
  };
 };
 programs {
  name="programs";
  el_typ=Program;
  el_def=0;
  tags=;
  desc=;
  debug_mode=0;
  Program @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[0].doc$$: };
   };
   name="ClusterPlot";
   short_nm="ClsPlt";
   tags=;
   desc=;
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=0;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=DataTable;
    el_def=0;
    DataTable @[0] {
     name="Binarized_Data";
     desc=;
     data {
      name="data";
      el_typ=int_Data;
      el_def=0;
      int_Data @[0] {
       name="trial";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
       ar {
	name="ar";
       [12] 0;1;2;3;4;5;6;7;8;9;
10;11;       };
      };
      String_Data @[1] {
       name="trial_name";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
       ar {
	name="ar";
       [12] "Alberto_happy";"Alberto_sad";"Betty_happy";"Betty_sad";"Lisa_happy";"Lisa_sad";"Mark_happy";"Mark_sad";"Wendy_happy";"Wendy_sad";
"Zane_happy";"Zane_sad";       };
      };
      float_Data @[2] {
       name="Input_act";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=1;
       cell_geom{ 16;16;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [2] ;;       };
       width=16;
       matrix_col_width=10;
       ar {
	name="ar";
       [16 16 12] 0;0;0;0;0;0.94999999;0.94999999;0.94999999;0.94999999;0.94999999;
0.94999999;0;0;0;0;0;0;0;0;0;
0.94999999;0;0;0;0;0;0;0.94999999;0;0;
0;0;0;0;0;0.94999999;0;0;0;0.94999999;
0.94999999;0;0;0;0.94999999;0;0;0;0;0;
0.94999999;0;0;0;0.94999999;0;0;0.94999999;0;0;
0;0.94999999;0;0;0;0;0.94999999;0;0;0;
0;0;0;0;0;0;0;0.94999999;0;0;
0;0.94999999;0.94999999;0;0;0;0;0.94999999;0.94999999;0;
0;0;0;0.94999999;0.94999999;0;0;0.94999999;0.94999999;0;
0;0;0;0.94999999;0;0;0;0;0;0.94999999;
0.94999999;0;0;0.94999999;0.94999999;0;0;0;0;0.94999999;
0;0;0;0;0;0.94999999;0.94999999;0;0;0;
0.94999999;0;0.94999999;0;0.94999999;0;0;0.94999999;0;0.94999999;
0;0.94999999;0;0;0;0;0.94999999;0;0;0.94999999;
0;0;0;0;0.94999999;0;0;0.94999999;0;0;
0;0;0.94999999;0;0;0;0;0;0;0;
0;0;0;0.94999999;0;0;0;0;0.94999999;0;
0;0;0;0;0;0;0;0;0;0.94999999;
0;0;0;0;0;0.94999999;0;0;0;0;
0;0;0;0;0.94999999;0;0;0;0;0;
0;0;0.94999999;0;0;0;0;0;0;0.94999999;
0;0;0;0;0;0;0;0;0;0.94999999;
0.94999999;0.94999999;0.94999999;0.94999999;0.94999999;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.94999999;0.94999999;0.94999999;0.94999999;0.94999999;0.94999999;0;0;0;
0;0;0;0;0;0;0.94999999;0;0;0;
0;0;0;0.94999999;0;0;0;0;0;0;
0;0.94999999;0;0;0.94999999;0;0;0.94999999;0;0;
0.94999999;0;0;0;0;0;0.94999999;0;0;0;
0;0.94999999;0.94999999;0;0;0;0;0.94999999;0;0;
0;0;0.94999999;0;0;0;0;0;0;0;
0;0;0;0.94999999;0;0;0;0.94999999;0.94999999;0;
0;0;0;0.94999999;0.94999999;0;0;0;0;0.94999999;
0.94999999;0;0;0.94999999;0.94999999;0;0;0;0;0.94999999;
0;0;0;0;0;0.94999999;0.94999999;0;0;0.94999999;
0.94999999;0;0;0;0;0.94999999;0;0;0;0;
0;0.94999999;0.94999999;0;0;0;0.94999999;0;0;0;
0.94999999;0;0;0.94999999;0;0;0;0.94999999;0;0;
0;0;0.94999999;0;0.94999999;0.94999999;0;0;0;0;
0.94999999;0.94999999;0;0.94999999;0;0;0;0;0.94999999;0;
0;0;0;0;0;0;0;0;0;0.94999999;
0;0;0;0;0.94999999;0;0;0;0;0;
0;0;0;0;0;0.94999999;0;0;0;0;
0;0.94999999;0;0;0;0;0;0;0;0;
0.94999999;0;0;0;0;0;0;0;0.94999999;0;
0;0;0;0;0;0.94999999;0;0;0;0;
0;0;0;0;0;0.94999999;0.94999999;0.94999999;0.94999999;0.94999999;
0.94999999;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.94999999;0;0.94999999;0;0;0;0.94999999;0.94999999;
0.94999999;0.94999999;0;0;0;0.94999999;0;0.94999999;0;0.94999999;
0;0.94999999;0;0.94999999;0;0;0;0;0.94999999;0;
0.94999999;0;0.94999999;0;0;0;0.94999999;0;0.94999999;0;
0;0.94999999;0.94999999;0;0;0.94999999;0;0.94999999;0;0;
0;0.94999999;0;0.94999999;0;0;0.94999999;0;0;0.94999999;
0;0.94999999;0;0;0.94999999;0;0;0;0.94999999;0.94999999;
0;0;0;0;0;0;0;0;0.94999999;0.94999999;
0;0;0;0;0;0.94999999;0;0;0;0.94999999;
0;0;0;0;0.94999999;0;0;0;0;0;
0.94999999;0.94999999;0;0;0;0.94999999;0;0;0;0;
0.94999999;0.94999999;0;0;0;0;0;0.94999999;0;0;
0;0;0;0;0;0;0.94999999;0;0;0;
0;0;0;0.94999999;0.94999999;0;0.94999999;0;0.94999999;0;
0.94999999;0;0.94999999;0;0;0;0;0;0;0.94999999;
0;0.94999999;0;0;0;0.94999999;0;0;0.94999999;0;
0;0;0;0;0;0.94999999;0;0;0;0;
0;0;0;0;0.94999999;0;0;0;0;0;
0;0;0.94999999;0;0;0;0;0;0;0.94999999;
0;0;0;0;0;0;0;0;0.94999999;0;
0;0;0;0;0;0.94999999;0;0;0;0;
0;0;0;0;0;0.94999999;0;0;0;0;
0.94999999;0;0;0;0;0;0;0;0;0;
0;0;0.94999999;0.94999999;0.94999999;0.94999999;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.94999999;0;
0.94999999;0;0;0;0.94999999;0.94999999;0.94999999;0.94999999;0;0;
0;0.94999999;0;0.94999999;0;0.94999999;0;0.94999999;0;0.94999999;
0;0;0;0;0.94999999;0;0.94999999;0;0.94999999;0;
0;0;0.94999999;0;0.94999999;0;0.94999999;0;0;0.94999999;
0;0.94999999;0;0.94999999;0;0;0;0.94999999;0;0.94999999;
0;0;0;0.94999999;0.94999999;0;0;0.94999999;0;0;
0.94999999;0;0;0;0.94999999;0.94999999;0;0;0;0;
0;0;0;0;0.94999999;0.94999999;0;0;0;0;
0;0.94999999;0;0;0;0.94999999;0;0;0;0;
0.94999999;0;0;0;0;0;0.94999999;0.94999999;0;0;
0;0.94999999;0;0;0;0;0.94999999;0.94999999;0;0;
0;0;0;0.94999999;0;0;0;0;0;0;
0;0;0.94999999;0;0;0;0;0;0;0.94999999;
0;0;0.94999999;0;0.94999999;0;0;0;0.94999999;0;
0;0;0;0;0;0.94999999;0.94999999;0.94999999;0;0;
0;0.94999999;0.94999999;0;0.94999999;0;0;0;0;0;
0;0.94999999;0;0;0;0;0;0;0;0;
0.94999999;0;0;0;0;0;0;0;0.94999999;0;
0;0;0;0;0;0.94999999;0;0;0;0;
0;0;0;0;0.94999999;0;0;0;0;0;
0;0.94999999;0;0;0;0;0;0;0;0;
0;0.94999999;0;0;0;0;0.94999999;0;0;0;
0;0;0;0;0;0;0;0;0.94999999;0.94999999;
0.94999999;0.94999999;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.94999999;0;0.94999999;0;0;0;
0.94999999;0.94999999;0.94999999;0.94999999;0;0;0;0.94999999;0;0.94999999;
0;0.94999999;0;0.94999999;0;0.94999999;0;0;0;0;
0.94999999;0;0.94999999;0;0.94999999;0;0;0;0.94999999;0;
0.94999999;0;0;0.94999999;0.94999999;0;0;0.94999999;0;0.94999999;
0;0;0;0.94999999;0;0.94999999;0;0;0.94999999;0;
0;0.94999999;0;0.94999999;0;0;0.94999999;0;0;0;
0.94999999;0.94999999;0;0;0;0;0;0;0;0;
0.94999999;0.94999999;0;0;0;0;0;0.94999999;0;0;
0;0.94999999;0;0;0;0;0.94999999;0;0;0;
0;0;0.94999999;0.94999999;0;0;0;0.94999999;0;0;
0;0;0.94999999;0.94999999;0;0;0;0;0.94999999;0.94999999;
0;0;0;0;0;0;0;0;0.94999999;0.94999999;
0;0;0;0;0.94999999;0.94999999;0.94999999;0;0.94999999;0;
0.94999999;0;0.94999999;0;0.94999999;0.94999999;0;0;0;0;
0;0.94999999;0;0.94999999;0;0;0;0.94999999;0;0;
0.94999999;0;0;0;0;0;0;0.94999999;0;0;
0;0;0;0;0;0;0.94999999;0;0;0;
0;0;0;0;0.94999999;0;0;0;0;0;
0;0.94999999;0;0;0;0;0;0;0;0;
0.94999999;0;0;0;0;0;0;0.94999999;0;0;
0;0;0;0;0;0;0.94999999;0;0;0;
0;0;0;0.94999999;0;0;0;0;0;0;
0;0;0;0.94999999;0;0;0;0;0.94999999;0;
0;0;0;0;0;0;0;0;0;0;
0.94999999;0.94999999;0.94999999;0.94999999;0;0;0;0;0;0;
0.94999999;0;0.94999999;0;0;0;0.94999999;0.94999999;0.94999999;0.94999999;
0;0;0;0.94999999;0;0.94999999;0;0.94999999;0;0.94999999;
0;0.94999999;0;0;0;0;0.94999999;0;0.94999999;0;
0.94999999;0;0;0;0.94999999;0;0.94999999;0;0.94999999;0;
0;0.94999999;0;0.94999999;0;0.94999999;0;0;0;0.94999999;
0;0.94999999;0;0;0;0.94999999;0.94999999;0;0;0.94999999;
0;0;0.94999999;0;0;0;0.94999999;0.94999999;0;0;
0;0;0;0;0;0;0.94999999;0.94999999;0;0;
0;0;0;0.94999999;0;0;0;0.94999999;0;0;
0;0;0.94999999;0;0;0;0;0;0.94999999;0.94999999;
0;0;0;0.94999999;0;0;0;0;0.94999999;0.94999999;
0;0;0;0;0;0.94999999;0;0;0;0;
0;0;0;0;0.94999999;0;0;0;0;0;
0;0.94999999;0;0;0.94999999;0;0.94999999;0;0;0;
0.94999999;0;0;0;0;0;0;0.94999999;0.94999999;0.94999999;
0;0;0;0.94999999;0.94999999;0;0.94999999;0;0;0;
0;0;0;0.94999999;0;0;0;0;0;0;
0;0;0.94999999;0;0;0;0;0;0;0;
0.94999999;0;0;0;0;0;0;0.94999999;0;0;
0;0;0;0;0;0;0.94999999;0;0;0;
0;0;0;0.94999999;0;0;0;0;0;0;
0;0;0.94999999;0;0;0;0;0;0;0.94999999;
0;0;0;0;0;0;0;0;0;0.94999999;
0;0;0;0;0.94999999;0;0;0;0;0;
0;0;0;0;0;0;0.94999999;0.94999999;0.94999999;0.94999999;
0;0;0;0;0;0;0;0;0;0;
0;0.94999999;0.94999999;0.94999999;0.94999999;0.94999999;0.94999999;0;0;0;
0;0;0;0;0;0;0.94999999;0;0;0;
0;0;0;0.94999999;0;0;0;0;0;0;
0;0.94999999;0;0;0;0.94999999;0.94999999;0;0;0;
0.94999999;0;0;0;0;0;0.94999999;0;0;0;
0.94999999;0;0;0.94999999;0;0;0;0.94999999;0;0;
0;0;0.94999999;0;0;0;0;0;0;0;
0;0;0;0.94999999;0;0;0;0;0.94999999;0;
0;0;0;0.94999999;0.94999999;0;0;0;0;0.94999999;
0;0;0;0.94999999;0.94999999;0;0;0;0;0.94999999;
0;0;0;0;0;0.94999999;0.94999999;0;0;0.94999999;
0.94999999;0;0;0;0;0.94999999;0;0;0;0;
0;0.94999999;0.94999999;0;0;0.94999999;0.94999999;0;0.94999999;0;
0.94999999;0;0;0.94999999;0;0.94999999;0;0.94999999;0.94999999;0;
0;0;0.94999999;0;0;0.94999999;0;0;0;0;
0.94999999;0;0;0.94999999;0;0;0;0;0.94999999;0;
0;0;0;0;0;0;0;0;0;0.94999999;
0;0;0;0;0.94999999;0;0;0;0;0;
0;0;0;0;0;0.94999999;0;0;0;0;
0;0.94999999;0;0;0;0;0;0;0;0;
0.94999999;0;0;0;0;0;0;0.94999999;0;0;
0;0;0;0;0;0;0.94999999;0;0;0;
0;0;0;0;0.94999999;0;0;0;0;0;
0;0.94999999;0;0;0;0;0;0;0;0;
0;0.94999999;0.94999999;0.94999999;0.94999999;0.94999999;0.94999999;0;0;0;
0;0;0;0;0;0;0;0.94999999;0.94999999;0.94999999;
0.94999999;0.94999999;0.94999999;0;0;0;0;0;0;0;
0;0;0.94999999;0;0;0;0;0;0;0.94999999;
0;0;0;0;0;0;0;0.94999999;0;0;
0.94999999;0;0;0.94999999;0;0;0.94999999;0;0;0;
0;0;0.94999999;0;0;0;0;0.94999999;0.94999999;0;
0;0;0;0.94999999;0;0;0;0;0.94999999;0;
0;0;0;0;0;0;0;0;0;0.94999999;
0;0;0;0;0.94999999;0;0;0;0;0.94999999;
0.94999999;0;0;0;0;0.94999999;0;0;0;0.94999999;
0.94999999;0;0;0;0;0.94999999;0;0;0;0;
0;0.94999999;0.94999999;0;0;0.94999999;0.94999999;0;0;0;
0;0.94999999;0;0;0;0;0;0.94999999;0.94999999;0;
0;0.94999999;0.94999999;0;0;0;0.94999999;0;0;0.94999999;
0;0;0;0.94999999;0.94999999;0;0;0;0.94999999;0;
0.94999999;0.94999999;0;0;0;0;0.94999999;0.94999999;0;0.94999999;
0;0;0;0;0.94999999;0;0;0;0;0;
0;0;0;0;0;0.94999999;0;0;0;0;
0.94999999;0;0;0;0;0;0;0;0;0;
0;0.94999999;0;0;0;0;0;0.94999999;0;0;
0;0;0;0;0;0;0.94999999;0;0;0;
0;0;0;0.94999999;0;0;0;0;0;0;
0;0;0.94999999;0;0;0;0;0;0;0;
0.94999999;0;0;0;0;0;0;0.94999999;0;0;
0;0;0;0;0;0;0;0.94999999;0.94999999;0.94999999;
0.94999999;0.94999999;0.94999999;0;0;0;0;0;0;0.94999999;
0.94999999;0.94999999;0;0;0.94999999;0.94999999;0.94999999;0.94999999;0;0;
0.94999999;0.94999999;0.94999999;0;0;0;0;0.94999999;0;0.94999999;
0;0;0;0;0.94999999;0;0.94999999;0;0;0;
0;0;0.94999999;0;0.94999999;0;0;0.94999999;0.94999999;0;
0;0.94999999;0;0.94999999;0;0;0;0;0;0.94999999;
0;0;0.94999999;0;0;0.94999999;0;0.94999999;0;0;
0;0;0;0;0.94999999;0.94999999;0;0;0;0;
0;0;0;0;0.94999999;0.94999999;0;0;0;0;
0;0.94999999;0;0;0;0.94999999;0;0;0;0;
0.94999999;0;0;0;0;0;0.94999999;0.94999999;0;0;
0;0.94999999;0;0;0;0;0.94999999;0.94999999;0;0;
0;0;0.94999999;0.94999999;0;0;0;0;0;0;
0;0;0.94999999;0.94999999;0;0;0;0;0.94999999;0.94999999;
0.94999999;0;0.94999999;0;0.94999999;0;0.94999999;0;0.94999999;0.94999999;
0;0;0;0;0;0.94999999;0;0.94999999;0;0;
0;0.94999999;0;0;0.94999999;0;0;0;0;0;
0;0.94999999;0;0;0;0;0;0;0;0;
0.94999999;0;0;0;0;0;0;0;0.94999999;0;
0;0;0;0;0;0.94999999;0;0;0;0;
0;0;0;0;0.94999999;0;0;0;0;0;
0;0.94999999;0;0;0;0;0;0;0;0;
0.94999999;0;0;0;0;0;0;0.94999999;0;0;
0;0;0;0;0;0;0;0.94999999;0.94999999;0.94999999;
0.94999999;0.94999999;0.94999999;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.94999999;0.94999999;0.94999999;0;0;
0.94999999;0.94999999;0.94999999;0.94999999;0;0;0.94999999;0.94999999;0.94999999;0;
0;0;0;0.94999999;0;0.94999999;0;0;0;0;
0.94999999;0.94999999;0.94999999;0;0;0;0;0;0.94999999;0;
0.94999999;0;0.94999999;0;0;0.94999999;0;0.94999999;0;0.94999999;
0;0;0;0;0;0.94999999;0;0;0;0.94999999;
0.94999999;0;0;0.94999999;0;0;0;0;0;0;
0.94999999;0.94999999;0;0;0;0;0;0;0;0;
0.94999999;0.94999999;0;0;0;0;0;0.94999999;0;0;
0;0.94999999;0;0;0;0;0.94999999;0;0;0;
0;0;0.94999999;0.94999999;0;0;0;0.94999999;0;0;
0;0;0.94999999;0.94999999;0;0;0;0;0.94999999;0.94999999;
0;0;0;0;0;0;0;0;0.94999999;0.94999999;
0;0;0;0;0.94999999;0.94999999;0;0;0.94999999;0;
0.94999999;0;0;0;0.94999999;0.94999999;0;0;0;0;
0;0.94999999;0.94999999;0.94999999;0;0;0;0.94999999;0.94999999;0;
0.94999999;0;0;0;0;0;0;0.94999999;0;0;
0;0;0;0;0;0;0.94999999;0;0;0;
0;0;0;0;0.94999999;0;0;0;0;0;
0;0.94999999;0;0;0;0;0;0;0;0;
0.94999999;0;0;0;0;0;0;0.94999999;0;0;
0;0;0;0;0;0;0.94999999;0;0;0;
0;0;0;0.94999999;0;0;0;0;0;0;
0;0;0;0.94999999;0.94999999;0.94999999;0.94999999;0.94999999;0.94999999;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0.94999999;0.94999999;0.94999999;0.94999999;0.94999999;
0.94999999;0;0;0;0;0;0;0;0;0;
0.94999999;0;0;0;0;0;0;0.94999999;0;0;
0;0;0;0;0;0.94999999;0;0;0;0.94999999;
0.94999999;0;0;0;0.94999999;0;0;0;0;0;
0;0.94999999;0;0;0.94999999;0;0;0.94999999;0;0;
0.94999999;0;0;0;0;0;0.94999999;0;0;0;
0;0;0;0;0;0;0;0.94999999;0;0;
0;0.94999999;0.94999999;0;0;0;0;0.94999999;0.94999999;0;
0;0;0;0.94999999;0.94999999;0;0;0.94999999;0.94999999;0;
0;0;0;0.94999999;0;0;0;0;0;0.94999999;
0.94999999;0;0;0.94999999;0.94999999;0;0;0;0;0.94999999;
0;0;0;0;0;0.94999999;0.94999999;0;0;0;
0.94999999;0;0.94999999;0;0.94999999;0;0;0.94999999;0;0.94999999;
0;0.94999999;0;0;0;0;0.94999999;0;0;0.94999999;
0;0;0;0;0.94999999;0;0;0.94999999;0;0;
0;0;0.94999999;0;0;0;0;0;0;0;
0;0;0;0.94999999;0;0;0;0;0;0.94999999;
0;0;0;0;0;0;0;0;0.94999999;0;
0;0;0;0;0;0.94999999;0;0;0;0;
0;0;0;0;0.94999999;0;0;0;0;0;
0;0.94999999;0;0;0;0;0;0;0;0;
0.94999999;0;0;0;0;0;0;0.94999999;0;0;
0;0;0;0;0;0;0.94999999;0;0;0;
0;0;0;0;0.94999999;0.94999999;0.94999999;0.94999999;0.94999999;0.94999999;
0.94999999;0.94999999;0;0;0;0;0;0;0;0;
0;0.94999999;0.94999999;0.94999999;0.94999999;0.94999999;0.94999999;0;0;0;
0;0;0;0;0;0;0.94999999;0;0;0;
0;0;0;0.94999999;0;0;0;0;0;0;
0;0.94999999;0;0;0.94999999;0;0;0.94999999;0;0;
0.94999999;0;0;0;0;0;0;0.94999999;0;0;
0;0.94999999;0.94999999;0;0;0;0.94999999;0;0;0;
0;0;0.94999999;0;0;0;0;0;0;0;
0;0;0;0.94999999;0;0;0;0.94999999;0.94999999;0;
0;0;0;0.94999999;0.94999999;0;0;0;0;0.94999999;
0.94999999;0;0;0.94999999;0.94999999;0;0;0;0;0.94999999;
0;0;0;0;0;0.94999999;0.94999999;0;0;0.94999999;
0.94999999;0;0;0;0;0.94999999;0;0;0;0;
0;0.94999999;0.94999999;0;0;0;0.94999999;0;0;0;
0.94999999;0;0;0.94999999;0;0;0;0.94999999;0;0;
0;0;0.94999999;0;0.94999999;0.94999999;0;0;0;0;
0.94999999;0.94999999;0;0.94999999;0;0;0;0;0.94999999;0;
0;0;0;0;0;0;0;0;0;0.94999999;
0;0;0;0;0;0.94999999;0;0;0;0;
0;0;0;0;0.94999999;0;0;0;0;0;
0;0.94999999;0;0;0;0;0;0;0;0;
0.94999999;0;0;0;0;0;0;0.94999999;0;0;
0;0;0;0;0;0;0.94999999;0;0;0;
0;0;0;0.94999999;0;0;0;0;0;0;
0;0;0.94999999;0;0;0;0;0;0;0;
0.94999999;0.94999999;0.94999999;0.94999999;0.94999999;0.94999999;0.94999999;0.94999999;0;0;
0;0;       };
      };
      float_Data @[3] {
       name="Output_act";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=1;
       cell_geom{ 10;1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [2] ;;       };
       width=10;
       matrix_col_width=10;
       ar {
	name="ar";
       [10 1 12] 1;0;0;1;1;0;0;0;0;0;
0;1;0;1;1;0;0;0;0;0;
1;0;1;0;0;1;0;0;0;0;
0;1;1;0;0;1;0;0;0;0;
1;0;1;0;0;0;1;0;0;0;
0;1;1;0;0;0;1;0;0;0;
1;0;0;1;0;0;0;1;0;0;
0;1;0;1;0;0;0;1;0;0;
1;0;1;0;0;0;0;0;1;0;
0;1;1;0;0;0;0;0;1;0;
1;0;0;1;0;0;0;0;0;1;
0;1;0;1;0;0;0;0;0;1;
       };
      };
      float_Data @[4] {
       name="Output_net";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=1;
       cell_geom{ 10;1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [2] ;;       };
       width=10;
       matrix_col_width=10;
       ar {
	name="ar";
       [10 1 12] 0.70752716;0.62373525;0.40042165;0.75895149;0.69788474;0.3408547;0.36555919;0.5790838;0.41976306;0.56165373;
0.62261343;0.70805806;0.40139711;0.75849748;0.6965943;0.33971736;0.3634412;0.57950878;0.42190424;0.56056905;
0.68685234;0.60776591;0.78676993;0.30042437;0.3130646;0.69963431;0.64037442;0.27296385;0.62068355;0.28068143;
0.61508906;0.69191211;0.78707451;0.31266946;0.32071817;0.69794953;0.63717508;0.28252059;0.62161839;0.29058525;
0.70049918;0.62271416;0.76053059;0.36277941;0.33519816;0.59881818;0.6851123;0.32759428;0.61008018;0.33279359;
0.62204945;0.69739437;0.77595347;0.34158915;0.31823477;0.62427425;0.69455868;0.31296596;0.6049363;0.31987011;
0.6770401;0.59591496;0.33608314;0.76890224;0.57716346;0.29699087;0.35748798;0.68039161;0.33408803;0.60292143;
0.59495682;0.67742717;0.33702609;0.76846337;0.57591605;0.29589146;0.35544056;0.68080246;0.33615783;0.60187292;
0.69601595;0.61766511;0.76493579;0.35540414;0.37532017;0.59590554;0.61129588;0.29747722;0.69453937;0.30725405;
0.6281628;0.69714743;0.7578063;0.37448251;0.38717282;0.58749437;0.60216928;0.31267223;0.6918962;0.32213187;
0.6678679;0.58927912;0.33985972;0.74804842;0.55129701;0.30248851;0.36096391;0.59154081;0.34107071;0.67512822;
0.58843261;0.66816181;0.34077227;0.7476238;0.55008984;0.30142453;0.35898256;0.59193838;0.34307379;0.67411351;
       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     row_indexes {
      name="row_indexes";
     [12] 0;1;2;3;4;5;6;7;8;9;
10;11;     };
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
    SimpleMathSpec @[1] {name="thresh_smspec": opr=THRESH: arg=0.7: lw=0: hi=1: };
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
    DynEnumType @[0] {
     name="Layers";
     desc="choice of layers to plot";
     enums {
      name="enums";
      el_typ=DynEnumItem;
      el_def=0;
      DynEnumItem @[0] {
       name="Input";
       value=0;
       desc=;
      };
      DynEnumItem @[1] {
       name="Emotion";
       value=1;
       desc=;
      };
      DynEnumItem @[2] {
       name="Gender";
       value=2;
       desc=;
      };
      DynEnumItem @[3] {
       name="Identity";
       value=3;
       desc=;
      };
     };
     bits=0;
    };
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="cluster_data_src";
     var_type=T_Object;
     object_type=DataTable;
     completion_type=;
     object_val=.data.gp[0][0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="datatable to cluster plot";
     init_from=NULL;
    };
    ProgVar @[1] {
     name="layer";
     var_type=T_DynEnum;
     completion_type=;
     object_scope=NULL;
     dyn_enum_val {
      user_data_=NULL;
      enum_type=.programs[0].types[0]$$;
      value=0;
     };
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="ClusterPlotData";
     var_type=T_Object;
     object_type=DataTable;
     completion_type=;
     object_val=.data.gp[2][0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="Binarized_Data";
     var_type=T_Object;
     object_type=DataTable;
     completion_type=;
     object_val=.programs[0].objs[0]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="thresh_smspec";
     var_type=T_Object;
     object_type=SimpleMathSpec;
     completion_type=;
     object_val=.programs[0].objs[1]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="layer_name";
     var_type=T_String;
     string_val="Input";
     completion_type=;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[4] {
     name="label_col";
     var_type=T_String;
     string_val="Name";
     completion_type=;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    AssignExpr @[0] {
     name="AssignExpr_layernamelayer";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="layer_name = layer";
     result_var=.programs[0].vars[3]$$;
     expr {
      expr="layer";
     };
    };
    If @[1] {
     name="If_ifclusterdatasrc_ndNametrialname";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (cluster_data_src.data.FindName(\"trial_name\"))";
     cond {
      expr="cluster_data_src.data.FindName(\"trial_name\")";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      AssignExpr @[0] {
       name="AssignExpr_labelcoltrialname";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="label_col = \"trial_name\"";
       result_var=.programs[0].vars[4]$$;
       expr {
	expr="\"trial_name\"";
       };
      };
      AssignExpr @[1] {
       name="AssignExpr_layernametaMiscS_enlayername6act";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="layer_name = taMisc::StringMaxLen(layer_name, 6) + \"_act\"";
       result_var=$.programs[0].vars[3]$;
       expr {
	expr="taMisc::StringMaxLen(layer_name, 6) + \"_act\"";
       };
      };
      DataProcCall @[2] {
       name="DataProcCall_taDataProcCopyDa_aclusterdatasrc";
       desc=;
       flags=OFF|CAN_REVERT_TO_CODE;
       code_string="taDataProc::CopyData(Binarized_Data, cluster_data_src)";
       result_var=NULL;
       object_type=taDataProc;
       method=taDataProc::CopyData;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=DataTable_ptr;
	 type="DataTable*";
	 name="dest";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="Binarized_Data";
	 };
	};
	ProgArg @[1] {
	 arg_type=DataTable_ptr;
	 type="DataTable*";
	 name="src";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="cluster_data_src";
	 };
	};
       };
      };
      DataGenCall @[3] {
       name="DataGenCall_taDataGenSimpleM_actthreshsmspec";
       desc=;
       flags=OFF|CAN_REVERT_TO_CODE;
       code_string="taDataGen::SimpleMath(Binarized_Data, \"Output_act\", thresh_smspec)";
       result_var=NULL;
       object_type=taDataGen;
       method=taDataGen::SimpleMath;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=DataTable_ptr;
	 type="DataTable*";
	 name="data";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="Binarized_Data";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="col_nm";
	 required=1;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="\"Output_act\"";
	 };
	};
	ProgArg @[2] {
	 arg_type=const_SimpleMathSpec_ref;
	 type="SimpleMathSpec&";
	 name="math";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="thresh_smspec";
	 };
	};
       };
      };
      DataAnalCall @[4] {
       name="DataAnalCall_taDataAnalCluste_UCLIDIANfalse5f";
       desc=;
       flags=OFF|CAN_REVERT_TO_CODE;
       code_string="taDataAnal::Cluster(ClusterPlotData, true, Binarized_Data, \"Output_act\", \"trial_name\", taMath::EUCLIDIAN, false, .5f)";
       result_var=NULL;
       object_type=taDataAnal;
       method=taDataAnal::Cluster;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=DataTable_ptr;
	 type="DataTable*";
	 name="clust_data";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="ClusterPlotData";
	 };
	};
	ProgArg @[1] {
	 arg_type=bool;
	 type="bool";
	 name="view";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="true";
	 };
	};
	ProgArg @[2] {
	 arg_type=DataTable_ptr;
	 type="DataTable*";
	 name="src_data";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="Binarized_Data";
	 };
	};
	ProgArg @[3] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="data_col_nm";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"Output_act\"";
	 };
	};
	ProgArg @[4] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="name_col_nm";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"trial_name\"";
	 };
	};
	ProgArg @[5] {
	 arg_type=taMath::DistMetric;
	 type="taMath::DistMetric";
	 name="metric";
	 required=0;
	 def_val="taMath::EUCLIDIAN";
	 prev_expr=;
	 expr {
	  expr="taMath::EUCLIDIAN";
	 };
	};
	ProgArg @[6] {
	 arg_type=bool;
	 type="bool";
	 name="norm";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  expr="false";
	 };
	};
	ProgArg @[7] {
	 arg_type=float;
	 type="float";
	 name="tol";
	 required=0;
	 def_val="0.0f";
	 prev_expr=;
	 expr {
	  expr=".5f";
	 };
	};
       };
      };
     };
    };
    Else @[2] {
     name="Else_If_ifclusterdatasrc_ndNametrialname";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="else";
     cond {
      expr=;
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      AssignExpr @[0] {
       name="AssignExpr_labelcolName";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="label_col = \"Name\"";
       result_var=$.programs[0].vars[4]$;
       expr {
	expr="\"Name\"";
       };
      };
     };
    };
    DataAnalCall @[3] {
     name="DataAnalCall_taDataAnalCluste_UCLIDIANfalse5f";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="taDataAnal::Cluster(ClusterPlotData, true, cluster_data_src, layer_name, label_col, taMath::EUCLIDIAN, false, .5f)";
     result_var=NULL;
     object_type=taDataAnal;
     method=taDataAnal::Cluster;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="clust_data";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="ClusterPlotData";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="view";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="true";
       };
      };
      ProgArg @[2] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="src_data";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="cluster_data_src";
       };
      };
      ProgArg @[3] {
       arg_type=const_taString_ref;
       type="taString&";
       name="data_col_nm";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="layer_name";
       };
      };
      ProgArg @[4] {
       arg_type=const_taString_ref;
       type="taString&";
       name="name_col_nm";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="label_col";
       };
      };
      ProgArg @[5] {
       arg_type=taMath::DistMetric;
       type="taMath::DistMetric";
       name="metric";
       required=0;
       def_val="taMath::EUCLIDIAN";
       prev_expr=;
       expr {
	expr="taMath::EUCLIDIAN";
       };
      };
      ProgArg @[6] {
       arg_type=bool;
       type="bool";
       name="norm";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr="false";
       };
      };
      ProgArg @[7] {
       arg_type=float;
       type="float";
       name="tol";
       required=0;
       def_val="0.0f";
       prev_expr=;
       expr {
	expr=".5f";
       };
      };
     };
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program_Group @.gp[0] {
   name="LeabraAll_Test";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All, Test";
   desc="The full set of programs for testing a standard Leabra network (starting with Epoch)";
   debug_mode=0;
   Program @[0] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][0].doc$$: };
    };
    name="LeabraEpochTest";
    short_nm="Epoch";
    tags="Leabra, Std, Test";
    desc="sets testing flag, iterates over all of the items in a data table and calls LeabraTestTrial process on them";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @[0] {
      name="InputType";
      desc=;
      enums {
       name="enums";
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @[0] {
	name="BOTTOM_UP";
	value=0;
	desc=;
       };
       DynEnumItem @[1] {
	name="TOP_DOWN";
	value=1;
	desc=;
       };
      };
      bits=0;
     };
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=.data.gp[0][1]$$;
      object_scope=.data.gp[0]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=0;
      completion_type=;
      object_scope=NULL;
      hard_enum_type=DataLoop::Order;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="trial";
      var_type=T_Int;
      int_val=8;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=.data.gp[1][1]$$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      completion_type=;
      object_val=.networks[0].epoch_time$$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=8;
      completion_type=;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
     ProgVar @[6] {
      name="input_type";
      var_type=T_DynEnum;
      completion_type=;
      object_scope=NULL;
      dyn_enum_val {
       user_data_=NULL;
       enum_type=.programs.gp[0][0].types[0]$$;
       value=0;
      };
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
     Function @[0] {
      name="InitLayers";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="InitLayers() returns: int";
      return_type=T_Int;
      object_type=taOBase;
      args {
       name="args";
       el_typ=ProgVar;
       el_def=0;
      };
      fun_code {
       name="fun_code";
       el_typ=ProgCode;
       el_def=0;
       LocalVars @[0] {
	name="LocalVars_LocalVars0vars";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LocalVars (0 vars)";
	local_vars {
	 name="local_vars";
	 el_typ=ProgVar;
	 el_def=0;
	};
       };
       If @[1] {
	name="If_ifinputtypeTOPDOWN";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (input_type == TOP_DOWN)";
	cond {
	 expr="input_type == TOP_DOWN";
	};
	true_code {
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 MemberAssign @[0] {
	  name="MemberAssign_networklayersInp_typeLayerOUTPUT";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="network.layers.Input.layer_type = Layer::OUTPUT";
	  obj=.programs.gp[0][0].args[0]$$;
	  path="layers.Input.layer_type";
	  expr {
	   expr="Layer::OUTPUT";
	  };
	  update_after=0;
	 };
	 MemberAssign @[1] {
	  name="MemberAssign_networklayersEmo_rtypeLayerINPUT";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="network.layers.Emotion.layer_type = Layer::INPUT";
	  obj=$.programs.gp[0][0].args[0]$;
	  path="layers.Emotion.layer_type";
	  expr {
	   expr="Layer::INPUT";
	  };
	  update_after=0;
	 };
	 MemberAssign @[2] {
	  name="MemberAssign_networklayersGen_rtypeLayerINPUT";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="network.layers.Gender.layer_type = Layer::INPUT";
	  obj=$.programs.gp[0][0].args[0]$;
	  path="layers.Gender.layer_type";
	  expr {
	   expr="Layer::INPUT";
	  };
	  update_after=0;
	 };
	 MemberAssign @[3] {
	  name="MemberAssign_networklayersIde_rtypeLayerINPUT";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="network.layers.Identity.layer_type = Layer::INPUT";
	  obj=$.programs.gp[0][0].args[0]$;
	  path="layers.Identity.layer_type";
	  expr {
	   expr="Layer::INPUT";
	  };
	  update_after=0;
	 };
	};
       };
       Else @[2] {
	name="Else_If_ifinputtypeTOPDOWN";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="else";
	cond {
	 expr=;
	};
	true_code {
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 MemberAssign @[0] {
	  name="MemberAssign_networklayersInp_rtypeLayerINPUT";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="network.layers.Input.layer_type = Layer::INPUT";
	  obj=$.programs.gp[0][0].args[0]$;
	  path="layers.Input.layer_type";
	  expr {
	   expr="Layer::INPUT";
	  };
	  update_after=0;
	 };
	 MemberAssign @[1] {
	  name="MemberAssign_networklayersEmo_typeLayerOUTPUT";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="network.layers.Emotion.layer_type = Layer::OUTPUT";
	  obj=$.programs.gp[0][0].args[0]$;
	  path="layers.Emotion.layer_type";
	  expr {
	   expr="Layer::OUTPUT";
	  };
	  update_after=0;
	 };
	 MemberAssign @[2] {
	  name="MemberAssign_networklayersGen_typeLayerOUTPUT";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="network.layers.Gender.layer_type = Layer::OUTPUT";
	  obj=$.programs.gp[0][0].args[0]$;
	  path="layers.Gender.layer_type";
	  expr {
	   expr="Layer::OUTPUT";
	  };
	  update_after=0;
	 };
	 MemberAssign @[3] {
	  name="MemberAssign_networklayersIde_typeLayerOUTPUT";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="network.layers.Identity.layer_type = Layer::OUTPUT";
	  obj=$.programs.gp[0][0].args[0]$;
	  path="layers.Identity.layer_type";
	  expr {
	   expr="Layer::OUTPUT";
	  };
	  update_after=0;
	 };
	};
       };
      };
     };
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInittrial";
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=$.programs.gp[0][0].args[0]$;
      local_ctr_var=.programs.gp[0][0].vars[2]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=.programs.gp[0][0].vars[4]$$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[2] {
      name="MethodCall_networkInitActs";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Init_Acts()";
      result_var=NULL;
      obj=$.programs.gp[0][0].args[0]$;
      method=Network::Init_Acts;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_Acts()";
      meth_desc=" initialize the unit activation state variables";
     };
     MethodCall @[3] {
      name="MethodCall_networkInitWeights";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Init_Weights()";
      result_var=NULL;
      obj=$.programs.gp[0][0].args[0]$;
      method=Network::Init_Weights;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_Weights()";
      meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
     };
     MethodCall @[4] {
      name="MethodCall_networkUpdateAllViews";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="network->UpdateAllViews()";
      result_var=NULL;
      obj=$.programs.gp[0][0].args[0]$;
      method=taBase::UpdateAllViews;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void UpdateAllViews()";
      meth_desc=" called after data changes, to update views";
     };
     MemberAssign @[5] {
      name="MemberAssign_networktimescycleqtrfalse";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="network.times.cycle_qtr = false";
      obj=$.programs.gp[0][0].args[0]$;
      path="times.cycle_qtr";
      expr {
       expr="false";
      };
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInittrial";
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=$.programs.gp[0][0].args[0]$;
      local_ctr_var=$.programs.gp[0][0].vars[2]$;
      counter=Network::trial;
      update_after=0;
     };
     MemberAssign @[1] {
      name="MemberAssign_networktrainmodeNetworkTEST";
      desc="set to testing mode";
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="network.train_mode = Network::TEST";
      obj=$.programs.gp[0][0].args[0]$;
      path="train_mode";
      expr {
       expr="Network::TEST";
      };
      update_after=0;
     };
     FunctionCall @[2] {
      name="FunctionCall_InitLayers";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="InitLayers()";
      result_var=NULL;
      fun=.programs.gp[0][0].functions[0]$$;
      fun_args {
       name="fun_args";
       el_typ=ProgArg;
       el_def=0;
      };
     };
     AssignExpr @[3] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=$.programs.gp[0][0].vars[4]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[4] {
      name="MethodCall_epochtimerStartTimertrue";
      desc="start the epoch timer to record computation time per epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->StartTimer(true)";
      result_var=NULL;
      obj=$.programs.gp[0][0].vars[4]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     MethodCall @[5] {
      name="MethodCall_trialmondataResetData";
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->ResetData()";
      result_var=NULL;
      obj=.programs.gp[0][0].vars[3]$$;
      method=DataTable::ResetData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void ResetData()";
      meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
     };
     NetDataLoop @[6] {
      name="NetDataLoop_NetDataLoopSEQUE_ardatalooporder";
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Data Loop (SEQUENTIAL):  table=input_data  index=data_loop_index  order_var=data_loop_order ";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraTrialTestnetworkinputdata";
	desc="run the trial program, passing network and input_data";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraTrialTest(network, input_data)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.programs.gp[0][1]$$;
	targ_ld_init="*LeabraTrial*";
       };
      };
      data_var=$.programs.gp[0][0].vars[0]$;
      index_var=.programs.gp[0][0].vars[5]$$;
      order_var=.programs.gp[0][0].vars[1]$$;
      order=SEQUENTIAL;
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     If @[7] {
      name="If_ifnetworkwtupdateNetworkBATCH";
      desc="if full batch mode, update only at end of epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.wt_update == Network::BATCH)";
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkComputeWeights";
	desc="final update of weights based on accumulated changes";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=$.programs.gp[0][0].args[0]$;
	method=Network::Compute_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[8] {
      name="MethodCall_networkComputeEpochStats";
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_EpochStats()";
      result_var=NULL;
      obj=$.programs.gp[0][0].args[0]$;
      method=Network::Compute_EpochStats;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_EpochStats()";
      meth_desc=" compute epoch-level statistics; calls DMem_ComputeAggs (if dmem) and EpochSSE -- specific algos may add more";
     };
     MethodCall @[9] {
      name="MethodCall_epochtimerEndTimer";
      desc="done with the computation in the epoch -- record time it took";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->EndTimer()";
      result_var=NULL;
      obj=$.programs.gp[0][0].vars[4]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
     MemberAssign @[10] {
      name="MemberAssign_networktrainmodeNetworkTRAIN";
      desc="set back to training mode";
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="network.train_mode = Network::TRAIN";
      obj=$.programs.gp[0][0].args[0]$;
      path="train_mode";
      expr {
       expr="Network::TRAIN";
      };
      update_after=0;
     };
    };
    step_prog=$.programs.gp[0][1]$;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraEpoch";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraEpoch";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[1] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][1].doc$$: };
    };
    name="LeabraTrialTest";
    short_nm="Trial";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/output event or external information, over a single alpha frequency cycle (100 msec / 10 Hz) -- iterates over gamma-frequency (25 msec / 40 Hz) quarter-trials";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[0][1]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      name="LocalVars_LocalVars1vars";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (1 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="qtr";
	var_type=T_Int;
	int_val=0;
	completion_type=;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     If @[1] {
      name="If_ifnetworkCompute_stnetworktrial1";
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.Compute_Weights_Test(network.trial+1))";
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkComputeWeights";
	desc="update weights -- do this at start instead of end, so that dwt is valid";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=.programs.gp[0][1].args[0]$$;
	method=Network::Compute_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[2] {
      name="MethodCall_networkTrialInit";
      desc="initializes various counters at start of trial";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Init()";
      result_var=NULL;
      obj=$.programs.gp[0][1].args[0]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Init()";
      meth_desc=" initialize at start of trial (init specs, Decay state)";
     };
     Comment @[3] {
      name="Comment_notecanapplyinpu_Quarterasneeded";
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[4] {
      name="MethodCall_networkInitInputData";
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.programs.gp[0][1].args[0]$;
      method=Network::Init_InputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[5] {
      name="ProgramCall_ApplyInputsTestnetworkinputdata";
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=CAN_REVERT_TO_CODE;
      code_string="ApplyInputsTest(network, input_data)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr="network";
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=.programs.gp[0][4]$$;
      targ_ld_init="*ApplyInputs*";
     };
     ForLoop @[6] {
      name="ForLoop_forqtr0qtr4qtr";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="for (qtr = 0; qtr < 4; qtr++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraQuarterTes_etworkinputdata";
	desc="run the quarter program (which iterates over cyles of network activation updating) for each quarter";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraQuarterTest(network, input_data)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.programs.gp[0][2]$$;
	targ_ld_init="*LeabraQuarter*";
       };
      };
      init {
       expr="qtr = 0";
      };
      test {
       expr="qtr < 4";
      };
      iter {
       expr="qtr++";
      };
     };
     MethodCall @[7] {
      name="MethodCall_networkTrialFinal";
      desc="after the trial is over, do final computations";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Final()";
      result_var=NULL;
      obj=$.programs.gp[0][1].args[0]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Final()";
      meth_desc=" do final processing after trial: Compute_AbsRelNetin";
     };
     ProgramCall @[8] {
      name="ProgramCall_LeabraTrialMonitorTestnetwork";
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraTrialMonitorTest(network)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=.programs.gp[0][5]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[9] {
      name="NetUpdateView_NetUpdateView";
      desc="update the network view(s) (only if update_net_view is true)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[0][1].args[0]$;
      update_var=.programs.gp[0][1].vars[0]$$;
     };
    };
    step_prog=.programs.gp[0][3]$$;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraTrial";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraTrial";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[2] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][2].doc$$: };
    };
    name="LeabraQuarterTest";
    short_nm="Quarter";
    tags="Leabra, Std";
    desc="iterates over cycles of activation updating for a gamma-frequency (25 msec / 40 Hz) quarter of an alpha frequency (100 msec / 10 Hz) trial";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[0][1]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=100;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInitcycle";
      desc="initialize local cycle counter and corresponding counter on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: cycle";
      network_var=.programs.gp[0][2].args[0]$$;
      local_ctr_var=.programs.gp[0][2].vars[0]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      name="LocalVars_LocalVars2vars";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (2 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="cycle_max";
	var_type=T_Int;
	int_val=0;
	completion_type=;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @[1] {
	name="cyc";
	var_type=T_Int;
	int_val=0;
	completion_type=;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     Comment @[1] {
      name="Comment_notecanapplyinpu_Quarterasneeded";
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[2] {
      name="MethodCall_networkInitInputData";
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.programs.gp[0][2].args[0]$;
      method=Network::Init_InputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[3] {
      name="ProgramCall_programname";
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="program_name()";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr="network";
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=bool;
	type="bool";
	name="grab_camera_img";
	required=1;
	def_val=;
	prev_expr="input_data";
	expr {
	 expr=;
	};
       };
      };
      target=NULL;
      targ_ld_init="*ApplyInputs*";
     };
     MethodCall @[4] {
      name="MethodCall_networkQuarterInit";
      desc="initializes various counters at start of settling";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Init()";
      result_var=NULL;
      obj=$.programs.gp[0][2].args[0]$;
      method=LeabraNetwork::Quarter_Init;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Init()";
      meth_desc=" initialize network for quarter-level processing (hard clamp, netscale)";
     };
     MethodCall @[5] {
      name="MethodCall_cyclemaxnetworkCycleRunMax";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="cycle_max = network->CycleRunMax()";
      result_var=.programs.gp[0][2].prog_code[0].local_vars[0]$$;
      obj=$.programs.gp[0][2].args[0]$;
      method=LeabraNetwork::CycleRunMax;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int CycleRunMax()";
      meth_desc=" max loop counter for running cycles in a gamma quarter of processing, taking into account the fact that threading can run multiple cycles per Cycle_Run call if quarter flag is set";
     };
     ForLoop @[6] {
      name="ForLoop_forcyc0cyccyclemaxcyc";
      desc="// the main loop over cycles of updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="for (cyc=0; cyc<cycle_max; cyc++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraCycleTestnetwork";
	desc="run the cycle program -- can run multiple cycles at a time due to threading";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraCycleTest(network)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=$.programs.gp[0][3]$;
	targ_ld_init="*LeabraCycle*";
       };
       AssignExpr @[1] {
	name="AssignExpr_cyclenetworkcycle";
	desc="grab the updated cycle count";
	flags=CAN_REVERT_TO_CODE;
	code_string="cycle = network.cycle";
	result_var=$.programs.gp[0][2].vars[0]$;
	expr {
	 expr="network.cycle";
	};
       };
      };
      init {
       expr="cyc=0";
      };
      test {
       expr="cyc<cycle_max";
      };
      iter {
       expr="cyc++";
      };
     };
     MethodCall @[7] {
      name="MethodCall_networkQuarterFinal";
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Final()";
      result_var=NULL;
      obj=$.programs.gp[0][2].args[0]$;
      method=LeabraNetwork::Quarter_Final;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Final()";
      meth_desc=" do final processing after each quarter: ";
     };
     MethodCall @[8] {
      name="MethodCall_networkComputePhaseStats";
      desc="compute appropriate stats for each phase (MinusStats, PlusStats)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_PhaseStats()";
      result_var=NULL;
      obj=$.programs.gp[0][2].args[0]$;
      method=LeabraNetwork::Compute_PhaseStats;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_PhaseStats()";
      meth_desc=" compute MinusStats at the end of the minus phase, and PlusStats at the end of the plus phase -- this is preferred over the previous implementation of calling TrialStats only at the end of the minus phase, which required targets to be present in the minus phase, which is not always the case";
     };
     NetUpdateView @[9] {
      name="NetUpdateView_NetUpdateView";
      desc="update network views, if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[0][2].args[0]$;
      update_var=.programs.gp[0][2].vars[1]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraQuarter";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraQuarter";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[3] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][3].doc$$: };
    };
    name="LeabraCycleTest";
    short_nm="Cycle";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_networkCycleRun";
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Cycle_Run()";
      result_var=NULL;
      obj=.programs.gp[0][3].args[0]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Cycle_Run()";
      meth_desc=" compute cycle(s) of updating: netinput, inhibition, activations -- multiple cycles can be run depending on lthreads.n_cycles setting and whether multiple threads are actually being used -- see lthreads.n_threads_act";
     };
     NetUpdateView @[1] {
      name="NetUpdateView_NetUpdateView";
      desc="update network views if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[0][3].args[0]$;
      update_var=.programs.gp[0][3].vars[0]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraCycle";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraCycle";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[4] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][4].doc$$: };
    };
    name="ApplyInputsTest";
    short_nm="InTest";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @[0] {
      name="LayerWriter_0";
      data=$.data.gp[0][1]$;
      network=$.networks[0]$;
      layer_data {
       name="layer_data";
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	off=0;
	col_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=0;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	off=0;
	col_name="Input";
	net_target=LAYER;
	layer_name="Input";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	off=0;
	col_name="Emotion";
	net_target=LAYER;
	layer_name="Emotion";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=COMP;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[3] {
	off=0;
	col_name="Gender";
	net_target=LAYER;
	layer_name="Gender";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=COMP;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[4] {
	off=0;
	col_name="Identity";
	net_target=LAYER;
	layer_name="Identity";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=COMP;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="layer_writer_0";
      var_type=T_Object;
      object_type=LayerWriter;
      completion_type=;
      object_val=.programs.gp[0][4].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
      init_from=NULL;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[0][1]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_layerwriter0SetD_nputdatanetwork";
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=CAN_REVERT_TO_CODE;
      code_string="layer_writer_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=.programs.gp[0][4].objs_vars[0]$$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      name="MethodCall_layerwriter0AutoConfigtrue";
      desc="configure to fit the network and input data -- this may cause spurious warning messages and problems in some cases so just turn it OFF if necessary";
      flags=CAN_REVERT_TO_CODE;
      code_string="layer_writer_0->AutoConfig(true)";
      result_var=NULL;
      obj=$.programs.gp[0][4].objs_vars[0]$;
      method=LayerWriter::AutoConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="remove_unused";
	required=0;
	def_val="true";
	prev_expr="true";
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void AutoConfig(bool remove_unused = true)";
      meth_desc=" do a 'best guess' configuration of items by matching up like-named data Channels and network Layers -- if remove_unused is true, then layer writer elements that existed previously but were not found in input data and network are removed";
     };
     MethodCall @[2] {
      name="MethodCall_layerwriter0CheckConfigfalse";
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=CAN_REVERT_TO_CODE;
      code_string="layer_writer_0->CheckConfig(false)";
      result_var=NULL;
      obj=$.programs.gp[0][4].objs_vars[0]$;
      method=taList_impl::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_layerwriter0SetD_nputdatanetwork";
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=CAN_REVERT_TO_CODE;
      code_string="layer_writer_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=$.programs.gp[0][4].objs_vars[0]$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      name="MethodCall_layerwriter0ApplyInputData";
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=CAN_REVERT_TO_CODE;
      code_string="layer_writer_0->ApplyInputData()";
      result_var=NULL;
      obj=$.programs.gp[0][4].objs_vars[0]$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="bool ApplyInputData()";
      meth_desc=" apply data to the layers, using the network's current context settings (TEST,TRAIN,etc) -- returns success";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="ApplyInputs";
     full_url="https://grey.colorado.edu/emergent/index.php/ApplyInputs";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[5] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][5].doc$$: };
    };
    name="LeabraTrialMonitorTest";
    short_nm="TrlMonTst";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       ignore_sig=0;
       NetMonItem @[0] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="act";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="act";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0.5: lw=0: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.networks[0]$;
      data=$.data.gp[1][1]$;
      rmv_orphan_cols=1;
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      completion_type=;
      object_val=.programs.gp[0][5].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[1][1]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_trialnetmonSetDa_lmondatanetwork";
      desc="set the network and datatable for the NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->SetDataNetwork(trial_mon_data, network)";
      result_var=NULL;
      obj=.programs.gp[0][5].objs_vars[0]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[1] {
      name="MethodCall_trialnetmonCheckConfigfalse";
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.programs.gp[0][5].objs_vars[0]$;
      method=taBase::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[2] {
      name="MethodCall_trialnetmonUpdateMonitorstrue";
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.programs.gp[0][5].objs_vars[0]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_trialmondataAddBlankRow";
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.programs.gp[0][5].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      name="MethodCall_trialnetmonGetMonVals";
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.programs.gp[0][5].objs_vars[0]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     MethodCall @[2] {
      name="MethodCall_trialmondataWriteClose";
      desc="update views and other things after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.programs.gp[0][5].vars[0]$;
      method=DataTable::WriteClose;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     MethodCall @[3] {
      name="MethodCall_networkDMemShare_tatrialmondata1";
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->DMem_ShareTrialData(trial_mon_data, 1)";
      result_var=NULL;
      obj=.programs.gp[0][5].args[0]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	prev_expr=;
	expr {
	 expr="1";
	};
       };
      };
      meth_sig="void DMem_ShareTrialData(DataTable* dt, int n_rows = 1)";
      meth_desc=" share trial data from given datatable across the trial-level dmem communicator (outer loop) -- each processor gets data from all other processors; if called every trial with n_rows = 1, data will be identical to non-dmem; if called at end of epoch with n_rows = -1 data will be grouped by processor but this is more efficient";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
  };
  Program_Group @.gp[1] {
   name="LeabraAll_Std";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All";
   desc="The full set of programs for training a standard Leabra network";
   debug_mode=0;
   Program @[0] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][0].doc$$: };
    };
    name="LeabraBatch";
    short_nm="Batch";
    tags="Leabra, Std";
    desc="Iterate over training runs (a batch of training runs) -- just a simple loop that calls training program";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- updates batch counter on network and passes it to train program";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable with training patterns -- not used by this program, but passed to train program";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="batch";
      var_type=T_Int;
      int_val=0;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch counter";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="batch_start";
      var_type=T_Int;
      int_val=0;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch number to start on";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="n_batches";
      var_type=T_Int;
      int_val=10;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="number of batches to run";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInitbatch";
      desc="initializes local batch counter and batch field on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: batch";
      network_var=.programs.gp[1][0].args[0]$$;
      local_ctr_var=.programs.gp[1][0].vars[0]$$;
      counter=Network::batch;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      name="LocalVars_LocalVars1vars";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (1 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="i";
	var_type=T_Int;
	int_val=0;
	completion_type=;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     AssignExpr @[1] {
      name="AssignExpr_batchbatchstart";
      desc="start at the start";
      flags=CAN_REVERT_TO_CODE;
      code_string="batch = batch_start";
      result_var=$.programs.gp[1][0].vars[0]$;
      expr {
       expr="batch_start";
      };
     };
     MemberAssign @[2] {
      name="MemberAssign_networkbatchbatch";
      desc="update network";
      flags=CAN_REVERT_TO_CODE;
      code_string="network.batch = batch";
      obj=$.programs.gp[1][0].args[0]$;
      path="batch";
      expr {
       expr="batch";
      };
      update_after=0;
     };
     ForLoop @[3] {
      name="ForLoop_fori0inbatchesi";
      desc="main loop over training runs";
      flags=CAN_REVERT_TO_CODE;
      code_string="for (i=0; i<n_batches; i++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraTrainnetworkinputdatatrue";
	desc="run the training program -- sets the network and input_data args";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraTrain(network, input_data, true)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="no_prompts";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="true";
	  };
	 };
	};
	target=.programs.gp[1][1]$$;
	targ_ld_init="*LeabraTrain*";
       };
       NetCounterIncr @[1] {
	name="NetCounterIncr_NetCounterIncrbatch";
	desc="increment the local batch counter and copy to network";
	flags=CAN_REVERT_TO_CODE;
	code_string="Net Counter Incr: batch";
	network_var=$.programs.gp[1][0].args[0]$;
	local_ctr_var=$.programs.gp[1][0].vars[0]$;
	counter=Network::batch;
	update_after=0;
       };
      };
      init {
       expr="i=0";
      };
      test {
       expr="i<n_batches";
      };
      iter {
       expr="i++";
      };
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraBatch";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraBatch";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[1] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][1].doc$$: };
    };
    name="LeabraTrain";
    short_nm="Train";
    tags="Leabra, Train, RndSeedList";
    desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task.  Also has a list of random seeds that are tied to the network batch counter, providing consistent runs regardless of what happens in the training of each network, or where it is run (e.g., on different processors)";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=RndSeed;
     el_def=0;
     RndSeed_List @[0] {
      name="rnd_seeds";
      seeds {
       name="seeds";
       el_typ=RndSeed;
       el_def=0;
       RndSeed @[0] {
	name="RndSeed_1";
	rnd_seed=2878175685;
       };
       RndSeed @[1] {
	name="RndSeed_2";
	rnd_seed=2878175686;
       };
       RndSeed @[2] {
	name="RndSeed_3";
	rnd_seed=2878175687;
       };
       RndSeed @[3] {
	name="RndSeed_4";
	rnd_seed=2878175688;
       };
       RndSeed @[4] {
	name="RndSeed_5";
	rnd_seed=2878175689;
       };
       RndSeed @[5] {
	name="RndSeed_6";
	rnd_seed=2878175690;
       };
       RndSeed @[6] {
	name="RndSeed_7";
	rnd_seed=2878175691;
       };
       RndSeed @[7] {
	name="RndSeed_8";
	rnd_seed=2878175692;
       };
       RndSeed @[8] {
	name="RndSeed_9";
	rnd_seed=2878175693;
       };
       RndSeed @[9] {
	name="RndSeed_10";
	rnd_seed=2878175694;
       };
       RndSeed @[10] {
	name="RndSeed_11";
	rnd_seed=2878175695;
       };
       RndSeed @[11] {
	name="RndSeed_12";
	rnd_seed=2878175696;
       };
       RndSeed @[12] {
	name="RndSeed_13";
	rnd_seed=2878175697;
       };
       RndSeed @[13] {
	name="RndSeed_14";
	rnd_seed=2878175698;
       };
       RndSeed @[14] {
	name="RndSeed_15";
	rnd_seed=2878175699;
       };
       RndSeed @[15] {
	name="RndSeed_16";
	rnd_seed=2878175700;
       };
       RndSeed @[16] {
	name="RndSeed_17";
	rnd_seed=2878175701;
       };
       RndSeed @[17] {
	name="RndSeed_18";
	rnd_seed=2878175702;
       };
       RndSeed @[18] {
	name="RndSeed_19";
	rnd_seed=2878175703;
       };
       RndSeed @[19] {
	name="RndSeed_20";
	rnd_seed=2878175704;
       };
       RndSeed @[20] {
	name="RndSeed_21";
	rnd_seed=2878175705;
       };
       RndSeed @[21] {
	name="RndSeed_22";
	rnd_seed=2878175706;
       };
       RndSeed @[22] {
	name="RndSeed_23";
	rnd_seed=2878175707;
       };
       RndSeed @[23] {
	name="RndSeed_24";
	rnd_seed=2878175708;
       };
       RndSeed @[24] {
	name="RndSeed_25";
	rnd_seed=2878175709;
       };
      };
     };
     RndSeed @[1] {
      name="rnd_seed";
      rnd_seed=1208639044;
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @[0] {
      name="RndInitType";
      desc=;
      enums {
       name="enums";
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @[0] {
	name="OLD_SEED";
	value=0;
	desc="use stored random seed value (recreates same sequence every time)";
       };
       DynEnumItem @[1] {
	name="NEW_SEED";
	value=1;
	desc="generate new random seed (new sequence of random numbers)";
       };
       DynEnumItem @[2] {
	name="BATCH_SEEDS";
	value=2;
	desc="use a fixed list of random seeds with the current batch number selecting the seed to use -- provides a consistent set of initial conditions for each batch regardless..";
       };
      };
      bits=0;
     };
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[2] {
      name="no_prompts";
      var_type=T_Bool;
      bool_val=0;
      completion_type=;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="If train is called by other programs (e.g., Batch), they should set this to true -- otherwise it is reset to false in Init";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="max_epoch";
      var_type=T_Int;
      int_val=500;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="epoch";
      var_type=T_Int;
      int_val=0;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[2] {
      name="train_mode";
      var_type=T_HardEnum;
      int_val=1;
      completion_type=;
      object_scope=NULL;
      hard_enum_type=Network::TrainMode;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[3] {
      name="rnd_init";
      var_type=T_DynEnum;
      completion_type=;
      object_scope=NULL;
      dyn_enum_val {
       user_data_=NULL;
       enum_type=.programs.gp[1][1].types[0]$$;
       value=2;
      };
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="how to initialize the random numbers when the Init button is pressed";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="err_stopcrit";
      var_type=T_Real;
      real_val=0;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="stopping criterion for training, in terms of count of trials with errors in the epoch (nework cnt_err)";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="n_under_thr";
      var_type=T_Int;
      int_val=2;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="number of times network needs to be under stopcrit threshold to actually stop";
      init_from=NULL;
     };
     ProgVar @[6] {
      name="save_final_wts";
      var_type=T_Bool;
      bool_val=0;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="save the network's weights at the end of training?  ";
      init_from=NULL;
     };
     ProgVar @[7] {
      name="save_wts_interval";
      var_type=T_Int;
      int_val=-1;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="save the weights every this many epochs, if number is >= 1 (otherwise do not save weights)";
      init_from=NULL;
     };
     ProgVar @[8] {
      name="n_under_cnt";
      var_type=T_Int;
      int_val=0;
      completion_type=;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current under threshold counter";
      init_from=NULL;
     };
     ProgVar @[9] {
      name="rnd_seeds";
      var_type=T_Object;
      object_type=RndSeed_List;
      completion_type=;
      object_val=.programs.gp[1][1].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[10] {
      name="train_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      completion_type=;
      object_val=.networks[0].train_time$$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[11] {
      name="rnd_seed";
      var_type=T_Object;
      object_type=RndSeed;
      completion_type=;
      object_val=.programs.gp[1][1].objs[1]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
     Function @[0] {
      name="GetRandomSeed";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="GetRandomSeed() returns: int";
      return_type=T_Int;
      object_type=taOBase;
      args {
       name="args";
       el_typ=ProgVar;
       el_def=0;
      };
      fun_code {
       name="fun_code";
       el_typ=ProgCode;
       el_def=0;
       LocalVars @[0] {
	name="LocalVars_LocalVars0vars";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LocalVars (0 vars)";
	local_vars {
	 name="local_vars";
	 el_typ=ProgVar;
	 el_def=0;
	};
       };
       Switch @[1] {
	name="Switch_switchrndinit";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="switch(rnd_init)";
	switch_var=.programs.gp[1][1].vars[3]$$;
	cases {
	 name="cases";
	 el_typ=CaseBlock;
	 el_def=0;
	 CaseBlock @[0] {
	  name="CaseBlock_caseOLDSEED";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="case: OLD_SEED";
	  prog_code {
	   name="prog_code";
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    name="MethodCall_rndseedOldSeed";
	    desc="restore previous random seed (all runs produce same results) -- click on rnd_seed object to generate a new seed to use for this if you want";
	    flags=CAN_REVERT_TO_CODE;
	    code_string="rnd_seed->OldSeed()";
	    result_var=NULL;
	    obj=.programs.gp[1][1].vars[11]$$;
	    method=RndSeed::OldSeed;
	    meth_args {
	     name="meth_args";
	     el_typ=ProgArg;
	     el_def=0;
	    };
	    meth_sig="void OldSeed()";
	    meth_desc=" restore current seed to random num generator";
	   };
	  };
	  case_val {
	   expr="OLD_SEED";
	  };
	  is_default=0;
	 };
	 CaseBlock @[1] {
	  name="CaseBlock_caseNEWSEED";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="case: NEW_SEED";
	  prog_code {
	   name="prog_code";
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    name="MethodCall_rndseedNewSeed";
	    desc="new random numbers each time";
	    flags=CAN_REVERT_TO_CODE;
	    code_string="rnd_seed->NewSeed()";
	    result_var=NULL;
	    obj=$.programs.gp[1][1].vars[11]$;
	    method=RndSeed::NewSeed;
	    meth_args {
	     name="meth_args";
	     el_typ=ProgArg;
	     el_def=0;
	    };
	    meth_sig="void NewSeed()";
	    meth_desc=" set the seed to a new random value (based on time and process id)";
	   };
	  };
	  case_val {
	   expr="NEW_SEED";
	  };
	  is_default=0;
	 };
	 CaseBlock @[2] {
	  name="CaseBlock_caseBATCHSEEDS";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="case: BATCH_SEEDS";
	  prog_code {
	   name="prog_code";
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    name="MethodCall_rndseedsUseSeedn_dseedsseedssize";
	    desc="restore previous random seed (all runs produce same results); change to NewSeed to have new random numbers each time";
	    flags=CAN_REVERT_TO_CODE;
	    code_string="rnd_seeds->UseSeed(network.batch % rnd_seeds.seeds.size)";
	    result_var=NULL;
	    obj=.programs.gp[1][1].vars[9]$$;
	    method=RndSeed_List::UseSeed;
	    meth_args {
	     name="meth_args";
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=int;
	      type="int";
	      name="idx";
	      required=1;
	      def_val=;
	      prev_expr=;
	      expr {
	       expr="network.batch % rnd_seeds.seeds.size";
	      };
	     };
	    };
	    meth_sig="void UseSeed(int idx)";
	    meth_desc=" use seed at given index in the list (does OldSeed on it); wraps around (modulus) if idx is > list size (issues warning)";
	   };
	  };
	  case_val {
	   expr="BATCH_SEEDS";
	  };
	  is_default=0;
	 };
	};
       };
      };
     };
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      name="AssignExpr_nopromptsfalse";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="no_prompts = false";
      result_var=.programs.gp[1][1].args[2]$$;
      expr {
       expr="false";
      };
     };
     MethodCall @[1] {
      name="MethodCall_networkCheckConfigfalse";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="network->CheckConfig(false)";
      result_var=NULL;
      obj=.programs.gp[1][1].args[0]$$;
      method=taBase::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     AssignExpr @[2] {
      name="AssignExpr_traintimernetworktraintime";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer = network.train_time";
      result_var=.programs.gp[1][1].vars[10]$$;
      expr {
       expr="network.train_time";
      };
     };
     AssignExpr @[3] {
      name="AssignExpr_nundercnt0";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="n_under_cnt = 0";
      result_var=.programs.gp[1][1].vars[8]$$;
      expr {
       expr="0";
      };
     };
     FunctionCall @[4] {
      name="FunctionCall_GetRandomSeed";
      desc="initialize random seed";
      flags=CAN_REVERT_TO_CODE;
      code_string="GetRandomSeed()";
      result_var=NULL;
      fun=.programs.gp[1][1].functions[0]$$;
      fun_args {
       name="fun_args";
       el_typ=ProgArg;
       el_def=0;
      };
     };
     WtInitPrompt @[5] {
      name="WtInitPrompt_ifguiDoyouwantto_eNetworkWeights";
      desc="don't initialize weights without checking";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (gui && \"Do you want to Initialize Network Weights\")";
      prompt="Do you want to Initialize Network Weights";
      yes_label="Yes";
      no_label="No";
      yes_code {
       name="yes_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkBuild";
	desc="need to have built network by now in any case, so do it here to make double sure -- prevents errs when loading project with startup program";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Build()";
	result_var=NULL;
	obj=$.programs.gp[1][1].args[0]$;
	method=Network::Build;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Build()";
	meth_desc=" Build the network units and Connect them (calls CheckSpecs/BuildLayers/Units/Prjns and Connect)";
       };
       MethodCall @[1] {
	name="MethodCall_networkInitWeights";
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Init_Weights()";
	result_var=NULL;
	obj=$.programs.gp[1][1].args[0]$;
	method=Network::Init_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Init_Weights()";
	meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
       };
       PrintExpr @[2] {
	name="PrintExpr_Printnetworkname_ghtsInitialized";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="Print network.name << \" Weights Initialized\"";
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
	debug=0;
       };
      };
     };
     AssignExpr @[6] {
      name="AssignExpr_epochnetworkepoch";
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch = network.epoch";
      result_var=.programs.gp[1][1].vars[1]$$;
      expr {
       expr="network.epoch";
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      name="AssignExpr_traintimernetworktraintime";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer = network.train_time";
      result_var=$.programs.gp[1][1].vars[10]$;
      expr {
       expr="network.train_time";
      };
     };
     MethodCall @[1] {
      name="MethodCall_traintimerStartTimertrue";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer->StartTimer(true)";
      result_var=NULL;
      obj=$.programs.gp[1][1].vars[10]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     AssignExpr @[2] {
      name="AssignExpr_nundercnt0";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="n_under_cnt = 0";
      result_var=$.programs.gp[1][1].vars[8]$;
      expr {
       expr="0";
      };
     };
     MemberAssign @[3] {
      name="MemberAssign_networktrainmodetrainmode";
      desc="set network's training mode to our local value";
      flags=CAN_REVERT_TO_CODE;
      code_string="network.train_mode = train_mode";
      obj=$.programs.gp[1][1].args[0]$;
      path="train_mode";
      expr {
       expr="train_mode";
      };
      update_after=0;
     };
     FunctionCall @[4] {
      name="FunctionCall_GetRandomSeed";
      desc="initialize random seed";
      flags=CAN_REVERT_TO_CODE;
      code_string="GetRandomSeed()";
      result_var=NULL;
      fun=$.programs.gp[1][1].functions[0]$;
      fun_args {
       name="fun_args";
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[5] {
      name="If_ifnoprompts";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (no_prompts)";
      cond {
       expr="no_prompts";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkInitWeights";
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Init_Weights()";
	result_var=NULL;
	obj=$.programs.gp[1][1].args[0]$;
	method=Network::Init_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Init_Weights()";
	meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
       };
       PrintExpr @[1] {
	name="PrintExpr_Printnetworkname_ghtsInitialized";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="Print network.name << \" Weights Initialized\"";
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
	debug=0;
       };
      };
     };
     AssignExpr @[6] {
      name="AssignExpr_epochnetworkepoch";
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch = network.epoch";
      result_var=$.programs.gp[1][1].vars[1]$;
      expr {
       expr="network.epoch";
      };
     };
     WhileLoop @[7] {
      name="WhileLoop_whileepochmaxepoch";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="while (epoch < max_epoch)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraEpochnetworkinputdata";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraEpoch(network, input_data)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.programs.gp[1][2]$$;
	targ_ld_init="*LeabraEpoch*";
       };
       NetCounterIncr @[1] {
	name="NetCounterIncr_NetCounterIncrepoch";
	desc="increment the epoch counter";
	flags=CAN_REVERT_TO_CODE;
	code_string="Net Counter Incr: epoch";
	network_var=$.programs.gp[1][1].args[0]$;
	local_ctr_var=$.programs.gp[1][1].vars[1]$;
	counter=Network::epoch;
	update_after=0;
       };
       If @[2] {
	name="If_ifnetworkcnterrerrstopcrit";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (network.cnt_err <= err_stopcrit)";
	cond {
	 expr="network.cnt_err <= err_stopcrit";
	};
	true_code {
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 VarIncr @[0] {
	  name="VarIncr_nundercnt1";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="n_under_cnt += 1";
	  var=$.programs.gp[1][1].vars[8]$;
	  expr {
	   expr="1";
	  };
	 };
	 IfBreak @[1] {
	  name="IfBreak_ifnundercntnunderthrbreak";
	  desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here too)";
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if(n_under_cnt >=  n_under_thr) break";
	  cond {
	   expr="n_under_cnt >=  n_under_thr";
	  };
	 };
	};
       };
       Else @[3] {
	name="Else_If_ifnetworkcnterrerrstopcrit";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="else";
	cond {
	 expr=;
	};
	true_code {
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 AssignExpr @[0] {
	  name="AssignExpr_nundercnt0";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="n_under_cnt = 0";
	  result_var=$.programs.gp[1][1].vars[8]$;
	  expr {
	   expr="0";
	  };
	 };
	};
       };
       If @[4] {
	name="If_ifsavewtsinterval1";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (save_wts_interval >= 1)";
	cond {
	 expr="save_wts_interval >= 1";
	};
	true_code {
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 If @[0] {
	  name="If_ifepochsavewtsinterval0";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if (epoch % save_wts_interval == 0)";
	  cond {
	   expr="epoch % save_wts_interval == 0";
	  };
	  true_code {
	   name="true_code";
	   el_typ=ProgCode;
	   el_def=0;
	   ProgramCall @[0] {
	    name="ProgramCall_SaveWeightsnetwork";
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="SaveWeights(network)";
	    prog_args {
	     name="prog_args";
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=Network;
	      type="LeabraNetwork*";
	      name="network";
	      required=1;
	      def_val=;
	      prev_expr=;
	      expr {
	       expr="network";
	      };
	     };
	    };
	    target=.programs.gp[1][9]$$;
	    targ_ld_init="*SaveWeights*";
	   };
	  };
	 };
	};
       };
      };
      test {
       expr="epoch < max_epoch";
      };
     };
     If @[8] {
      name="If_ifsavefinalwts";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (save_final_wts)";
      cond {
       expr="save_final_wts";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_SaveWeightsnetwork";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="SaveWeights(network)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=Network;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=$.programs.gp[1][9]$;
	targ_ld_init="*SaveWeights*";
       };
      };
     };
     MethodCall @[9] {
      name="MethodCall_traintimerEndTimer";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer->EndTimer()";
      result_var=NULL;
      obj=$.programs.gp[1][1].vars[10]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraTrain";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraTrain";
     text_size=1;
     text=;
     html_text="<!DOCTYPE html><html lang=\"en\" dir=\"ltr\" class=\"client-js\"><head>
<meta charset=\"UTF-8\">
<title>LeabraTrain - emergent</title>
<script>document.documentElement.className = document.documentElement.className.replace( /(^|\\s)client-nojs(\\s|$)/, \"$1client-js$2\" );</script>
<script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({\"wgCanonicalNamespace\":\"\",\"wgCanonicalSpecialPageName\":!1,\"wgNamespaceNumber\":0,\"wgPageName\":\"LeabraTrain\",\"wgTitle\":\"LeabraTrain\",\"wgCurRevisionId\":11266,\"wgRevisionId\":11266,\"wgArticleId\":2767,\"wgIsArticle\":!0,\"wgIsRedirect\":!1,\"wgAction\":\"view\",\"wgUserName\":\"Oreilly\",\"wgUserGroups\":[\"bureaucrat\",\"svnadmins\",\"sysop\",\"*\",\"user\",\"autoconfirmed\"],\"wgCategories\":[],\"wgBreakFrames\":!1,\"wgPageContentLanguage\":\"en\",\"wgPageContentModel\":\"wikitext\",\"wgSeparatorTransformTable\":[\"\",\"\"],\"wgDigitTransformTable\":[\"\",\"\"],\"wgDefaultDateFormat\":\"dmy\",\"wgMonthNames\":[\"\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\"wgMonthNamesShort\":[\"\",\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],\"wgRelevantPageName\":\"LeabraTrain\",\"wgRelevantArticleId\":2767,\"wgUserId\":3,\"wgUserEditCount\":2418,\"wgUserRegistration\":1178051527000,\"wgUserNewMsgRevisionId\":null,\"wgIsProbablyEditable\":!0,
\"wgRestrictionEdit\":[],\"wgRestrictionMove\":[],\"sfgAutocompleteValues\":[],\"sfgAutocompleteOnAllChars\":!1,\"sfgFieldProperties\":[],\"sfgDependentFields\":[],\"sfgShowOnSelect\":[],\"sfgScriptPath\":\"/emergent/extensions/SemanticForms\",\"wgSVGEditEditor\":\"http://svg-edit.googlecode.com/svn/trunk/editor/svg-editor.html\",\"wgHeaderTabsTabIndexes\":[],\"wgWikiEditorEnabledModules\":{\"toolbar\":!0,\"dialogs\":!0,\"preview\":!0,\"publish\":!1},\"wgCategoryTreePageCategoryOptions\":\"{\\\"mode\\\":0,\\\"hideprefix\\\":20,\\\"showcount\\\":true,\\\"namespaces\\\":false}\"});mw.loader.implement(\"user.options\",function($,jQuery){mw.user.options.set({\"ccmeonemails\":\"1\",\"enotifminoredits\":\"1\",\"imagesize\":\"0\",\"previewontop\":\"\",\"rows\":\"30\",\"thumbsize\":\"0\",\"underline\":\"0\",\"watchmoves\":\"1\",\"editsection\":\"1\",\"rememberpassword\":\"1\",\"timecorrection\":\"ZoneInfo|-360|America/Denver\",\"watchlisttoken\":\"14fd6c804d78e99930123181974c128b983adb9e\"});});mw.loader.implement(\"user.tokens\",function($,jQuery){mw.user.tokens.set({\"editToken\":\"3b26cf5f182fe7fb29af6a6ca01dd6cb57342b95+\\\\\",\"patrolToken\":\"6f879f5a78cf8bf62c088b26f37a826a57342b95+\\\\\",\"watchToken\":\"0f5971aae38fcb23ba50cc900260a01757342b95+\\\\\"});});mw.loader.load([\"ext.smw.style\",\"ext.smw.tooltips\",\"mediawiki.page.startup\",\"mediawiki.legacy.wikibits\",\"skins.vector.js\"]);
} );</script>
<link rel=\"stylesheet\" href=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.sectionAnchor%7Cmediawiki.skinning.interface%7Cskins.vector.styles&amp;only=styles&amp;skin=vector\">
<link rel=\"stylesheet\" href=\"/emergent/extensions/HeaderTabs/skins/ext.headertabs.large.css\">
<meta name=\"ResourceLoaderDynamicStyles\" content=\"\">
<link rel=\"stylesheet\" href=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector\">
<style>a{text-decoration:none}</style>
<script async=\"\" src=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector\"></script>
<meta name=\"generator\" content=\"MediaWiki 1.26.2\">
<link rel=\"ExportRDF\" type=\"application/rdf+xml\" title=\"LeabraTrain\" href=\"/emergent/index.php?title=Special:ExportRDF/LeabraTrain&amp;xmlmime=rdf\">
<link rel=\"alternate\" type=\"application/x-wiki\" title=\"Edit\" href=\"/emergent/index.php?title=LeabraTrain&amp;action=edit\">
<link rel=\"edit\" title=\"Edit\" href=\"/emergent/index.php?title=LeabraTrain&amp;action=edit\">
<link rel=\"shortcut icon\" href=\"/emergent/favicon.ico\">
<link rel=\"search\" type=\"application/opensearchdescription+xml\" href=\"/emergent/opensearch_desc.php\" title=\"emergent (en)\">
<link rel=\"EditURI\" type=\"application/rsd+xml\" href=\"https://grey.colorado.edu/emergent/api.php?action=rsd\">
<link rel=\"alternate\" type=\"application/atom+xml\" title=\"emergent Atom feed\" href=\"/emergent/index.php?title=Special:RecentChanges&amp;feed=atom\">
<!--[if lt IE 7]><style type=\"text/css\">body{behavior:url(\"/emergent/skins/Vector/csshover.min.htc\")}</style><![endif]-->
<script src=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=jquery%2Cmediawiki&amp;only=scripts&amp;skin=vector&amp;version=EaPOpX%2FG\"></script></head>
<body class=\"mediawiki ltr sitedir-ltr ns-0 ns-subject page-LeabraTrain skin-vector action-view\">
		<div id=\"mw-page-base\" class=\"noprint\"></div>
		<div id=\"mw-head-base\" class=\"noprint\"></div>
		<div id=\"content\" class=\"mw-body\" role=\"main\">
			<a id=\"top\"></a>

						<div class=\"mw-indicators\">
</div>
			<h1 id=\"firstHeading\" class=\"firstHeading\" lang=\"en\">LeabraTrain</h1>
									<div id=\"bodyContent\" class=\"mw-body-content\">
									<div id=\"siteSub\">From emergent</div>
								<div id=\"contentSub\"></div>
												<div id=\"jump-to-nav\" class=\"mw-jump\">
					Jump to:					<a href=\"#mw-head\">navigation</a>, 					<a href=\"#p-search\">search</a>
				</div>
				<div id=\"mw-content-text\" lang=\"en\" dir=\"ltr\" class=\"mw-content-ltr\"><p>LeabraTrain is the standard <a href=\"/emergent/index.php/Program\" title=\"Program\">Program</a> for training <a href=\"/emergent/index.php/Leabra\" title=\"Leabra\">Leabra</a> networks.  It iterates over <a href=\"/emergent/index.php?title=LeabraEpoch&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"LeabraEpoch (page does not exist)\">LeabraEpoch</a> epochs, optionally until a training criterion has been met, or for a specified maximum number of epochs.
</p><p>You can easily customize this program to do different things at different points in the training process, for example by examining the network.epoch value (or the local copy of that value, epoch).
</p>
<!-- 
NewPP limit report
Cached time: 20160512070701
Cache expiry: 86400
Dynamic content: false
CPU time usage: 0.011 seconds
Real time usage: 0.014 seconds
Preprocessor visited node count: 1/1000000
Preprocessor generated node count: 4/1000000
Post?expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 1/40
Expensive parser function count: 0/100
-->

<!-- 
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 - -total
-->

<!-- Saved in parser cache with key pdpwiki:pcache:idhash:2767-0!*!0!*!*!*!* and timestamp 20160512070701 and revision id 11266
 -->
</div>					<div class=\"printfooter\">
						Retrieved from \"<a dir=\"ltr\" href=\"https://grey.colorado.edu/emergent/index.php?title=LeabraTrain&amp;oldid=11266\">https://grey.colorado.edu/emergent/index.php?title=LeabraTrain&amp;oldid=11266</a>\"					</div>
				<div id=\"catlinks\" class=\"catlinks catlinks-allhidden\"></div>				<div class=\"visualClear\"></div>
							</div>
		</div>
		<div id=\"mw-navigation\">
			<h2>Navigation menu</h2>

			<div id=\"mw-head\">
									<div id=\"p-personal\" role=\"navigation\" class=\"\" aria-labelledby=\"p-personal-label\">
						<h3 id=\"p-personal-label\">Personal tools</h3>
						<ul>
							<li id=\"pt-userpage\"><a href=\"/emergent/index.php/User:Oreilly\" dir=\"auto\" title=\"Your user page [.]\" accesskey=\".\">Oreilly</a></li><li id=\"pt-mytalk\"><a href=\"/emergent/index.php/User_talk:Oreilly\" class=\"new\" title=\"Your talk page [n]\" accesskey=\"n\">Talk</a></li><li id=\"pt-preferences\"><a href=\"/emergent/index.php/Special:Preferences\" title=\"Your preferences\">Preferences</a></li><li id=\"pt-watchlist\"><a href=\"/emergent/index.php/Special:Watchlist\" title=\"A list of pages you are monitoring for changes [l]\" accesskey=\"l\">Watchlist</a></li><li id=\"pt-mycontris\"><a href=\"/emergent/index.php/Special:Contributions/Oreilly\" title=\"A list of your contributions [y]\" accesskey=\"y\">Contributions</a></li><li id=\"pt-logout\"><a href=\"/emergent/index.php?title=Special:UserLogout&amp;returnto=LeabraTrain\" title=\"Log out\">Log out</a></li>						</ul>
					</div>
									<div id=\"left-navigation\">
										<div id=\"p-namespaces\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-namespaces-label\">
						<h3 id=\"p-namespaces-label\">Namespaces</h3>
						<ul>
															<li id=\"ca-nstab-main\" class=\"selected\"><span><a href=\"/emergent/index.php/LeabraTrain\" title=\"View the content page [c]\" accesskey=\"c\">Page</a></span></li>
															<li id=\"ca-talk\" class=\"new\"><span><a href=\"/emergent/index.php?title=Talk:LeabraTrain&amp;action=edit&amp;redlink=1\" title=\"Discussion about the content page [t]\" accesskey=\"t\" rel=\"discussion\">Discussion</a></span></li>
													</ul>
					</div>
										<div id=\"p-variants\" role=\"navigation\" class=\"vectorMenu emptyPortlet\" aria-labelledby=\"p-variants-label\">
												<h3 id=\"p-variants-label\">
							<span>Variants</span><a href=\"#\"></a>
						</h3>

						<div class=\"menu\">
							<ul>
															</ul>
						</div>
					</div>
									</div>
				<div id=\"right-navigation\">
										<div id=\"p-views\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-views-label\">
						<h3 id=\"p-views-label\">Views</h3>
						<ul>
															<li id=\"ca-view\" class=\"selected\"><span><a href=\"/emergent/index.php/LeabraTrain\">Read</a></span></li>
															<li id=\"ca-edit\"><span><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=edit\" title=\"Edit this page [e]\" accesskey=\"e\">Edit</a></span></li>
															<li id=\"ca-history\" class=\"collapsible\"><span><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=history\" title=\"Past revisions of this page [h]\" accesskey=\"h\">View history</a></span></li>
															<li id=\"ca-unwatch\" class=\"icon\"><span><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=unwatch&amp;token=c6d7363e22d4c0d44ac7ca2a8c59165157342b95%2B%5C\" title=\"Remove this page from your watchlist [w]\" accesskey=\"w\">Unwatch</a></span></li>
													</ul>
					</div>
										<div id=\"p-cactions\" role=\"navigation\" class=\"vectorMenu\" aria-labelledby=\"p-cactions-label\">
						<h3 id=\"p-cactions-label\"><span>More</span><a href=\"#\"></a></h3>

						<div class=\"menu\">
							<ul>
																	<li id=\"ca-delete\">
										<a href=\"/emergent/index.php?title=LeabraTrain&amp;action=delete\" title=\"Delete this page [d]\" accesskey=\"d\">Delete</a>
									</li>
																	<li id=\"ca-move\">
										<a href=\"/emergent/index.php/Special:MovePage/LeabraTrain\" title=\"Move this page [m]\" accesskey=\"m\">Move</a>
									</li>
																	<li id=\"ca-protect\">
										<a href=\"/emergent/index.php?title=LeabraTrain&amp;action=protect\" title=\"Protect this page [=]\" accesskey=\"=\">Protect</a>
									</li>
																	<li id=\"ca-purge\">
										<a href=\"/emergent/index.php?title=LeabraTrain&amp;action=purge\">Refresh</a>
									</li>
															</ul>
						</div>
					</div>
										<div id=\"p-search\" role=\"search\">
						<h3>
							<label for=\"searchInput\">Search</label>
						</h3>

						<form action=\"/emergent/index.php\" id=\"searchform\">
							<div id=\"simpleSearch\">
							<input type=\"search\" name=\"search\" placeholder=\"Search\" title=\"Search emergent [f]\" accesskey=\"f\" id=\"searchInput\"><input type=\"hidden\" value=\"Special:Search\" name=\"title\"><input type=\"submit\" name=\"fulltext\" value=\"Search\" title=\"Search the pages for this text\" id=\"mw-searchButton\" class=\"searchButton mw-fallbackSearchButton\"><input type=\"submit\" name=\"go\" value=\"Go\" title=\"Go to a page with this exact name if it exists\" id=\"searchButton\" class=\"searchButton\">							</div>
						</form>
					</div>
									</div>
			</div>
			<div id=\"mw-panel\">
				<div id=\"p-logo\" role=\"banner\"><a class=\"mw-wiki-logo\" href=\"/emergent/index.php/Main_Page\" title=\"Visit the main page\"></a></div>
						<div class=\"portal\" role=\"navigation\" id=\"p-navigation\" aria-labelledby=\"p-navigation-label\">
			<h3 id=\"p-navigation-label\">Navigation</h3>

			<div class=\"body\">
									<ul>
						<li id=\"n-mainpage-description\"><a href=\"/emergent/index.php/Main_Page\" title=\"Visit the main page [z]\" accesskey=\"z\">Main page</a></li><li id=\"n-recentchanges\"><a href=\"/emergent/index.php/Special:RecentChanges\" title=\"A list of recent changes in the wiki [r]\" accesskey=\"r\">Recent changes</a></li><li id=\"n-Documentation\"><a href=\"/emergent/index.php/User_hub\">Documentation</a></li><li id=\"n-Submit-a-bug\"><a href=\"/emergent/index.php/How_to_submit_a_bug_report\">Submit a bug</a></li><li id=\"n-Bug-tracker\"><a href=\"//grey.colorado.edu/cgi-bin/bugzilla/index.cgi\" rel=\"nofollow\">Bug tracker</a></li><li id=\"n-Mailing-list\"><a href=\"//grey.colorado.edu/cgi-bin/mailman/listinfo/emergent-users\" rel=\"nofollow\">Mailing list</a></li>					</ul>
							</div>
		</div>
			<div class=\"portal\" role=\"navigation\" id=\"p-tb\" aria-labelledby=\"p-tb-label\">
			<h3 id=\"p-tb-label\">Tools</h3>

			<div class=\"body\">
									<ul>
						<li id=\"t-whatlinkshere\"><a href=\"/emergent/index.php/Special:WhatLinksHere/LeabraTrain\" title=\"A list of all wiki pages that link here [j]\" accesskey=\"j\">What links here</a></li><li id=\"t-recentchangeslinked\"><a href=\"/emergent/index.php/Special:RecentChangesLinked/LeabraTrain\" title=\"Recent changes in pages linked from this page [k]\" accesskey=\"k\">Related changes</a></li><li id=\"t-upload\"><a href=\"/emergent/index.php/Special:Upload\" title=\"Upload files [u]\" accesskey=\"u\">Upload file</a></li><li id=\"t-specialpages\"><a href=\"/emergent/index.php/Special:SpecialPages\" title=\"A list of all special pages [q]\" accesskey=\"q\">Special pages</a></li><li id=\"t-permalink\"><a href=\"/emergent/index.php?title=LeabraTrain&amp;oldid=11266\" title=\"Permanent link to this revision of the page\">Permanent link</a></li><li id=\"t-info\"><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=info\" title=\"More information about this page\">Page information</a></li><li id=\"t-smwbrowselink\"><a href=\"/emergent/index.php/Special:Browse/LeabraTrain\" rel=\"smw-browse\">Browse properties</a></li>					</ul>
							</div>
		</div>
			<div class=\"portal\" role=\"navigation\" id=\"p-coll-print_export\" aria-labelledby=\"p-coll-print_export-label\">
			<h3 id=\"p-coll-print_export-label\">Print/export</h3>

			<div class=\"body\">
									<ul>
						<li id=\"coll-create_a_book\"><a href=\"/emergent/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=LeabraTrain\">Create a book</a></li><li id=\"coll-download-as-rl\"><a href=\"/emergent/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=LeabraTrain&amp;oldid=11266&amp;writer=rl\">Download as PDF</a></li><li id=\"t-print\"><a href=\"/emergent/index.php?title=LeabraTrain&amp;printable=yes\" title=\"Printable version of this page [p]\" accesskey=\"p\">Printable version</a></li>					</ul>
							</div>
		</div>
				</div>
		</div>
		<div id=\"footer\" role=\"contentinfo\">
							<ul id=\"footer-info\">
											<li id=\"footer-info-lastmod\"> This page was last modified on 12 May 2016, at 01:07.</li>
									</ul>
							<ul id=\"footer-places\">
											<li id=\"footer-places-about\"><a href=\"/emergent/index.php/emergent:About\" title=\"emergent:About\">About emergent</a></li>
									</ul>
										<ul id=\"footer-icons\" class=\"noprint\">
											<li id=\"footer-poweredbyico\">
							<a href=\"//www.mediawiki.org/\"><img src=\"/emergent/resources/assets/poweredby_mediawiki_88x31.png\" alt=\"Powered by MediaWiki\" srcset=\"/emergent/resources/assets/poweredby_mediawiki_132x47.png 1.5x, /emergent/resources/assets/poweredby_mediawiki_176x62.png 2x\" width=\"88\" height=\"31\"></a><a href=\"https://www.semantic-mediawiki.org/wiki/Semantic_MediaWiki\"><img src=\"/emergent/extensions/SemanticMediaWiki/resources/images/smw_button.png\" alt=\"Powered by Semantic MediaWiki\" width=\"88\" height=\"31\"></a>						</li>
									</ul>
						<div style=\"clear:both\"></div>
		</div>
		<script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.loader.state({\"user\":\"ready\",\"user.groups\":\"ready\"});mw.loader.load([\"mediawiki.action.view.postEdit\",\"site\",\"mediawiki.user\",\"mediawiki.hidpi\",\"mediawiki.page.ready\",\"mediawiki.searchSuggest\",\"mediawiki.page.watch.ajax\",\"ext.headertabs\"]);
} );</script><script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({\"wgBackendResponseTime\":155});
} );</script>
	

</body></html>";
    };
   };
   Program @[2] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][2].doc$$: };
    };
    name="LeabraEpoch";
    short_nm="Epoch";
    tags="Leabra, Std";
    desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=2;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=1;
      completion_type=;
      object_scope=NULL;
      hard_enum_type=DataLoop::Order;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[1][1]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="step_on_err";
      var_type=T_Bool;
      bool_val=0;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="when you step at the Epoch level, this will automatically step through to the next point at which an error was made -- you can use the netview history to replay what happend";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      completion_type=;
      object_val=$.networks[0].epoch_time$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=4;
      completion_type=;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInittrial";
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=.programs.gp[1][2].args[0]$$;
      local_ctr_var=.programs.gp[1][2].vars[1]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=.programs.gp[1][2].vars[4]$$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInittrial";
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=$.programs.gp[1][2].args[0]$;
      local_ctr_var=$.programs.gp[1][2].vars[1]$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=$.programs.gp[1][2].vars[4]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[2] {
      name="MethodCall_epochtimerStartTimertrue";
      desc="start the epoch timer to record computation time per epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->StartTimer(true)";
      result_var=NULL;
      obj=$.programs.gp[1][2].vars[4]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     MethodCall @[3] {
      name="MethodCall_networkInitEpoch";
      desc="added in 8.0: essential for param_seqs";
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="network->Init_Epoch()";
      result_var=NULL;
      obj=$.programs.gp[1][2].args[0]$;
      method=Network::Init_Epoch;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_Epoch()";
      meth_desc=" Initializes network state at the start of a new epoch -- updates parameters according to param_seq for example";
     };
     MethodCall @[4] {
      name="MethodCall_trialmondataResetData";
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->ResetData()";
      result_var=NULL;
      obj=.programs.gp[1][2].vars[2]$$;
      method=DataTable::ResetData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void ResetData()";
      meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
     };
     NetDataLoop @[5] {
      name="NetDataLoop_NetDataLoopPERMU_ardatalooporder";
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Data Loop (PERMUTED):  table=input_data  index=data_loop_index  order_var=data_loop_order ";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraTrialnetworkinputdata";
	desc="run the trial program, passing network and input_data";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraTrial(network, input_data)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.programs.gp[1][3]$$;
	targ_ld_init="*LeabraTrial*";
       };
       If @[1] {
	name="If_ifsteponerrnetworksse00";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (step_on_err && network.sse > 0.0)";
	cond {
	 expr="step_on_err && network.sse > 0.0";
	};
	true_code {
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 StopStepPoint @[0] {
	  name="StopStepPoint_StopStepPoint";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="Stop_Step Point";
	  cond {
	   expr=;
	  };
	 };
	};
       };
      };
      data_var=.programs.gp[1][2].args[1]$$;
      index_var=.programs.gp[1][2].vars[5]$$;
      order_var=.programs.gp[1][2].vars[0]$$;
      order=PERMUTED;
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     If @[6] {
      name="If_ifnetworkwtupdateNetworkBATCH";
      desc="if full batch mode, update only at end of epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.wt_update == Network::BATCH)";
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkComputeWeights";
	desc="final update of weights based on accumulated changes";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=$.programs.gp[1][2].args[0]$;
	method=Network::Compute_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[7] {
      name="MethodCall_networkComputeEpochStats";
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_EpochStats()";
      result_var=NULL;
      obj=$.programs.gp[1][2].args[0]$;
      method=Network::Compute_EpochStats;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_EpochStats()";
      meth_desc=" compute epoch-level statistics; calls DMem_ComputeAggs (if dmem) and EpochSSE -- specific algos may add more";
     };
     MethodCall @[8] {
      name="MethodCall_epochtimerEndTimer";
      desc="done with the computation in the epoch -- record time it took";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->EndTimer()";
      result_var=NULL;
      obj=$.programs.gp[1][2].vars[4]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
     ProgramCall @[9] {
      name="ProgramCall_LeabraEpochMonitornetwork";
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraEpochMonitor(network)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=.programs.gp[1][8]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraEpoch";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraEpoch";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[3] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][3].doc$$: };
    };
    name="LeabraTrial";
    short_nm="Trial";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/output event or external information, over a single alpha frequency cycle (100 msec / 10 Hz) -- iterates over gamma-frequency (25 msec / 40 Hz) quarter-trials";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      name="LocalVars_LocalVars1vars";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (1 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="qtr";
	var_type=T_Int;
	int_val=0;
	completion_type=;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     If @[1] {
      name="If_ifnetworkCompute_stnetworktrial1";
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.Compute_Weights_Test(network.trial+1))";
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkComputeWeights";
	desc="update weights -- do this at start instead of end, so that dwt is valid";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=.programs.gp[1][3].args[0]$$;
	method=Network::Compute_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[2] {
      name="MethodCall_networkTrialInit";
      desc="initializes various counters at start of trial";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Init()";
      result_var=NULL;
      obj=$.programs.gp[1][3].args[0]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Init()";
      meth_desc=" initialize at start of trial (init specs, Decay state)";
     };
     Comment @[3] {
      name="Comment_notecanapplyinpu_Quarterasneeded";
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[4] {
      name="MethodCall_networkInitInputData";
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.programs.gp[1][3].args[0]$;
      method=Network::Init_InputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[5] {
      name="ProgramCall_ApplyInputsnetworkinputdata";
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=CAN_REVERT_TO_CODE;
      code_string="ApplyInputs(network, input_data)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=.programs.gp[1][6]$$;
      targ_ld_init="*ApplyInputs*";
     };
     ForLoop @[6] {
      name="ForLoop_forqtr0qtr4qtr";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="for (qtr = 0; qtr < 4; qtr++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraQuarternetworkinputdata";
	desc="run the quarter program (which iterates over cyles of network activation updating) for each quarter";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraQuarter(network, input_data)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.programs.gp[1][4]$$;
	targ_ld_init="*LeabraQuarter*";
       };
      };
      init {
       expr="qtr = 0";
      };
      test {
       expr="qtr < 4";
      };
      iter {
       expr="qtr++";
      };
     };
     MethodCall @[7] {
      name="MethodCall_networkTrialFinal";
      desc="after the trial is over, do final computations";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Final()";
      result_var=NULL;
      obj=$.programs.gp[1][3].args[0]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Final()";
      meth_desc=" do final processing after trial: Compute_AbsRelNetin";
     };
     ProgramCall @[8] {
      name="ProgramCall_LeabraTrialMonitornetwork";
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraTrialMonitor(network)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=.programs.gp[1][7]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[9] {
      name="NetUpdateView_NetUpdateView";
      desc="update the network view(s) (only if update_net_view is true)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[1][3].args[0]$;
      update_var=.programs.gp[1][3].vars[0]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraTrial";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraTrial";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[4] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][4].doc$$: };
    };
    name="LeabraQuarter";
    short_nm="Quarter";
    tags="Leabra, Std";
    desc="iterates over cycles of activation updating for a gamma-frequency (25 msec / 40 Hz) quarter of an alpha frequency (100 msec / 10 Hz) trial";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=0;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInitcycle";
      desc="initialize local cycle counter and corresponding counter on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: cycle";
      network_var=.programs.gp[1][4].args[0]$$;
      local_ctr_var=.programs.gp[1][4].vars[0]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      name="LocalVars_LocalVars2vars";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (2 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="cycle_max";
	var_type=T_Int;
	int_val=0;
	completion_type=;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @[1] {
	name="cyc";
	var_type=T_Int;
	int_val=0;
	completion_type=;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     Comment @[1] {
      name="Comment_notecanapplyinpu_Quarterasneeded";
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[2] {
      name="MethodCall_networkInitInputData";
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.programs.gp[1][4].args[0]$;
      method=Network::Init_InputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[3] {
      name="ProgramCall_ApplyInputsnetworkinputdata";
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="ApplyInputs(network, input_data)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=$.programs.gp[1][6]$;
      targ_ld_init="*ApplyInputs*";
     };
     MethodCall @[4] {
      name="MethodCall_networkQuarterInit";
      desc="initializes various counters at start of settling";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Init()";
      result_var=NULL;
      obj=$.programs.gp[1][4].args[0]$;
      method=LeabraNetwork::Quarter_Init;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Init()";
      meth_desc=" initialize network for quarter-level processing (hard clamp, netscale)";
     };
     MethodCall @[5] {
      name="MethodCall_cyclemaxnetworkCycleRunMax";
      desc="will be 25 if network times.cycle_qtr is true, else 1";
      flags=CAN_REVERT_TO_CODE;
      code_string="cycle_max = network->CycleRunMax()";
      result_var=.programs.gp[1][4].prog_code[0].local_vars[0]$$;
      obj=$.programs.gp[1][4].args[0]$;
      method=LeabraNetwork::CycleRunMax;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int CycleRunMax()";
      meth_desc=" max loop counter for running cycles in a gamma quarter of processing, taking into account the fact that threading can run multiple cycles per Cycle_Run call if quarter flag is set";
     };
     ForLoop @[6] {
      name="ForLoop_forcyc0cyccyclemaxcyc";
      desc="// the main loop over cycles of updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="for (cyc=0; cyc<cycle_max; cyc++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraCyclenetwork";
	desc="run the cycle program -- can run multiple cycles at a time due to threading";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraCycle(network)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=.programs.gp[1][5]$$;
	targ_ld_init="*LeabraCycle*";
       };
       AssignExpr @[1] {
	name="AssignExpr_cyclenetworkcycle";
	desc="grab the updated cycle count";
	flags=CAN_REVERT_TO_CODE;
	code_string="cycle = network.cycle";
	result_var=$.programs.gp[1][4].vars[0]$;
	expr {
	 expr="network.cycle";
	};
       };
      };
      init {
       expr="cyc=0";
      };
      test {
       expr="cyc<cycle_max";
      };
      iter {
       expr="cyc++";
      };
     };
     MethodCall @[7] {
      name="MethodCall_networkQuarterFinal";
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Final()";
      result_var=NULL;
      obj=$.programs.gp[1][4].args[0]$;
      method=LeabraNetwork::Quarter_Final;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Final()";
      meth_desc=" do final processing after each quarter: ";
     };
     MethodCall @[8] {
      name="MethodCall_networkComputePhaseStats";
      desc="compute appropriate stats for each phase (MinusStats, PlusStats)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_PhaseStats()";
      result_var=NULL;
      obj=$.programs.gp[1][4].args[0]$;
      method=LeabraNetwork::Compute_PhaseStats;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_PhaseStats()";
      meth_desc=" compute MinusStats at the end of the minus phase, and PlusStats at the end of the plus phase -- this is preferred over the previous implementation of calling TrialStats only at the end of the minus phase, which required targets to be present in the minus phase, which is not always the case";
     };
     NetUpdateView @[9] {
      name="NetUpdateView_NetUpdateView";
      desc="update network views, if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[1][4].args[0]$;
      update_var=.programs.gp[1][4].vars[1]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraQuarter";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraQuarter";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[5] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][5].doc$$: };
    };
    name="LeabraCycle";
    short_nm="Cycle";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_networkCycleRun";
      desc="this does all the standard leabra processing of activation updating -- either 1 cycle (1 msec) or 25 cycles if times.cycle_qtr is TRUE (default)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Cycle_Run()";
      result_var=NULL;
      obj=.programs.gp[1][5].args[0]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Cycle_Run()";
      meth_desc=" compute cycle(s) of updating: netinput, inhibition, activations -- multiple cycles can be run depending on lthreads.n_cycles setting and whether multiple threads are actually being used -- see lthreads.n_threads_act";
     };
     NetUpdateView @[1] {
      name="NetUpdateView_NetUpdateView";
      desc="update network views if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[1][5].args[0]$;
      update_var=.programs.gp[1][5].vars[0]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraCycle";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraCycle";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[6] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][6].doc$$: };
    };
    name="ApplyInputs";
    short_nm="Inputs";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @[0] {
      name="LayerWriter_0";
      data=$.data.gp[0][0]$;
      network=$.networks[0]$;
      layer_data {
       name="layer_data";
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	off=0;
	col_name="Input";
	net_target=LAYER;
	layer_name="Input";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="RandomSpec_7": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	off=0;
	col_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=0;
	noise {name="RandomSpec_9": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	off=0;
	col_name="Output";
	net_target=LAYER;
	layer_name="Output";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=TARG;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      completion_type=;
      object_val=.programs.gp[1][6].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_LayerWriter0SetD_nputdatanetwork";
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=.programs.gp[1][6].vars[0]$$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      name="MethodCall_LayerWriter0AutoConfig";
      desc="configure to fit the network and input data -- this may cause spurious warning messages and problems in some cases so just turn it OFF if necessary";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->AutoConfig()";
      result_var=NULL;
      obj=$.programs.gp[1][6].vars[0]$;
      method=LayerWriter::AutoConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="remove_unused";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 expr=;
	};
       };
      };
      meth_sig="void AutoConfig(bool remove_unused = true)";
      meth_desc=" do a 'best guess' configuration of items by matching up like-named data Channels and network Layers -- if remove_unused is true, then layer writer elements that existed previously but were not found in input data and network are removed";
     };
     MethodCall @[2] {
      name="MethodCall_LayerWriter0CheckConfigfalse";
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->CheckConfig(false)";
      result_var=NULL;
      obj=$.programs.gp[1][6].vars[0]$;
      method=taList_impl::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_LayerWriter0SetD_nputdatanetwork";
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=$.programs.gp[1][6].vars[0]$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      name="MethodCall_LayerWriter0ApplyInputData";
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->ApplyInputData()";
      result_var=NULL;
      obj=$.programs.gp[1][6].vars[0]$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="bool ApplyInputData()";
      meth_desc=" apply data to the layers, using the network's current context settings (TEST,TRAIN,etc) -- returns success";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="ApplyInputs";
     full_url="https://grey.colorado.edu/emergent/index.php/ApplyInputs";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[7] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][7].doc$$: };
    };
    name="LeabraTrialMonitor";
    short_nm="TrialMon";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       ignore_sig=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="train_mode";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="train_mode";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="group";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="group";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="tick";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="tick";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="time";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="time";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="output_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="rt_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="rt_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[11] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[12] {
	name="norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="norm_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[13] {
	name="cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="cos_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[14] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[15] {
	name="lay_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.sse";
	var_label="lay_sse";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[16] {
	name="lay_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.norm_err";
	var_label="lay_norm_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[17] {
	name="lay_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.cos_err";
	var_label="lay_cos_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[18] {
	name="lay_net_sd";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.net_sd";
	var_label="lay_net_sd";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[19] {
	name="net_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="cos_diff";
	var_label="net_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[20] {
	name="net_trial_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="trial_cos_diff";
	var_label="net_trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[21] {
	name="net_avg_act_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_act_diff";
	var_label="net_avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[22] {
	name="cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.cos_diff";
	var_label="cos_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[23] {
	name="trial_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.trial_cos_diff";
	var_label="trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[24] {
	name="avg_act_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_act_diff";
	var_label="avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.networks[0]$;
      data=$.data.gp[1][1]$;
      rmv_orphan_cols=1;
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[1][1]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      completion_type=;
      object_val=.programs.gp[1][7].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_trialnetmonSetDa_lmondatanetwork";
      desc="set the network and datatable for the NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->SetDataNetwork(trial_mon_data, network)";
      result_var=NULL;
      obj=.programs.gp[1][7].vars[1]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[1] {
      name="MethodCall_trialnetmonCheckConfigfalse";
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.programs.gp[1][7].vars[1]$;
      method=taBase::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[2] {
      name="MethodCall_trialnetmonUpdateMonitorstrue";
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.programs.gp[1][7].vars[1]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_trialmondataAddBlankRow";
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.programs.gp[1][7].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      name="MethodCall_trialnetmonGetMonVals";
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.programs.gp[1][7].vars[1]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     MethodCall @[2] {
      name="MethodCall_trialmondataWriteClose";
      desc="update views and other things after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.programs.gp[1][7].vars[0]$;
      method=DataTable::WriteClose;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     MethodCall @[3] {
      name="MethodCall_networkDMemShare_tatrialmondata1";
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->DMem_ShareTrialData(trial_mon_data, 1)";
      result_var=NULL;
      obj=.programs.gp[1][7].args[0]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	prev_expr=;
	expr {
	 expr="1";
	};
       };
      };
      meth_sig="void DMem_ShareTrialData(DataTable* dt, int n_rows = 1)";
      meth_desc=" share trial data from given datatable across the trial-level dmem communicator (outer loop) -- each processor gets data from all other processors; if called every trial with n_rows = 1, data will be identical to non-dmem; if called at end of epoch with n_rows = -1 data will be grouped by processor but this is more efficient";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="Monitor_Data";
     full_url="https://grey.colorado.edu/emergent/index.php/Monitor_Data";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[8] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][8].doc$$: };
    };
    name="LeabraEpochMonitor";
    short_nm="EpcMon";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       ignore_sig=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="pct_cor";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="pct_cor";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="pct_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="pct_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="avg_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_norm_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="avg_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_cos_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[11] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[12] {
	name="lay_avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_sse";
	var_label="lay_avg_sse";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[13] {
	name="lay_cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.cnt_err";
	var_label="lay_cnt_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[14] {
	name="lay_pct_cor";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.pct_cor";
	var_label="lay_pct_cor";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[15] {
	name="lay_pct_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.pct_err";
	var_label="lay_pct_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[16] {
	name="lay_avg_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_norm_err";
	var_label="lay_avg_norm_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[17] {
	name="lay_avg_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_cos_err";
	var_label="lay_avg_cos_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[18] {
	name="net_avg_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_cos_diff";
	var_label="net_avg_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[19] {
	name="net_avg_trial_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_trial_cos_diff";
	var_label="net_avg_trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[20] {
	name="net_avg_avg_act_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_avg_act_diff";
	var_label="net_avg_avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[21] {
	name="avg_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_cos_diff";
	var_label="avg_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[22] {
	name="avg_trial_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_trial_cos_diff";
	var_label="avg_trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[23] {
	name="avg_avg_act_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_avg_act_diff";
	var_label="avg_avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[24] {
	name="avg_net_sd";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_net_sd";
	var_label="avg_net_sd";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[25] {
	name="hog_pct";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.hog_pct";
	var_label="hog_pct";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[26] {
	name="dead_pct";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.dead_pct";
	var_label="dead_pct";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[27] {
	name="netmax";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_netin.max";
	var_label="netmax";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[28] {
	name="avg_act";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable=".layers.acts_p_avg";
	var_label="avg_act";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[29] {
	name="netrel";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="prjns.avg_netin_rel";
	var_label="netrel";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.networks[0]$;
      data=.data.gp[1][0]$$;
      rmv_orphan_cols=1;
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[1][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      completion_type=;
      object_val=.programs.gp[1][8].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      completion_type=;
      object_val=$.networks[0].epoch_time$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get the epoch timer from current network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=.programs.gp[1][8].vars[2]$$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      name="MethodCall_epochnetmonSetDa_hmondatanetwork";
      desc="set data and network on NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->SetDataNetwork(epoch_mon_data, network)";
      result_var=NULL;
      obj=.programs.gp[1][8].vars[1]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[2] {
      name="MethodCall_epochnetmonCheckConfigfalse";
      desc="check configuration and emit errors/warnings for problems";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.programs.gp[1][8].vars[1]$;
      method=taBase::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[3] {
      name="MethodCall_epochnetmonUpdateMonitorstrue";
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.programs.gp[1][8].vars[1]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_epochmondataAddBlankRow";
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.programs.gp[1][8].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      name="MethodCall_epochnetmonGetMonVals";
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.programs.gp[1][8].vars[1]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     AssignExpr @[2] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get the epoch timer from current network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=$.programs.gp[1][8].vars[2]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      name="MethodCall_epochmondataSetV_csepochtimetot1";
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetTotSecs(), \"epoch_time_tot\", -1, )";
      result_var=NULL;
      obj=$.programs.gp[1][8].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[4] {
      name="MethodCall_epochmondataSetV_csepochtimeusr1";
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetUsrSecs(), \"epoch_time_usr\", -1, )";
      result_var=NULL;
      obj=$.programs.gp[1][8].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[5] {
      name="MethodCall_epochmondataWriteClose";
      desc="update after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.programs.gp[1][8].vars[0]$;
      method=DataTable::WriteClose;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     Comment @[6] {
      name="Comment_NOTEifdoingaTest_atablecorrectly";
      desc="NOTE: if doing a TestEpoch and wanting to include test results in this train epoch log, then see these instructions:
http://grey.colorado.edu/emergent/index.php/Test_Programs
quick summary here:
* Add computed, data_agg, op = LAST items to epoch_netmon to grab from the EpochTestOutputData table.
* duplicate this program, call the new one LeabraEpochMonitor_postest, remove all netmon items for training, leaving only test,
  turn off rmv_orphan_cols flag, and set arg for UpdateMonitors in init_code to false
* in original LeabraEpochMonitor, click OFF flag for WriteClose() line
* in LeabraEpoch add call to LeabraEpochTest, then _posttest after the first LeabraEpochMonitor call.
This will ensure that training data is monitored first, right after the training epoch, and then the test epoch is run,
and the testing data is updated.  The first epoch monitor should have all the items, so that it formats the data table correctly.
 
";
      flags=CAN_REVERT_TO_CODE;
      code_string="// NOTE: if doing a TestEpoch and wanting to include test results in this train epoch log, then see these instructions:
http://grey.colorado.edu/emergent/index.php/Test_Programs
quick summary here:
* Add computed, data_agg, op = LAST items to epoch_netmon to grab from the EpochTestOutputData table.
* duplicate this program, call the new one LeabraEpochMonitor_postest, remove all netmon items for training, leaving only test,
  turn off rmv_orphan_cols flag, and set arg for UpdateMonitors in init_code to false
* in original LeabraEpochMonitor, click OFF flag for WriteClose() line
* in LeabraEpoch add call to LeabraEpochTest, then _posttest after the first LeabraEpochMonitor call.
This will ensure that training data is monitored first, right after the training epoch, and then the test epoch is run,
and the testing data is updated.  The first epoch monitor should have all the items, so that it formats the data table correctly.
 
";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="Monitor_Data";
     full_url="https://grey.colorado.edu/emergent/index.php/Monitor_Data";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[9] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][9].doc$$: };
    };
    name="SaveWeights";
    short_nm="SavWts";
    tags="Network, Weights";
    desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="tag";
      var_type=T_String;
      string_val="_gui";
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="user-provided tag (startup script will set this!)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="wts_subdir";
      var_type=T_String;
      string_val=;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="user-provided subdirectory to save weights in";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="fname";
      var_type=T_String;
      string_val="/Users/oreilly/emergent/test/leabra_std.00_0010.wts.gz";
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="final generated file name -- do not edit!";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="epoch_str";
      var_type=T_String;
      string_val="0010";
      completion_type=;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="string rep of epoch with leading zeros";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="batch_str";
      var_type=T_String;
      string_val="00";
      completion_type=;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="string rep of batch with leading zeros";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="final_tag";
      var_type=T_String;
      string_val=".00_0010";
      completion_type=;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch + epoch";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     If @[0] {
      name="If_iftaMiscdmemproc0";
      desc=;
      flags=0;
      code_string=;
      cond {
       expr="taMisc::dmem_proc > 0";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       ReturnExpr @[0] {
	name="ReturnExpr_return";
	desc=;
	flags=0;
	code_string=;
	expr {
	 expr=;
	};
       };
      };
     };
     MiscCall @[1] {
      name="MiscCall_batchstrtaMiscLe_osnetworkbatch2";
      desc="get current batch counter for file name, with leading zeros to length 3";
      flags=CAN_REVERT_TO_CODE;
      code_string="batch_str = taMisc::LeadingZeros(network.batch, 2)";
      result_var=.programs.gp[1][9].vars[4]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network.batch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="2";
	};
       };
      };
     };
     MiscCall @[2] {
      name="MiscCall_epochstrtaMiscLe_osnetworkepoch4";
      desc="get current epoch counter with leading zeros to length 4";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_str = taMisc::LeadingZeros(network.epoch, 4)";
      result_var=.programs.gp[1][9].vars[3]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network.epoch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="4";
	};
       };
      };
     };
     AssignExpr @[3] {
      name="AssignExpr_finaltagtagbatchstrepochstr";
      desc="string 'tag' to identify the batch, epoch, and other user id info for the weights";
      flags=CAN_REVERT_TO_CODE;
      code_string="final_tag = tag + \".\" + batch_str + \"_\" + epoch_str";
      result_var=.programs.gp[1][9].vars[5]$$;
      expr {
       expr="tag + \".\" + batch_str + \"_\" + epoch_str";
      };
     };
     MethodCall @[4] {
      name="MethodCall_fnamenetworkGetF_gwtssubdirfalse";
      desc="get a file name based on the project's current file name, for saving the weights";
      flags=CAN_REVERT_TO_CODE;
      code_string="fname = network->GetFileNameFmProject(\".wts.gz\", final_tag, wts_subdir, false)";
      result_var=.programs.gp[1][9].vars[2]$$;
      obj=.programs.gp[1][9].args[0]$$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ext";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="\".wts.gz\"";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="final_tag";
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="wts_subdir";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
      meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
     };
     MethodCall @[5] {
      name="MethodCall_networkSaveWeigh_meNetworkNETFMT";
      desc="save the weights to that file name";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->SaveWeights(fname, Network::NET_FMT)";
      result_var=NULL;
      obj=$.programs.gp[1][9].args[0]$;
      method=Network::SaveWeights;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="taString&";
	name="fname";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="fname";
	};
       };
       ProgArg @[1] {
	arg_type=Network::WtSaveFormat;
	type="Network::WtSaveFormat";
	name="fmt";
	required=0;
	def_val="Network::NET_FMT";
	prev_expr=;
	expr {
	 expr="Network::NET_FMT";
	};
       };
      };
      meth_sig="void SaveWeights(taString& fname, Network::WtSaveFormat fmt = NET_FMT)";
      meth_desc=" write weight values out in a simple ordered list of weights (optionally in binary fmt) (leave fname empty to pull up file chooser)";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="SaveWeights";
     full_url="https://grey.colorado.edu/emergent/index.php/SaveWeights";
     text_size=1;
     text=;
     html_text=;
    };
   };
  };
 };
 viewers {
  name="viewers";
  el_typ=MainWindowViewer;
  el_def=0;
  MainWindowViewer @[0] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_118";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="view_win_lft": value=-0.004166667: val_type_fixed=0: };
    UserDataItem @[1] {name="view_win_top": value=-0.007407407: val_type_fixed=0: };
    UserDataItem @[2] {name="view_win_wd": value=1.008333: val_type_fixed=0: };
    UserDataItem @[3] {name="view_win_ht": value=1.014815: val_type_fixed=0: };
    UserDataItem @[4] {name="view_win_iconified": value=0: val_type_fixed=0: };
    UserDataItem @[5] {name="view_splitter_state": value=AAAA/wAAAAEAAAADAAAAyQAAAvsAAAOyAf////8BAAAAAQA=: val_type_fixed=0: };
   };
   name="Browser3";
   m_data=.$$;
   cur_font_size=12;
   visible=1;
   win_name=".projects[\"face_categ\"] - face_categ_autosave.proj [*]";
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   revert_to_tab_no=-1;
   toolbars {
    name="toolbars";
    el_typ=ToolBar;
    el_def=0;
    ToolBar @[0] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_119";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="view_win_visible": value=1: val_type_fixed=0: };
     };
     name="Application";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     lft=0;
     top=0.02037037;
     o=Horizontal;
    };
   };
   frames {
    name="frames";
    el_typ=BrowseViewerTaBase;
    el_def=0;
    BrowseViewerTaBase @[0] {
     name="Navigator";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$.$;
    };
    PanelViewer @[1] {
     name="Editor";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
    };
    T3PanelViewer @[2] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_120";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="view_panel_selected": value=1: val_type_fixed=0: };
     };
     name="Visualizer";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     panels {
      name="panels";
      el_typ=T3Panel;
      el_def=0;
      T3Panel @[0] {
       name="FaceNetwork";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=NetView;
	 el_def=0;
	 NetView @[0] {
	  name="FaceNetwork_View";
	  m_data=$.networks[0]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=-0.01078028: y=-0.1624029: z=-0.05928138: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=-0.01078028: y=-0.1624029: z=-0.05928138: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  display=1;
	  lay_layout=THREE_D;
	  lay_mv=0;
	  net_text=0;
	  net_state_text {
	   name="net_state_text";
	   state_items {
	    name="state_items";
	    el_typ=NetViewStateItem;
	    el_def=0;
	    NetViewStateItem @[0] {name="batch": net_member=1: display=1: width=8: found=1: };
	    NetViewStateItem @[1] {name="epoch": net_member=1: display=1: width=8: found=1: };
	    NetViewStateItem @[2] {name="group": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[3] {name="trial": net_member=1: display=1: width=8: found=1: };
	    NetViewStateItem @[4] {name="tick": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[5] {name="cycle": net_member=1: display=1: width=8: found=1: };
	    NetViewStateItem @[6] {name="time": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[7] {name="total_trials": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[8] {name="sse": net_member=1: display=1: width=8: found=1: };
	    NetViewStateItem @[9] {name="group_name": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[10] {name="trial_name": net_member=1: display=1: width=8: found=1: };
	    NetViewStateItem @[11] {name="output_name": net_member=1: display=1: width=8: found=1: };
	    NetViewStateItem @[12] {name="quarter": net_member=1: display=1: width=8: found=1: };
	    NetViewStateItem @[13] {name="phase": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[14] {name="tot_cycle": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[15] {name="rt_cycles": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[16] {name="ext_rew": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[17] {name="norm_err": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[18] {name="cos_err": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[19] {name="minus_output_name": net_member=1: display=0: width=8: found=1: };
	   };
	   first_pass=0;
	  };
	  show_iconified=0;
	  cur_unit_vals{ act_eq;	  };
	  hot_vars{ ext;act;net;act_eq;r.wt;r.wt*act;s.wt;gc_i;I_net;v_m;	  };
	  unit_src_path=".layers[0][118]";
	  con_type=ANY_CON;
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  movie_size {x=720: y=720: };
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NAMES;
	  max_size {x=17: y=16: z=1.5: };
	  max_size2d {x=16: y=28: z=1: };
	  eff_max_size {x=17: y=16: z=1.5: };
	  font_sizes {net_name=0.05: net_vals=0.05: layer=0.04: layer_min=0.01: layer_vals=0.03: prjn=0.01: unit=0.03: un_nm_len=3: un_val_prec=2: };
	  view_params {xy_square=0: unit_spacing=0.05: prjn_disp=L_R_B: prjn_name=0: prjn_width=0.002: prjn_trans=0.5: lay_trans=0.5: unit_trans=0.6: laygp_width=1: show_laygp=1: };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.5;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="scale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=0;
	   last_max=0;
	   range=1;
	   zero=0;
	   spec=.colorspecs["C_ColdHot"]$$<ColorScaleSpec,C_ColdHot>;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name="scale_ranges";
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    var_name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    var_name="r.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[2] {
	    var_name="bias.wt";
	    auto_scale=1;
	    min=-0.9127967;
	    max=0.9127967;
	   };
	   ScaleRange @[3] {
	    var_name="bias.pdw";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[4] {
	    var_name="net";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[5] {
	    var_name="act_m";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[6] {
	    var_name="s.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[7] {
	    var_name="ext";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[8] {
	    var_name="targ";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[9] {
	    var_name="bias_wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[10] {
	    var_name="r.wt*act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[11] {
	    var_name="v_m";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[12] {
	    var_name="I_net";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[13] {
	    var_name="gc_i";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[14] {
	    var_name="act_eq";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ Input=0;Emotion=-1;Gender=-1;Identity=-1;	  };
	  selected_unit_var=;
	 };
	 GridTableView @[1] {
	  name="TrialOutputData_Grid";
	  m_data=$.data.gp[1][1]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=-1.000001: y=-1.192094e-7: z=3.128372e-14: rot=0.2026322: }: translate={x=1.126346: y=-0.165618: z=1.827369e-7: }: };
	  children {
	   name="children";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    name="trial";
	    m_data=.data.gp[1][1].data[0]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=3.397962e-39;
	    scale_max=-2.101948e-44;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    name="trial_name";
	    m_data=.data.gp[1][1].data[1]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    scale_min=3.85714e-39;
	    scale_max=-7.006492e-45;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[2] {
	    name="Emotio_act";
	    m_data=.data.gp[1][1].data[2]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=4.012933e-26;
	    scale_max=4.590794e-41;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[3] {
	    name="Gender_act";
	    m_data=.data.gp[1][1].data[3]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=4.012933e-26;
	    scale_max=3.363116e-44;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[4] {
	    name="Identi_act";
	    m_data=.data.gp[1][1].data[4]$$;
	    cur_font_size=10;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=4.012933e-26;
	    scale_max=4.590794e-41;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=-1.000001: y=-1.192094e-7: z=3.128372e-14: rot=0.2026322: }: translate={x=1.126346: y=-0.165618: z=1.827369e-7: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=12;
	  view_range {min=0: max=8: };
	  page_rows=10;
	  display_on=1;
	  manip_ctrl_on=0;
	  view_cols=5;
	  page_cols=5;
	  col_range {min=1: max=4: };
	  need_scale_update=1;
	  width=0.5;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  scale_per_column=0;
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.03: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	};
       };
       fix_name=0;
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.8337335: y=0.8045203: z=1.848282: };
	 orient {x=-1: y=0: z=0: rot=0.2200002: };
	 focal_dist=2.26767;
	};
	T3SavedView @[1] {
	 name="Network";
	 view_saved=1;
	 pos {x=0.4957334: y=0.7148152: z=1.44713: };
	 orient {x=-0.9999991: y=0: z=0: rot=0.2200002: };
	 focal_dist=1.856611;
	};
	T3SavedView @[2] {
	 name="Grid";
	 view_saved=1;
	 pos {x=1.401733: y=0.6300721: z=1.148662: };
	 orient {x=-1: y=0: z=0: rot=0.2200002: };
	 focal_dist=1.550772;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @[1] {
       name="Faces";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=GridTableView;
	 el_def=0;
	 GridTableView @[0] {
	  name="Faces_Grid";
	  m_data=$.data.gp[0][0]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    name="Name";
	    m_data=.data.gp[0][0].data[0]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=30;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    name="Input";
	    m_data=.data.gp[0][0].data[1]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[2] {
	    name="Emotion";
	    m_data=.data.gp[0][0].data[2]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=2;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[3] {
	    name="Gender";
	    m_data=.data.gp[0][0].data[3]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=2;
	    scale_on=1;
	    scale_min=9.918372e-39;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[4] {
	    name="Identity";
	    m_data=.data.gp[0][0].data[4]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=10;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=12;
	  view_range {min=0: max=11: };
	  page_rows=10;
	  display_on=1;
	  manip_ctrl_on=0;
	  view_cols=5;
	  page_cols=5;
	  col_range {min=0: max=4: };
	  need_scale_update=1;
	  width=0.5;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  scale_per_column=0;
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	 GridTableView @[1] {
	  name="PartialFaces_Grid";
	  m_data=$.data.gp[0][1]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0.619396: y=0.0005934895: z=0: }: };
	  children {
	   name="children";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    name="Name";
	    m_data=.data.gp[0][1].data[0]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=30;
	    scale_on=1;
	    scale_min=2.766138e+29;
	    scale_max=1.109461e+27;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    name="Input";
	    m_data=.data.gp[0][1].data[1]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    scale_min=0;
	    scale_max=1.128651e+27;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[2] {
	    name="Emotion";
	    m_data=.data.gp[0][1].data[2]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=2;
	    scale_on=1;
	    scale_min=4.585889e-41;
	    scale_max=0.0008654399;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[3] {
	    name="Gender";
	    m_data=.data.gp[0][1].data[3]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=2;
	    scale_on=1;
	    scale_min=0;
	    scale_max=1.667265e-41;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[4] {
	    name="Identity";
	    m_data=.data.gp[0][1].data[4]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=10;
	    scale_on=1;
	    scale_min=8.592029e+9;
	    scale_max=9.809089e-45;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0.619396: y=0.0005934895: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=12;
	  view_range {min=0: max=11: };
	  page_rows=10;
	  display_on=1;
	  manip_ctrl_on=0;
	  view_cols=5;
	  page_cols=5;
	  col_range {min=0: max=4: };
	  need_scale_update=1;
	  width=0.5;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  scale_per_column=0;
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	};
       };
       fix_name=0;
       bg_color {r=0.745: g=0.745: b=0.745: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.5574481: y=0.5102968: z=1.559001: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.559001;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @[2] {
       name="ClusterPlotData";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=GraphTableView;
	 el_def=0;
	 GraphTableView @[0] {
	  name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0";
	  m_data=$.data.gp[2][0]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="X";
	    m_data=.data.gp[2][0].data[0]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=1: max=6.89311: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="Y";
	    m_data=.data.gp[2][0].data[1]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0.2: fix_max=1: max=11.8: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="Label";
	    m_data=.data.gp[2][0].data[2]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=106: };
	  page_rows=1;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=1;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  string_spacing=1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis_label_rot=0;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="X";
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=1: max=26.3177: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  tot_plots=16;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0_plot_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Y";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0.2: fix_max=1: max=11.8: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0_plot_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Label";
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0_plot_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0_plot_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0_plot_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0_plot_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0_plot_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0_plot_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0_plot_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0_plot_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0_plot_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0_plot_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0_plot_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0_plot_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0_plot_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0_plot_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0_err_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0_err_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0_err_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0_err_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0_err_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0_err_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0_err_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0_err_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0_err_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0_err_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0_err_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0_err_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0_err_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0_err_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0_err_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="projects_Project_0_viewers_Browser3_frames_T3Frames_frames_ClusterPlotData_root_view_children_0_err_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  x_axis_label=;
	  y_axis_label=;
	  alt_y_axis_label=;
	  z_axis_label=;
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_gp_use_y=0;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="X";
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=1: max=6.89311: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       fix_name=0;
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.4275: y=0.4449999: z=1.624621: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.637121;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @[3] {
       name="EpochOutputData";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=GraphTableView;
	 el_def=0;
	 GraphTableView @[0] {
	  name="EpochOutputData_Graph";
	  m_data=$.data.gp[1][0]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="batch";
	    m_data=.data.gp[1][0].data[0]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="epoch";
	    m_data=.data.gp[1][0].data[1]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="avg_sse";
	    m_data=.data.gp[1][0].data[2]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    name="cnt_err";
	    m_data=.data.gp[1][0].data[3]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    name="pct_cor";
	    m_data=.data.gp[1][0].data[4]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    name="pct_err";
	    m_data=.data.gp[1][0].data[5]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    name="avg_norm_err";
	    m_data=.data.gp[1][0].data[6]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    name="avg_cos_err";
	    m_data=.data.gp[1][0].data[7]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    name="avg_ext_rew";
	    m_data=.data.gp[1][0].data[8]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    name="avg_cycles";
	    m_data=.data.gp[1][0].data[9]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[10] {
	    name="epoch_time_tot";
	    m_data=.data.gp[1][0].data[10]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[11] {
	    name="epoch_time_usr";
	    m_data=.data.gp[1][0].data[11]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[12] {
	    name="Emotio_lay_avg_sse";
	    m_data=.data.gp[1][0].data[12]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[13] {
	    name="Gender_lay_avg_sse";
	    m_data=.data.gp[1][0].data[13]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[14] {
	    name="Identi_lay_avg_sse";
	    m_data=.data.gp[1][0].data[14]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[15] {
	    name="Emotio_lay_cnt_err";
	    m_data=.data.gp[1][0].data[15]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[16] {
	    name="Gender_lay_cnt_err";
	    m_data=.data.gp[1][0].data[16]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[17] {
	    name="Identi_lay_cnt_err";
	    m_data=.data.gp[1][0].data[17]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[18] {
	    name="Emotio_lay_pct_cor";
	    m_data=.data.gp[1][0].data[18]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[19] {
	    name="Gender_lay_pct_cor";
	    m_data=.data.gp[1][0].data[19]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[20] {
	    name="Identi_lay_pct_cor";
	    m_data=.data.gp[1][0].data[20]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[21] {
	    name="Emotio_lay_pct_err";
	    m_data=.data.gp[1][0].data[21]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[22] {
	    name="Gender_lay_pct_err";
	    m_data=.data.gp[1][0].data[22]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[23] {
	    name="Identi_lay_pct_err";
	    m_data=.data.gp[1][0].data[23]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[24] {
	    name="Emotio_lay_avg_norm_err";
	    m_data=.data.gp[1][0].data[24]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[25] {
	    name="Gender_lay_avg_norm_err";
	    m_data=.data.gp[1][0].data[25]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[26] {
	    name="Identi_lay_avg_norm_err";
	    m_data=.data.gp[1][0].data[26]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[27] {
	    name="Emotio_lay_avg_cos_err";
	    m_data=.data.gp[1][0].data[27]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[28] {
	    name="Gender_lay_avg_cos_err";
	    m_data=.data.gp[1][0].data[28]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[29] {
	    name="Identi_lay_avg_cos_err";
	    m_data=.data.gp[1][0].data[29]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[30] {
	    name="net_avg_cos_diff";
	    m_data=.data.gp[1][0].data[30]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[31] {
	    name="net_avg_trial_cos_diff";
	    m_data=.data.gp[1][0].data[31]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[32] {
	    name="net_avg_avg_act_diff";
	    m_data=.data.gp[1][0].data[32]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[33] {
	    name="Emotion_avg_cos_diff";
	    m_data=.data.gp[1][0].data[33]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[34] {
	    name="Gender_avg_cos_diff";
	    m_data=.data.gp[1][0].data[34]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[35] {
	    name="Identity_avg_cos_diff";
	    m_data=.data.gp[1][0].data[35]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[36] {
	    name="Emotion_avg_trial_cos_diff";
	    m_data=.data.gp[1][0].data[36]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[37] {
	    name="Gender_avg_trial_cos_diff";
	    m_data=.data.gp[1][0].data[37]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[38] {
	    name="Identity_avg_trial_cos_diff";
	    m_data=.data.gp[1][0].data[38]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[39] {
	    name="Emotion_avg_avg_act_diff";
	    m_data=.data.gp[1][0].data[39]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[40] {
	    name="Gender_avg_avg_act_diff";
	    m_data=.data.gp[1][0].data[40]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[41] {
	    name="Identity_avg_avg_act_diff";
	    m_data=.data.gp[1][0].data[41]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[42] {
	    name="Emotion_avg_net_sd";
	    m_data=.data.gp[1][0].data[42]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[43] {
	    name="Gender_avg_net_sd";
	    m_data=.data.gp[1][0].data[43]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[44] {
	    name="Identity_avg_net_sd";
	    m_data=.data.gp[1][0].data[44]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[45] {
	    name="Emotion_hog_pct";
	    m_data=.data.gp[1][0].data[45]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[46] {
	    name="Gender_hog_pct";
	    m_data=.data.gp[1][0].data[46]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[47] {
	    name="Identity_hog_pct";
	    m_data=.data.gp[1][0].data[47]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[48] {
	    name="Emotion_dead_pct";
	    m_data=.data.gp[1][0].data[48]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[49] {
	    name="Gender_dead_pct";
	    m_data=.data.gp[1][0].data[49]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[50] {
	    name="Identity_dead_pct";
	    m_data=.data.gp[1][0].data[50]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[51] {
	    name="Emotio_netmax";
	    m_data=.data.gp[1][0].data[51]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[52] {
	    name="Gender_netmax";
	    m_data=.data.gp[1][0].data[52]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[53] {
	    name="Identi_netmax";
	    m_data=.data.gp[1][0].data[53]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[54] {
	    name="Emotio_avg_act";
	    m_data=.data.gp[1][0].data[54]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[55] {
	    name="Gender_avg_act";
	    m_data=.data.gp[1][0].data[55]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[56] {
	    name="Identi_avg_act";
	    m_data=.data.gp[1][0].data[56]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[57] {
	    name="Emotio_Fm_Input_netrel";
	    m_data=.data.gp[1][0].data[57]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[58] {
	    name="Gender_Fm_Input_netrel";
	    m_data=.data.gp[1][0].data[58]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[59] {
	    name="Identi_Fm_Input_netrel";
	    m_data=.data.gp[1][0].data[59]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  page_rows=236;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  string_spacing=1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis_label_rot=0;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="epoch";
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name="batch";
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  tot_plots=16;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="EpochOutputData_Graph_plot_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="avg_sse";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="EpochOutputData_Graph_plot_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="EpochOutputData_Graph_plot_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="EpochOutputData_Graph_plot_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="EpochOutputData_Graph_plot_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="EpochOutputData_Graph_plot_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="EpochOutputData_Graph_plot_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="EpochOutputData_Graph_plot_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="EpochOutputData_Graph_plot_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="EpochOutputData_Graph_plot_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="EpochOutputData_Graph_plot_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="EpochOutputData_Graph_plot_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="EpochOutputData_Graph_plot_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="EpochOutputData_Graph_plot_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="EpochOutputData_Graph_plot_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="EpochOutputData_Graph_plot_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="EpochOutputData_Graph_err_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="EpochOutputData_Graph_err_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="EpochOutputData_Graph_err_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="EpochOutputData_Graph_err_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="EpochOutputData_Graph_err_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="EpochOutputData_Graph_err_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="EpochOutputData_Graph_err_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="EpochOutputData_Graph_err_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="EpochOutputData_Graph_err_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="EpochOutputData_Graph_err_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="EpochOutputData_Graph_err_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="EpochOutputData_Graph_err_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="EpochOutputData_Graph_err_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="EpochOutputData_Graph_err_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="EpochOutputData_Graph_err_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="EpochOutputData_Graph_err_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  x_axis_label=;
	  y_axis_label=;
	  alt_y_axis_label=;
	  z_axis_label=;
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_gp_use_y=0;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       fix_name=0;
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.465: y=0.4449999: z=1.506229: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=2.016229;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
     };
    };
   };
   docks {
    name="docks";
    el_typ=ToolBoxDockViewer;
    el_def=0;
    ToolBoxDockViewer @[0] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_121";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="view_win_lft": value=0: val_type_fixed=0: };
      UserDataItem @[1] {name="view_win_top": value=0.06666667: val_type_fixed=0: };
      UserDataItem @[2] {name="view_win_wd": value=0.04375: val_type_fixed=0: };
      UserDataItem @[3] {name="view_win_ht": value=0.6777778: val_type_fixed=0: };
      UserDataItem @[4] {name="view_win_iconified": value=0: val_type_fixed=0: };
      UserDataItem @[5] {name="view_visible": value=0: val_type_fixed=0: };
     };
     name="Tools";
     m_data=NULL;
     cur_font_size=12;
     visible=0;
     win_name=;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 save_view=1;
 save_as_only=0;
 auto_name=1;
 last_change_desc="Project updated on wiki: CCN changes: 8.5.1 update: use OUTPUT instead of TARGET for layer_type so it doesn't clamp layers in the plus phase";
 tree_state{ .;.docs;.ctrl_panels;.viewers[0];.viewers[0].frames[2]; };
 networks {
  name="networks";
  el_typ=LeabraNetwork;
  el_def=0;
  LeabraNetwork @[0] {
   name="FaceNetwork";
   desc=;
   flags=BUILD_INIT_WTS;
   train_mode=TEST;
   wt_update=ON_LINE;
   small_batch_n=10;
   stats {sse_unit_avg=0: sse_sqrt=0: cnt_err_tol=0: prerr=0: };
   n_units=271;
   n_cons=7168;
   max_prjns=3;
   specs {
    name="specs";
    el_typ=LeabraUnitSpec;
    el_def=0;
    LeabraUnitSpec @[0] {
     name="LeabraUnitSpec_0";
     is_used=1;
     used_status=USED;
     desc=;
     unique{ opt_thresh;     };
     saved{      };
     children {
      name="children";
      el_typ=LeabraUnitSpec;
      el_def=0;
     };
     bias_spec {type=LeabraBiasSpec: spec=.networks[0].specs[1].children[0]$$: };
     act_range {min=0: max=1: range=1: scale=1: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {thr=0.5: gain=100: nvar=0.005: avg_correct=1: vm_act_thr=0.01: sig_mult=0.33: sig_mult_pow=0.8: sig_gain=3: interp_range=0.01: gain_cor_range=10: gain_cor=0.1: sig_gain_nvar=600: sig_mult_eff=0.1895352: sig_val_at_0=0.09476762: interp_val=0.3843991: };
     act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
     spike {rise=0: decay=5: g_gain=9: window=3: act_max_hz=180: int_tau=5: int_dt=0.2: };
     spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
     opt_thresh {send=0.1: delta=0.005: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=2: range=2: scale=0.5: };
     init {v_m=0.4: act=0: netin=0: };
     dt {integ=1: vm_tau=3.3: net_tau=1.4: vm_cyc=1: fast_cyc=0: vm_dt=0.3030303: vm_dt_cyc=0.3030303: net_dt=0.7142857: };
     act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
     avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
     avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
     g_bar {e=1: l=0.1: i=1: k=0.2: };
     e_rev {e=1: l=0.3: i=0.25: k=0.1: };
     kna_adapt {on=0: rate_rise=0.8: f_on=1: f_rise=0.05: f_max=0.1: f_tau=50: m_on=1: m_rise=0.02: m_max=0.1: m_tau=200: s_on=1: s_rise=0.001: s_max=1: s_tau=1000: f_dt=0.02: m_dt=0.005: s_dt=0.001: };
     kna_misc {clamp=1: invert_nd=1: max_gc=0.2: max_adapt=0.3: no_targ=1: };
     stp {on=0: algorithm=CYCLES: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: thresh=0.5: n_trials=1: rec_prob=0.1: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
     syn_delay {on=0: delay=4: };
     deep_raw_qtr=Q4;
     deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: mod_thr=0.1: ctxt_prv=0: tick_updt=-1: else_prv=0.9: mod_range=0.2: ctxt_new=1: else_new=0.1: };
     trc {p_only_m=0: thal_gate=0: clamp_net=0: avg_clamp=0: deep_gain=0.2: clip=0: clip_max=0.4: std_gain=0.8: };
     da_mod {on=0: mod_gain=0: minus=0: plus=0.1: da_neg_gain=0.1: da_pos_gain=0.1: };
     noise_type {type=NO_NOISE: trial_fixed=1: };
     noise {name="noise": type=GAUSSIAN: mean=0: var=0.001: par=1: };
    };
    LeabraConSpec @[1] {
     name="LeabraConSpec_0";
     is_used=1;
     used_status=USED;
     desc=;
     unique{      };
     saved{      };
     children {
      name="children";
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraBiasSpec @[0] {
       name="LeabraBiasSpec_0";
       is_used=1;
       used_status=USED;
       desc=;
       unique{ rnd;wt_limits;wt_scale;wt_scale_init;       };
       saved{        };
       children {
	name="children";
	el_typ=LeabraBiasSpec;
	el_def=0;
       };
       rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
       wt_limits {type=NONE: min=-1: max=5: sym=0: sym_fm_top=0: };
       inhib=0;
       wt_scale {abs=1: rel=1: no_plus_net=0: };
       learn=1;
       learn_qtr=Q4;
       lrate=0.04;
       cur_lrate=0.04;
       lrs_mult=1;
       use_unlearnable=1;
       xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: s_mult=1: d_rev_ratio=-9: };
       wt_sig {gain=1: off=1: soft_bound=1: };
       momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
       wt_bal {on=1: avg_thr=0.25: hi_thr=0.4: hi_gain=4: lo_thr=0.4: lo_gain=6: act_thr=0.25: act_gain=0: no_targ=1: };
       adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
       slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
       deep {on=0: bg_lrate=1: fg_lrate=0: };
       margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
       dwt_share {on=0: neigh=8: p_share=0.05: };
       use_lrate_sched=1;
       lrate_sched {
	name="lrate_sched";
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=0;
       };
       dwt_thresh=0.1;
      };
     };
     rnd {name="rnd": type=UNIFORM: mean=0.2: var=0.1: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
     inhib=0;
     wt_scale {abs=1: rel=1: no_plus_net=0: };
     learn=1;
     learn_qtr=Q4;
     lrate=0.04;
     cur_lrate=0.04;
     lrs_mult=1;
     use_unlearnable=1;
     xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: s_mult=1: d_rev_ratio=-9: };
     wt_sig {gain=1: off=1: soft_bound=1: };
     momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
     wt_bal {on=1: avg_thr=0.25: hi_thr=0.4: hi_gain=4: lo_thr=0.4: lo_gain=6: act_thr=0.25: act_gain=0: no_targ=1: };
     adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
     slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
     deep {on=0: bg_lrate=1: fg_lrate=0: };
     margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
     dwt_share {on=0: neigh=8: p_share=0.05: };
     use_lrate_sched=1;
     lrate_sched {
      name="lrate_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
     };
    };
    LeabraLayerSpec @[2] {
     name="LeabraLayerSpec_0";
     is_used=0;
     used_status=CHILD_USED;
     desc=;
     unique{      };
     saved{      };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
      LeabraLayerSpec @[0] {
       name="InputLayer";
       is_used=1;
       used_status=USED;
       desc=;
       unique{ kwta;clamp;lay_inhib;       };
       saved{        };
       children {
	name="children";
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       lay_inhib {on=1: gi=2.8: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       unit_gp_inhib {on=0: gi=2: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       lay_gp_inhib {on=0: gi=2: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       avg_act {targ_init=0.15: fixed=1: use_ext_act=0: use_first=1: tau=100: adjust=1: dt=0.01: };
       inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
       inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
       clamp {hard=0: gain=0.2: avg=0: avg_gain=0.2: };
       decay {trial=1: };
       del_inhib {on=0: prv_trl=0: prv_q=0: };
       margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
       lay_lrate=1;
       cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
       lstats {pre_hog_thr=0.2: hog_thr=0.3: dead_thr=0.01: };
      };
      LeabraLayerSpec @[1] {
       name="IdentityLayer";
       is_used=1;
       used_status=USED;
       desc=;
       unique{ kwta;lay_inhib;       };
       saved{        };
       children {
	name="children";
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       lay_inhib {on=1: gi=4: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       unit_gp_inhib {on=0: gi=2: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       lay_gp_inhib {on=0: gi=2: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       avg_act {targ_init=0.15: fixed=1: use_ext_act=0: use_first=1: tau=100: adjust=1: dt=0.01: };
       inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
       inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
       clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
       decay {trial=1: };
       del_inhib {on=0: prv_trl=0: prv_q=0: };
       margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
       lay_lrate=1;
       cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
       lstats {pre_hog_thr=0.2: hog_thr=0.3: dead_thr=0.01: };
      };
      LeabraLayerSpec @[2] {
       name="GenderLayer";
       is_used=1;
       used_status=USED;
       desc=;
       unique{ kwta;lay_inhib;       };
       saved{        };
       children {
	name="children";
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       lay_inhib {on=1: gi=2: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       unit_gp_inhib {on=0: gi=2: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       lay_gp_inhib {on=0: gi=2: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       avg_act {targ_init=0.15: fixed=1: use_ext_act=0: use_first=1: tau=100: adjust=1: dt=0.01: };
       inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
       inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
       clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
       decay {trial=1: };
       del_inhib {on=0: prv_trl=0: prv_q=0: };
       margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
       lay_lrate=1;
       cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
       lstats {pre_hog_thr=0.2: hog_thr=0.3: dead_thr=0.01: };
      };
      LeabraLayerSpec @[3] {
       name="EmotionLayer";
       is_used=1;
       used_status=USED;
       desc=;
       unique{ kwta;lay_inhib;       };
       saved{        };
       children {
	name="children";
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       lay_inhib {on=1: gi=1.5: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       unit_gp_inhib {on=0: gi=2: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       lay_gp_inhib {on=0: gi=2: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       avg_act {targ_init=0.15: fixed=1: use_ext_act=0: use_first=1: tau=100: adjust=1: dt=0.01: };
       inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
       inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
       clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
       decay {trial=1: };
       del_inhib {on=0: prv_trl=0: prv_q=0: };
       margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
       lay_lrate=1;
       cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
       lstats {pre_hog_thr=0.2: hog_thr=0.3: dead_thr=0.01: };
      };
     };
     lay_inhib {on=1: gi=2.2: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     unit_gp_inhib {on=0: gi=2: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     lay_gp_inhib {on=0: gi=2: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     avg_act {targ_init=0.15: fixed=1: use_ext_act=0: use_first=1: tau=100: adjust=1: dt=0.01: };
     inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
     inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
     clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
     decay {trial=1: };
     del_inhib {on=0: prv_trl=0: prv_q=0: };
     margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
     lay_lrate=1;
     cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
     lstats {pre_hog_thr=0.2: hog_thr=0.3: dead_thr=0.01: };
    };
    FullPrjnSpec @[3] {
     name="FullPrjnSpec_0";
     is_used=1;
     used_status=USED;
     desc=;
     unique{      };
     saved{      };
     children {
      name="children";
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     init_wt_val=1;
     add_rnd_var=0;
     renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
    };
   };
   param_seqs {
    name="param_seqs";
    el_typ=ParamSeq;
    el_def=0;
   };
   monitor {
    name="monitor";
    items {
     name="items";
     el_typ=NetMonItem;
     el_def=0;
     ignore_sig=0;
    };
    network=$.networks[0]$;
    data=.networks[0].mon_data$$;
    rmv_orphan_cols=1;
   };
   mon_data {
    name="mon_data";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   layers {
    name="layers";
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    pos2d {x=0: y=0: };
    max_disp_size {x=17: y=16: z=2: };
    max_disp_size2d {x=16: y=28: };
    LeabraLayer @[0] {
     name="Input";
     n_recv_prjns=3;
     n_send_prjns=3;
     un_geom_x=16;
     un_geom_y=16;
     un_geom_n=256;
     gp_geom_x=1;
     gp_geom_y=1;
     gp_geom_n=1;
     flat_geom_x=16;
     flat_geom_y=16;
     flat_geom_n=256;
     gp_spc_x=0;
     gp_spc_y=0;
     flags=0;
     layer_type=INPUT;
     desc=;
     pos_rel {rel=ABS_POS: other=NULL: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
     pos {x=0: y=0: z=0: };
     pos_abs {x=0: y=0: z=0: };
     pos2d {x=0: y=0: };
     pos2d_abs {x=0: y=0: };
     disp_scale=1;
     un_geom {x=16: y=16: n_not_xy=0: n=256: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=0: y=0: };
     flat_geom {x=16: y=16: n_not_xy=0: n=256: };
     disp_geom {x=16: y=16: n_not_xy=0: n=256: };
     scaled_disp_geom {x=16: y=16: n_not_xy=0: n=256: };
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Emotion";
       off=0;
       disp=1;
       notes=;
       from_type=CUSTOM;
       from=.networks[0].layers[1]$$;
       spec {type=FullPrjnSpec: spec=.networks[0].specs[3]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=.networks[0].specs[1]$$: };
       dir_fixed=0;
       direction=FM_OUTPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @[1] {
       name="Fm_Gender";
       off=0;
       disp=1;
       notes=;
       from_type=CUSTOM;
       from=.networks[0].layers[2]$$;
       spec {type=FullPrjnSpec: spec=$.networks[0].specs[3]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.networks[0].specs[1]$: };
       dir_fixed=0;
       direction=FM_OUTPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @[2] {
       name="Fm_Identity";
       off=0;
       disp=1;
       notes=;
       from_type=CUSTOM;
       from=.networks[0].layers[3]$$;
       spec {type=FullPrjnSpec: spec=$.networks[0].specs[3]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.networks[0].specs[1]$: };
       dir_fixed=0;
       direction=FM_OUTPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_List @. = [0] = LeabraPrjn .networks[0].layers[1].projections[0];
      Projection_List @. = [1] = LeabraPrjn .networks[0].layers[2].projections[0];
      Projection_List @. = [2] = LeabraPrjn .networks[0].layers[3].projections[0];
     };
     unit_spec {type=LeabraUnitSpec: spec=.networks[0].specs[0]$$: };
     dist {fm_input=0: fm_output=1: };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LeabraLayerSpec: spec=.networks[0].specs[2].children[0]$$: };
     adapt_gi=1;
     acts_m_avg=0.1740109;
     acts_p_avg=0.1740186;
     acts_p_avg_eff=0.15;
    };
    LeabraLayer @[1] {
     name="Emotion";
     n_recv_prjns=1;
     n_send_prjns=1;
     un_geom_x=2;
     un_geom_y=1;
     un_geom_n=2;
     gp_geom_x=1;
     gp_geom_y=1;
     gp_geom_n=1;
     flat_geom_x=2;
     flat_geom_y=1;
     flat_geom_n=2;
     gp_spc_x=0;
     gp_spc_y=0;
     flags=SAVE_UNIT_NAMES;
     layer_type=OUTPUT;
     desc=;
     pos_rel {rel=ABS_POS: other=NULL: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
     pos {x=4: y=2: z=1: };
     pos_abs {x=4: y=2: z=1: };
     pos2d {x=0: y=18: };
     pos2d_abs {x=0: y=18: };
     disp_scale=1.5;
     un_geom {x=2: y=1: n_not_xy=0: n=2: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=0: y=0: };
     flat_geom {x=2: y=1: n_not_xy=0: n=2: };
     disp_geom {x=2: y=1: n_not_xy=0: n=2: };
     scaled_disp_geom {x=3: y=2: n_not_xy=0: n=6: };
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Input";
       off=0;
       disp=1;
       notes=;
       from_type=CUSTOM;
       from=.networks[0].layers[0]$$;
       spec {type=FullPrjnSpec: spec=$.networks[0].specs[3]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.networks[0].specs[1]$: };
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_List @. = [0] = LeabraPrjn .networks[0].layers[0].projections[0];
     };
     unit_spec {type=LeabraUnitSpec: spec=$.networks[0].specs[0]$: };
     dist {fm_input=1: fm_output=0: };
     units_lesioned=0;
     gp_unit_names_4d=0;
     unit_names {
      name="unit_names";
     [2 1] "Happy";"Sad";     };
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LeabraLayerSpec: spec=.networks[0].specs[2].children[3]$$: };
     adapt_gi=1;
     acts_m_avg=0.3502052;
     acts_p_avg=0.350207;
     acts_p_avg_eff=0.15;
    };
    LeabraLayer @[2] {
     name="Gender";
     n_recv_prjns=1;
     n_send_prjns=1;
     un_geom_x=2;
     un_geom_y=1;
     un_geom_n=2;
     gp_geom_x=1;
     gp_geom_y=1;
     gp_geom_n=1;
     flat_geom_x=2;
     flat_geom_y=1;
     flat_geom_n=2;
     gp_spc_x=0;
     gp_spc_y=0;
     flags=SAVE_UNIT_NAMES;
     layer_type=OUTPUT;
     desc=;
     pos_rel {rel=ABS_POS: other=NULL: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
     pos {x=12: y=2: z=1: };
     pos_abs {x=12: y=2: z=1: };
     pos2d {x=0: y=22: };
     pos2d_abs {x=0: y=22: };
     disp_scale=1.5;
     un_geom {x=2: y=1: n_not_xy=0: n=2: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=0: y=0: };
     flat_geom {x=2: y=1: n_not_xy=0: n=2: };
     disp_geom {x=2: y=1: n_not_xy=0: n=2: };
     scaled_disp_geom {x=3: y=2: n_not_xy=0: n=6: };
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Input";
       off=0;
       disp=1;
       notes=;
       from_type=CUSTOM;
       from=$.networks[0].layers[0]$;
       spec {type=FullPrjnSpec: spec=$.networks[0].specs[3]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.networks[0].specs[1]$: };
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_List @. = [0] = LeabraPrjn .networks[0].layers[0].projections[1];
     };
     unit_spec {type=LeabraUnitSpec: spec=$.networks[0].specs[0]$: };
     dist {fm_input=1: fm_output=0: };
     units_lesioned=0;
     gp_unit_names_4d=0;
     unit_names {
      name="unit_names";
     [2 1] "Female";"Male";     };
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LeabraLayerSpec: spec=.networks[0].specs[2].children[2]$$: };
     adapt_gi=1;
     acts_m_avg=0.3203337;
     acts_p_avg=0.3203337;
     acts_p_avg_eff=0.15;
    };
    LeabraLayer @[3] {
     name="Identity";
     n_recv_prjns=1;
     n_send_prjns=1;
     un_geom_x=10;
     un_geom_y=1;
     un_geom_n=10;
     gp_geom_x=1;
     gp_geom_y=1;
     gp_geom_n=1;
     flat_geom_x=10;
     flat_geom_y=1;
     flat_geom_n=10;
     gp_spc_x=0;
     gp_spc_y=0;
     flags=SAVE_UNIT_NAMES;
     layer_type=OUTPUT;
     desc=;
     pos_rel {rel=ABS_POS: other=NULL: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
     pos {x=2: y=7: z=1: };
     pos_abs {x=2: y=7: z=1: };
     pos2d {x=0: y=26: };
     pos2d_abs {x=0: y=26: };
     disp_scale=1.5;
     un_geom {x=10: y=1: n_not_xy=0: n=10: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=0: y=0: };
     flat_geom {x=10: y=1: n_not_xy=0: n=10: };
     disp_geom {x=10: y=1: n_not_xy=0: n=10: };
     scaled_disp_geom {x=15: y=2: n_not_xy=0: n=30: };
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Input";
       off=0;
       disp=1;
       notes=;
       from_type=CUSTOM;
       from=$.networks[0].layers[0]$;
       spec {type=FullPrjnSpec: spec=$.networks[0].specs[3]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.networks[0].specs[1]$: };
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_List @. = [0] = LeabraPrjn .networks[0].layers[0].projections[2];
     };
     unit_spec {type=LeabraUnitSpec: spec=$.networks[0].specs[0]$: };
     dist {fm_input=1: fm_output=0: };
     units_lesioned=0;
     gp_unit_names_4d=0;
     unit_names {
      name="unit_names";
     [10 1] "Alberto";"Betty";"Lisa";"Mark";"Wendy";"Zane";;;;;
     };
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LeabraLayerSpec: spec=.networks[0].specs[2].children[1]$$: };
     adapt_gi=1;
     acts_m_avg=0.1136831;
     acts_p_avg=0.1136832;
     acts_p_avg_eff=0.15;
    };
   };
   weights {
    name="weights";
    el_typ=Weights;
    el_def=0;
    Weights @[0] {
     name="FaceNetwork_wts";
     batch=0;
     epoch=300;
     save_with_proj=1;
     auto_load=0;
     quiet_load=0;
     load_file=;
     auto_init=1;
     wt_file="<Fmt TEXT>
<Name FaceNetwork>
<Epoch 300>
<Lay Input>
<acts_m_avg 0.15>
<acts_p_avg 0.15>
<acts_p_avg_eff 0.15>
<adapt_gi 1>
<Ug>
<UgUn 0 >
<Un>
-0.108148
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.517602
1 0.517892
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.681252
1 0.0563338
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0641699
1 0.701245
2 0.695282
3 0.063788
4 0.0360137
5 0.0848336
6 0.0895564
7 0.0847999
8 0.0413236
9 0.0633452
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 1 >
<Un>
0.14708
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.426771
1 0.470354
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.573407
1 0.0687688
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.155385
1 0.0934737
2 0.142932
3 0.0705427
4 0.926191
5 0.0841881
6 0.125744
7 0.116982
8 0.15024
9 0.0636821
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 2 >
<Un>
0.0129327
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.563881
1 0.584312
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.837628
1 0.0308457
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0455102
1 0.554762
2 0.544219
3 0.0275652
4 0.527182
5 0.0243199
6 0.051472
7 0.0313146
8 0.0396356
9 0.0383513
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 3 >
<Un>
-0.0748995
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.464059
1 0.467355
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.629017
1 0.143244
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0572686
1 0.125412
2 0.133438
3 0.119492
4 0.889181
5 0.133143
6 0.141931
7 0.133213
8 0.0625515
9 0.104655
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 4 >
<Un>
-0.0728299
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.269828
1 0.147348
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.266931
1 0.203087
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.15971
1 0.270338
2 0.231939
3 0.105382
4 0.266255
5 0.109892
6 0.246962
7 0.14458
8 0.133811
9 0.25054
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 5 >
<Un>
0.20747
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.567527
1 0.569608
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.0400718
1 0.854144
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.525413
1 0.0368304
2 0.0327344
3 0.528501
4 0.0181672
5 0.531195
6 0.0291698
7 0.0345237
8 0.0189254
9 0.0281643
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 6 >
<Un>
0.215046
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.616436
1 0.620235
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.505994
1 0.514677
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.31464
1 0.335442
2 0.327942
3 0.32001
4 0.318589
5 0.316549
6 0.00850659
7 0.00756142
8 0.00732469
9 0.00335417
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 7 >
<Un>
0.172093
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.617937
1 0.621278
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.50767
1 0.51716
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.314561
1 0.337809
2 0.327929
3 0.319798
4 0.318589
5 0.315598
6 0.00853445
7 0.00910878
8 0.00355607
9 0.0088348
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 8 >
<Un>
0.114569
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.619651
1 0.623242
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.508365
1 0.517314
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.317353
1 0.337536
2 0.330815
3 0.322987
4 0.322177
5 0.31762
6 0.00739462
7 0.00887951
8 0.00536405
9 0.00943537
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 9 >
<Un>
0.106136
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.619602
1 0.623266
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.510056
1 0.518113
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.315771
1 0.337163
2 0.33043
3 0.323423
4 0.321657
5 0.317421
6 0.00920971
7 0.00486849
8 0.0051278
9 0.00944461
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 10 >
<Un>
0.0907883
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.571401
1 0.576164
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.0199983
1 0.849712
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.532636
1 0.0258711
2 0.0428254
3 0.534246
4 0.0415169
5 0.535575
6 0.0321103
7 0.020685
8 0.0524249
9 0.020086
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 11 >
<Un>
-0.060799
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.253205
1 0.213857
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.260055
1 0.144561
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.172622
1 0.211795
2 0.154368
3 0.130623
4 0.278388
5 0.264923
6 0.212802
7 0.162543
8 0.257023
9 0.11714
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 12 >
<Un>
0.0684105
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.465131
1 0.465644
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.590259
1 0.0691338
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0607278
1 0.143162
2 0.0743549
3 0.120131
4 0.899822
5 0.120646
6 0.104316
7 0.133087
8 0.166808
9 0.151377
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 13 >
<Un>
-0.0399332
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.571113
1 0.57526
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.835376
1 0.0502077
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0207816
1 0.561158
2 0.54619
3 0.0424297
4 0.534059
5 0.0384164
6 0.0259948
7 0.0238282
8 0.0202609
9 0.020204
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 14 >
<Un>
0.163382
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.467315
1 0.450826
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.587029
1 0.122866
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0624323
1 0.127395
2 0.0953469
3 0.078597
4 0.906761
5 0.123613
6 0.0773546
7 0.110392
8 0.159785
9 0.11709
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 15 >
<Un>
-0.106335
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.515332
1 0.515801
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.67409
1 0.0852703
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.080643
1 0.700107
2 0.711193
3 0.0831183
4 0.0451123
5 0.0879691
6 0.0806913
7 0.07025
8 0.0775394
9 0.0338616
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 16 >
<Un>
-0.0203695
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.191493
1 0.258736
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.116287
1 0.191889
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.204068
1 0.180308
2 0.222231
3 0.121882
4 0.203029
5 0.210256
6 0.224743
7 0.244587
8 0.15414
9 0.222648
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 17 >
<Un>
-0.177039
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.514099
1 0.514639
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.679428
1 0.0878777
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0573477
1 0.718707
2 0.698915
3 0.0724076
4 0.0563035
5 0.0679978
6 0.0651587
7 0.0837759
8 0.0655343
9 0.0521788
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 18 >
<Un>
-0.0281583
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.275143
1 0.140936
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.120216
1 0.173142
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.130871
1 0.190178
2 0.280859
3 0.221092
4 0.165044
5 0.283231
6 0.192043
7 0.267447
8 0.177945
9 0.269644
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 19 >
<Un>
0.108577
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.571813
1 0.578736
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.82176
1 0.0474484
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0371719
1 0.560212
2 0.544347
3 0.0284288
4 0.52883
5 0.0293885
6 0.018424
7 0.0371603
8 0.0192169
9 0.0255707
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 20 >
<Un>
0.00722944
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.576307
1 0.57514
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.0290322
1 0.858341
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.528289
1 0.0512575
2 0.0187023
3 0.540514
4 0.0221743
5 0.532103
6 0.0258713
7 0.0488214
8 0.0427184
9 0.0375238
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 21 >
<Un>
0.00432463
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.573119
1 0.584346
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.825969
1 0.0315422
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0417913
1 0.553176
2 0.543676
3 0.0238075
4 0.534986
5 0.0441455
6 0.0525564
7 0.0244648
8 0.0204723
9 0.0182642
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 22 >
<Un>
0
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.195174
1 0.117928
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.253159
1 0.170801
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.227796
1 0.10134
2 0.124228
3 0.103067
4 0.120354
5 0.102632
6 0.13933
7 0.195864
8 0.113961
9 0.249212
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 23 >
<Un>
-0.0377273
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.141055
1 0.196994
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.275119
1 0.135794
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.2758
1 0.276474
2 0.251797
3 0.108257
4 0.165554
5 0.234735
6 0.18765
7 0.117553
8 0.281189
9 0.260454
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 24 >
<Un>
-0.0687278
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.119916
1 0.256965
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.240247
1 0.141965
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.264229
1 0.154485
2 0.256369
3 0.255542
4 0.210756
5 0.101292
6 0.27706
7 0.291279
8 0.186245
9 0.178077
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 25 >
<Un>
-0.072151
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.230623
1 0.207629
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.111848
1 0.247189
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.195581
1 0.179028
2 0.284423
3 0.278767
4 0.293131
5 0.151695
6 0.26781
7 0.179696
8 0.261686
9 0.242131
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 26 >
<Un>
0.0784088
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.561877
1 0.57388
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.837664
1 0.0427404
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0265622
1 0.557469
2 0.546492
3 0.0446548
4 0.530341
5 0.0206396
6 0.02692
7 0.018322
8 0.0297678
9 0.0418286
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 27 >
<Un>
0.416302
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.519323
1 0.672037
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.229892
1 0.769178
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.473686
1 0.0359725
2 0.0373361
3 0.484708
4 0.32597
5 0.479195
6 0.0394093
7 0.0278038
8 0.0367769
9 0.0363473
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 28 >
<Un>
-0.00175595
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.569715
1 0.585257
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.821954
1 0.0478929
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0238554
1 0.555466
2 0.552814
3 0.0246514
4 0.534948
5 0.041147
6 0.0448667
7 0.0180878
8 0.0327561
9 0.0495791
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 29 >
<Un>
-0.0475912
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.251424
1 0.285438
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.101139
1 0.187299
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.150211
1 0.208581
2 0.165357
3 0.265658
4 0.169821
5 0.150146
6 0.237434
7 0.239709
8 0.210192
9 0.240937
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 30 >
<Un>
-0.157627
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.516549
1 0.516975
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.668568
1 0.0559432
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0350709
1 0.705731
2 0.70183
3 0.0835625
4 0.0607748
5 0.0340653
6 0.0822751
7 0.0467523
8 0.081584
9 0.0905236
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 31 >
<Un>
-0.042311
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.187053
1 0.150635
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.219177
1 0.270791
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.184603
1 0.148525
2 0.295561
3 0.280133
4 0.262801
5 0.223072
6 0.145531
7 0.156679
8 0.197978
9 0.240672
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 32 >
<Un>
-0.0719125
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.162098
1 0.247961
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.125333
1 0.274028
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.268371
1 0.179175
2 0.282382
3 0.165964
4 0.100893
5 0.185766
6 0.230016
7 0.245529
8 0.169647
9 0.198367
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 33 >
<Un>
-0.00614562
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.17894
1 0.12346
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.17811
1 0.228371
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.168725
1 0.168714
2 0.133524
3 0.272587
4 0.109714
5 0.200268
6 0.275314
7 0.119793
8 0.169126
9 0.276655
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 34 >
<Un>
0.0737886
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.571068
1 0.580258
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.833054
1 0.0276375
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0348135
1 0.548642
2 0.547102
3 0.0184559
4 0.525798
5 0.0258866
6 0.049433
7 0.0330243
8 0.0242273
9 0.0324239
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 35 >
<Un>
0.0622166
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.576651
1 0.573151
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.0438825
1 0.857424
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.526036
1 0.0281267
2 0.0274551
3 0.529608
4 0.0369022
5 0.532869
6 0.0195336
7 0.0448891
8 0.0432079
9 0.0316563
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 36 >
<Un>
0.0841337
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.563709
1 0.580974
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.828423
1 0.0178688
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0471136
1 0.561862
2 0.543537
3 0.0496767
4 0.533343
5 0.0314569
6 0.0214864
7 0.0359709
8 0.0212504
9 0.0406037
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 37 >
<Un>
-0.0650178
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.105663
1 0.21968
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.285912
1 0.119199
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.250988
1 0.173866
2 0.280111
3 0.286484
4 0.217303
5 0.109618
6 0.144231
7 0.156239
8 0.290797
9 0.216968
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 38 >
<Un>
0.113206
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.021245
1 0.941747
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.467091
1 0.473931
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.310347
1 0.32417
2 0.320016
3 0.320181
4 0.30665
5 0.305616
6 0.0193049
7 0.0505761
8 0.0539296
9 0.0225033
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 39 >
<Un>
-0.00244374
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.943835
1 0.0467984
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.458008
1 0.466123
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.311613
1 0.315643
2 0.308183
3 0.31356
4 0.309933
5 0.311772
6 0.052921
7 0.0378261
8 0.0502676
9 0.0315954
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 40 >
<Un>
0.100799
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.941869
1 0.0338381
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.461455
1 0.463344
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.315836
1 0.322323
2 0.29795
3 0.317845
4 0.300746
5 0.309012
6 0.0294695
7 0.0265445
8 0.0220529
9 0.0393529
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 41 >
<Un>
0.175117
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.0245525
1 0.943787
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.455262
1 0.464431
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.291816
1 0.334012
2 0.329068
3 0.311357
4 0.311931
5 0.309611
6 0.0538424
7 0.0211879
8 0.0311266
9 0.0434897
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 42 >
<Un>
-0.0266264
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.283475
1 0.241204
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.119964
1 0.201703
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.132214
1 0.2891
2 0.136818
3 0.1333
4 0.213996
5 0.164793
6 0.226921
7 0.188457
8 0.160266
9 0.18225
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 43 >
<Un>
0.0719771
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.571137
1 0.582055
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.828749
1 0.0294746
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.018591
1 0.560117
2 0.539395
3 0.020913
4 0.530785
5 0.0374151
6 0.0179505
7 0.0264161
8 0.0480984
9 0.0317942
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 44 >
<Un>
0.140644
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.57183
1 0.567843
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.0400083
1 0.852179
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.533935
1 0.0310159
2 0.0387874
3 0.533823
4 0.0203406
5 0.535202
6 0.0391629
7 0.0286881
8 0.0445271
9 0.0184218
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 45 >
<Un>
0.128088
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.572249
1 0.579009
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.822404
1 0.0296883
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0299186
1 0.558912
2 0.546545
3 0.0278211
4 0.526436
5 0.032241
6 0.0195692
7 0.0388591
8 0.047872
9 0.0330009
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 46 >
<Un>
-0.0862519
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.129412
1 0.266853
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.249691
1 0.25083
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.100955
1 0.172909
2 0.106596
3 0.157445
4 0.282458
5 0.257906
6 0.174305
7 0.196635
8 0.181213
9 0.273879
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 47 >
<Un>
-0.0367539
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.174832
1 0.248816
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.261398
1 0.122128
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.203408
1 0.164455
2 0.227578
3 0.104631
4 0.230778
5 0.127646
6 0.133195
7 0.248035
8 0.223223
9 0.298147
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 48 >
<Un>
-0.0708604
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.264864
1 0.159516
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.269928
1 0.203336
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.26732
1 0.150842
2 0.265879
3 0.183725
4 0.267065
5 0.161999
6 0.266222
7 0.257543
8 0.129901
9 0.122918
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 49 >
<Un>
-0.0824548
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.514215
1 0.514624
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.666686
1 0.0347227
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0373141
1 0.7001
2 0.693537
3 0.050329
4 0.0485008
5 0.0416209
6 0.0404759
7 0.0349259
8 0.0534685
9 0.0586029
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 50 >
<Un>
-0.0455099
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.49943
1 0.497778
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.0801426
1 0.684699
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.693752
1 0.0530025
2 0.0772367
3 0.682027
4 0.0630587
5 0.0312445
6 0.0553997
7 0.0493861
8 0.0406561
9 0.0812389
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 51 >
<Un>
0.160884
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.602604
1 0.60883
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.673709
1 0.297141
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0268547
1 0.457811
2 0.448406
3 0.0146417
4 0.432177
5 0.460815
6 0.0213056
7 0.0294784
8 0.0293045
9 0.0266923
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 52 >
<Un>
-0.071688
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.273766
1 0.226255
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.177196
1 0.168591
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.170266
1 0.169986
2 0.285842
3 0.191875
4 0.279695
5 0.253838
6 0.22048
7 0.161025
8 0.172108
9 0.122654
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 53 >
<Un>
0
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.205617
1 0.150333
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.23382
1 0.165885
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.175813
1 0.247164
2 0.215803
3 0.177056
4 0.197472
5 0.111852
6 0.275125
7 0.146074
8 0.142744
9 0.268841
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 54 >
<Un>
0.0954202
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.942959
1 0.0256318
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.464537
1 0.473531
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.296374
1 0.323266
2 0.305141
3 0.299785
4 0.299748
5 0.295903
6 0.0437739
7 0.0437758
8 0.0450676
9 0.053402
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 55 >
<Un>
0.203213
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.0329583
1 0.942622
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.459728
1 0.467266
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.299579
1 0.328704
2 0.324955
3 0.316866
4 0.298263
5 0.293812
6 0.0488426
7 0.0255446
8 0.049923
9 0.0192596
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 56 >
<Un>
0.0935119
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.0394764
1 0.945694
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.463809
1 0.466115
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.311346
1 0.327034
2 0.318381
3 0.304487
4 0.299563
5 0.294659
6 0.0413179
7 0.0256096
8 0.0507405
9 0.0354208
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 57 >
<Un>
0.111487
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.942547
1 0.0261781
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.459676
1 0.471581
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.301559
1 0.315665
2 0.313401
3 0.311414
4 0.298064
5 0.295829
6 0.0502743
7 0.0246825
8 0.0353926
9 0.025354
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 58 >
<Un>
-0.0189194
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.285649
1 0.129534
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.104224
1 0.118908
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.275394
1 0.130619
2 0.182539
3 0.199245
4 0.2465
5 0.245479
6 0.126308
7 0.213959
8 0.238405
9 0.114572
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 59 >
<Un>
0.0898568
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.565985
1 0.581118
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.828883
1 0.034683
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0388674
1 0.555018
2 0.539796
3 0.0446052
4 0.532208
5 0.0337592
6 0.0436428
7 0.0375624
8 0.0276925
9 0.0521293
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 60 >
<Un>
-0.03039
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.415326
1 0.441869
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.120403
1 0.619845
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.107213
1 0.0780143
2 0.158407
3 0.129142
4 0.0858787
5 0.932126
6 0.0982484
7 0.135842
8 0.101778
9 0.0677496
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 61 >
<Un>
-0.172036
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.510963
1 0.509369
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.0653565
1 0.689842
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.678369
1 0.0558743
2 0.0770886
3 0.683337
4 0.0909534
5 0.0419948
6 0.0824476
7 0.066735
8 0.0568474
9 0.0354272
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 62 >
<Un>
-0.134734
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.524674
1 0.52503
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.663676
1 0.0752147
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0882949
1 0.710012
2 0.698449
3 0.0831273
4 0.05255
5 0.0405814
6 0.0429274
7 0.0360894
8 0.0362979
9 0.0839832
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 63 >
<Un>
0
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.104222
1 0.132121
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.244003
1 0.156568
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.25905
1 0.207604
2 0.173962
3 0.176417
4 0.153366
5 0.254341
6 0.200159
7 0.126891
8 0.239675
9 0.224401
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 64 >
<Un>
-0.0119285
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.128421
1 0.196664
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.269125
1 0.288964
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.157732
1 0.213678
2 0.23366
3 0.164838
4 0.124522
5 0.16477
6 0.291223
7 0.259777
8 0.297689
9 0.191754
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 65 >
<Un>
-0.020363
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.10458
1 0.195662
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.253648
1 0.276782
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.160259
1 0.252623
2 0.205237
3 0.233854
4 0.171704
5 0.142283
6 0.190717
7 0.116622
8 0.18186
9 0.203383
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 66 >
<Un>
0.134655
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.618794
1 0.62262
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.508374
1 0.516582
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.315755
1 0.338294
2 0.330202
3 0.322106
4 0.320285
5 0.318513
6 0.00950931
7 0.00511529
8 0.00498251
9 0.00475935
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 67 >
<Un>
0.126514
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.564615
1 0.579069
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.833266
1 0.0265502
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0472108
1 0.547915
2 0.551158
3 0.0451575
4 0.522002
5 0.0406255
6 0.0526538
7 0.0495883
8 0.019444
9 0.0342558
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 68 >
<Un>
0
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.138982
1 0.162265
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.194633
1 0.219506
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.2277
1 0.163659
2 0.226364
3 0.177295
4 0.100135
5 0.221512
6 0.148551
7 0.100561
8 0.282681
9 0.226916
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 69 >
<Un>
-0.0252324
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.132834
1 0.23096
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.123771
1 0.141469
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.277533
1 0.188771
2 0.278672
3 0.228302
4 0.100653
5 0.289414
6 0.243336
7 0.125129
8 0.187787
9 0.112646
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 70 >
<Un>
-0.0650343
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.210518
1 0.234841
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.130662
1 0.249313
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.179725
1 0.28959
2 0.163361
3 0.276795
4 0.100071
5 0.168828
6 0.1623
7 0.11292
8 0.291538
9 0.157377
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 71 >
<Un>
-0.00494935
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.213917
1 0.224068
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.236028
1 0.118008
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.110263
1 0.149382
2 0.117907
3 0.262532
4 0.206486
5 0.190741
6 0.189742
7 0.144048
8 0.279538
9 0.205224
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 72 >
<Un>
-0.0310698
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.15257
1 0.218125
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.294285
1 0.278356
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.108988
1 0.133794
2 0.133335
3 0.152238
4 0.264767
5 0.175023
6 0.197436
7 0.287704
8 0.167914
9 0.29333
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 73 >
<Un>
-0.0183817
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.169874
1 0.184619
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.283816
1 0.103456
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.243384
1 0.14492
2 0.241697
3 0.24229
4 0.246488
5 0.167352
6 0.186368
7 0.215578
8 0.145014
9 0.14992
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 74 >
<Un>
-0.0440134
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.161702
1 0.253086
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.188948
1 0.226551
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.13523
1 0.281847
2 0.229096
3 0.11804
4 0.229161
5 0.195119
6 0.193834
7 0.101685
8 0.129215
9 0.255433
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 75 >
<Un>
-0.0653566
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.1712
1 0.231973
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.277547
1 0.107789
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.238583
1 0.289245
2 0.231337
3 0.129127
4 0.234801
5 0.130662
6 0.124243
7 0.215013
8 0.201181
9 0.25619
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 76 >
<Un>
0.0639415
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.569573
1 0.580737
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.835279
1 0.034169
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0416894
1 0.548593
2 0.537965
3 0.0264701
4 0.529913
5 0.0298996
6 0.0506555
7 0.0307549
8 0.0490799
9 0.0291519
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 77 >
<Un>
0.14089
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.618174
1 0.621768
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.508497
1 0.517802
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.316531
1 0.338833
2 0.330073
3 0.321471
4 0.319633
5 0.318445
6 0.00335413
7 0.003723
8 0.00841225
9 0.00726817
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 78 >
<Un>
-0.122021
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.197292
1 0.260159
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.130064
1 0.268652
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.284662
1 0.241535
2 0.272582
3 0.140394
4 0.231769
5 0.225515
6 0.155965
7 0.134068
8 0.168535
9 0.153112
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 79 >
<Un>
-0.0926789
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.207867
1 0.266798
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.270241
1 0.165323
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.157599
1 0.212969
2 0.162966
3 0.262784
4 0.216764
5 0.276758
6 0.260774
7 0.276083
8 0.171781
9 0.148469
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 80 >
<Un>
-0.0288098
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.140879
1 0.151516
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.273175
1 0.259002
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.181033
1 0.285759
2 0.12309
3 0.180155
4 0.203006
5 0.291761
6 0.11249
7 0.245359
8 0.176245
9 0.259156
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 81 >
<Un>
-0.230841
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.510527
1 0.508586
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.0781936
1 0.705965
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.678263
1 0.0876175
2 0.0383467
3 0.0276268
4 0.0482418
5 0.668215
6 0.0667083
7 0.0411773
8 0.040404
9 0.0772957
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 82 >
<Un>
0.0480843
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.576571
1 0.578388
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.0286549
1 0.844736
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.529783
1 0.0351048
2 0.0381422
3 0.539475
4 0.0450335
5 0.531916
6 0.0422501
7 0.0365657
8 0.0193688
9 0.0516745
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 83 >
<Un>
0.0233433
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.571225
1 0.584019
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.823124
1 0.0208219
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0218287
1 0.561709
2 0.553711
3 0.0392192
4 0.533926
5 0.0193882
6 0.0484801
7 0.0276764
8 0.0313658
9 0.0221588
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 84 >
<Un>
-0.0603921
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.261156
1 0.214692
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.265773
1 0.212522
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.130232
1 0.25745
2 0.107253
3 0.165495
4 0.219385
5 0.158412
6 0.281188
7 0.293796
8 0.283025
9 0.157744
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 85 >
<Un>
-0.108161
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.123555
1 0.27173
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.164178
1 0.243682
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.249869
1 0.190999
2 0.123457
3 0.21971
4 0.185997
5 0.279295
6 0.203204
7 0.248352
8 0.284347
9 0.297595
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 86 >
<Un>
-0.0483978
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.19448
1 0.226971
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.203009
1 0.221202
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.23337
1 0.198295
2 0.253606
3 0.107572
4 0.233462
5 0.272227
6 0.243907
7 0.252845
8 0.155653
9 0.289542
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 87 >
<Un>
0.111211
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.61959
1 0.622792
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.509335
1 0.519185
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.315628
1 0.33795
2 0.329678
3 0.322681
4 0.321884
5 0.316633
6 0.00791524
7 0.00801328
8 0.00771976
9 0.00548319
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 88 >
<Un>
0.106176
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.577469
1 0.575253
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.0504091
1 0.847483
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.526395
1 0.0229006
2 0.029892
3 0.541211
4 0.0273854
5 0.521823
6 0.0188881
7 0.0381552
8 0.0431392
9 0.0224087
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 89 >
<Un>
-0.0220665
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.175055
1 0.168944
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.24453
1 0.247389
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.155598
1 0.220901
2 0.113665
3 0.284976
4 0.125093
5 0.125529
6 0.261229
7 0.208805
8 0.266138
9 0.146677
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 90 >
<Un>
0
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.118192
1 0.142908
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.263413
1 0.139296
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.159436
1 0.182358
2 0.10376
3 0.133762
4 0.194319
5 0.212096
6 0.226071
7 0.286178
8 0.299676
9 0.201443
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 91 >
<Un>
0
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.138126
1 0.162721
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.207981
1 0.170077
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.265365
1 0.137533
2 0.168222
3 0.141461
4 0.271374
5 0.164806
6 0.288487
7 0.194372
8 0.251876
9 0.169571
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 92 >
<Un>
0.15942
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.568852
1 0.577469
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.824116
1 0.0401975
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0399143
1 0.558906
2 0.544944
3 0.0189864
4 0.52277
5 0.0435818
6 0.0464378
7 0.0195604
8 0.0313972
9 0.026671
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 93 >
<Un>
0.126378
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.570333
1 0.574488
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.0269584
1 0.857633
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.523503
1 0.0479216
2 0.0416031
3 0.535444
4 0.0293393
5 0.520559
6 0.0364155
7 0.0522736
8 0.0429789
9 0.0381122
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 94 >
<Un>
-0.296946
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.517898
1 0.51599
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.0322076
1 0.690779
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.680904
1 0.0615446
2 0.0931066
3 0.049977
4 0.0635475
5 0.681813
6 0.0631258
7 0.0930469
8 0.0820418
9 0.0911654
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 95 >
<Un>
-0.00781064
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.160304
1 0.183542
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.108634
1 0.281711
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.260203
1 0.203161
2 0.188096
3 0.173765
4 0.103648
5 0.112473
6 0.278655
7 0.188272
8 0.264299
9 0.150004
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 96 >
<Un>
-0.00927338
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.187787
1 0.113835
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.166009
1 0.19346
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.26326
1 0.289977
2 0.103095
3 0.184438
4 0.271498
5 0.284456
6 0.206808
7 0.205979
8 0.211808
9 0.236725
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 97 >
<Un>
0.176251
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.576454
1 0.571564
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.024962
1 0.848119
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.527579
1 0.0303654
2 0.0326407
3 0.534513
4 0.0312147
5 0.524181
6 0.0252967
7 0.0237792
8 0.0435004
9 0.0226032
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 98 >
<Un>
0.226176
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.616686
1 0.620188
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.505269
1 0.5139
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.314332
1 0.335321
2 0.328143
3 0.319239
4 0.317844
5 0.315819
6 0.00866973
7 0.00842335
8 0.00578869
9 0.00609865
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 99 >
<Un>
0.0284435
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.569308
1 0.578499
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.825096
1 0.0494382
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0472171
1 0.559954
2 0.545547
3 0.0338375
4 0.53197
5 0.0388757
6 0.0208482
7 0.0330146
8 0.0326888
9 0.0233909
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 100 >
<Un>
0
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.124739
1 0.196274
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.112347
1 0.126384
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.15953
1 0.23637
2 0.260566
3 0.253908
4 0.247958
5 0.125732
6 0.239362
7 0.291751
8 0.229171
9 0.135035
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 101 >
<Un>
-0.0033874
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.178425
1 0.267252
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.20846
1 0.158421
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.127802
1 0.100845
2 0.154652
3 0.117082
4 0.117379
5 0.209608
6 0.200296
7 0.259967
8 0.193677
9 0.27035
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 102 >
<Un>
-0.00521787
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.128117
1 0.163606
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.127818
1 0.267166
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.107191
1 0.216856
2 0.218691
3 0.170434
4 0.195492
5 0.252044
6 0.188905
7 0.20265
8 0.223086
9 0.13554
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 103 >
<Un>
0.17485
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.61783
1 0.621785
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.506159
1 0.516422
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.314468
1 0.338373
2 0.328258
3 0.319776
4 0.319544
5 0.317207
6 0.00828485
7 0.0052302
8 0.00779483
9 0.0085725
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 104 >
<Un>
-0.0207749
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.137653
1 0.178859
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.141644
1 0.217139
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.289009
1 0.246476
2 0.233302
3 0.104481
4 0.283608
5 0.286168
6 0.190163
7 0.131173
8 0.175125
9 0.102964
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 105 >
<Un>
-0.073885
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.213009
1 0.280412
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.197769
1 0.18844
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.239743
1 0.184662
2 0.187707
3 0.246235
4 0.250749
5 0.129283
6 0.275031
7 0.166439
8 0.143788
9 0.116756
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 106 >
<Un>
-0.0483231
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.241849
1 0.112859
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.203012
1 0.265956
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.139384
1 0.147115
2 0.127611
3 0.266719
4 0.247437
5 0.200633
6 0.229676
7 0.223278
8 0.251703
9 0.272293
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 107 >
<Un>
-0.00138247
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.212942
1 0.146047
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.226704
1 0.160044
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.240946
1 0.236884
2 0.25762
3 0.143683
4 0.19403
5 0.211521
6 0.148149
7 0.132085
8 0.240441
9 0.228168
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 108 >
<Un>
0.0711894
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.568523
1 0.583028
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.822933
1 0.0366318
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0368734
1 0.562155
2 0.54855
3 0.0268672
4 0.528371
5 0.0333641
6 0.0529442
7 0.0220484
8 0.0509238
9 0.0436551
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 109 >
<Un>
0.109713
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.619315
1 0.623138
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.509884
1 0.517578
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.317585
1 0.337874
2 0.329611
3 0.323064
4 0.321135
5 0.318604
6 0.00834604
7 0.0049965
8 0.00564881
9 0.00637749
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 110 >
<Un>
0.0771858
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.567634
1 0.57764
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.0280283
1 0.850006
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.535058
1 0.0354472
2 0.022266
3 0.53779
4 0.047795
5 0.532847
6 0.0394933
7 0.0490075
8 0.0446641
9 0.0344101
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 111 >
<Un>
-0.0043448
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.168644
1 0.118255
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.191854
1 0.236769
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.198821
1 0.288038
2 0.247159
3 0.221723
4 0.280073
5 0.244346
6 0.214671
7 0.210532
8 0.194913
9 0.117959
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 112 >
<Un>
-0.00212946
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.275773
1 0.214902
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.280126
1 0.263851
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.124483
1 0.125579
2 0.164685
3 0.127407
4 0.120287
5 0.129254
6 0.26961
7 0.263774
8 0.140274
9 0.173717
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 113 >
<Un>
0.0677159
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.578108
1 0.572838
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.0363113
1 0.848996
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.531895
1 0.0227334
2 0.0344809
3 0.532737
4 0.0451112
5 0.532809
6 0.0255345
7 0.0355639
8 0.019655
9 0.0418767
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 114 >
<Un>
0.237985
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.663326
1 0.544243
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.382921
1 0.637724
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.395586
1 0.0164916
2 0.245933
3 0.400812
4 0.417522
5 0.396278
6 0.0201352
7 0.0177888
8 0.0234891
9 0.0130574
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 115 >
<Un>
-0.0246113
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.571235
1 0.576166
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.835189
1 0.0419181
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0506176
1 0.551699
2 0.542683
3 0.0461006
4 0.534029
5 0.0478273
6 0.0515562
7 0.0196658
8 0.0334253
9 0.0264645
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 116 >
<Un>
-0.00296944
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.154728
1 0.139565
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.292223
1 0.243912
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.210987
1 0.156293
2 0.180212
3 0.26637
4 0.160738
5 0.269603
6 0.128827
7 0.108846
8 0.265685
9 0.127754
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 117 >
<Un>
-0.0605745
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.267978
1 0.187174
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.242239
1 0.268484
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.281688
1 0.190281
2 0.206265
3 0.101792
4 0.185667
5 0.141757
6 0.225375
7 0.227729
8 0.100537
9 0.177321
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 118 >
<Un>
-0.0353814
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.111057
1 0.198586
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.275312
1 0.127149
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.245495
1 0.156205
2 0.274482
3 0.157117
4 0.26457
5 0.128215
6 0.262759
7 0.146727
8 0.108013
9 0.273574
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 119 >
<Un>
0.107034
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.575483
1 0.568819
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.0488827
1 0.858476
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.521624
1 0.0334777
2 0.0210587
3 0.541461
4 0.0190131
5 0.525856
6 0.0454866
7 0.0232134
8 0.0313739
9 0.0247435
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 120 >
<Un>
0
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.116709
1 0.144232
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.211526
1 0.165709
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.170874
1 0.11877
2 0.20222
3 0.118653
4 0.125009
5 0.258208
6 0.140677
7 0.183466
8 0.207195
9 0.105829
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 121 >
<Un>
0
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.113962
1 0.100137
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.139022
1 0.261741
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.267773
1 0.251413
2 0.184078
3 0.147015
4 0.250702
5 0.289317
6 0.171819
7 0.282983
8 0.110826
9 0.27056
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 122 >
<Un>
0
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.142937
1 0.157793
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.165371
1 0.24829
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.213355
1 0.119246
2 0.246763
3 0.14535
4 0.132028
5 0.20302
6 0.211225
7 0.193213
8 0.266739
9 0.155917
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 123 >
<Un>
-0.0290715
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.233478
1 0.107084
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.234702
1 0.191726
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.298151
1 0.210377
2 0.220795
3 0.11241
4 0.273214
5 0.195767
6 0.250714
7 0.298806
8 0.115898
9 0.260397
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 124 >
<Un>
0.0293992
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.568626
1 0.576963
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.829696
1 0.034728
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0411455
1 0.55565
2 0.552323
3 0.047399
4 0.536021
5 0.0453965
6 0.0214808
7 0.0294255
8 0.0362796
9 0.0235811
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 125 >
<Un>
0.277115
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.663305
1 0.54253
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.377525
1 0.637901
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.397654
1 0.00793745
2 0.244925
3 0.40193
4 0.416521
5 0.392194
6 0.0195218
7 0.0234499
8 0.0123557
9 0.0222346
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 126 >
<Un>
0.104275
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.573906
1 0.576562
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.036494
1 0.848246
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.523999
1 0.0311568
2 0.0307371
3 0.53893
4 0.0474061
5 0.526218
6 0.0370769
7 0.0450576
8 0.0443594
9 0.0410345
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 127 >
<Un>
-0.0060727
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.222293
1 0.210823
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.161808
1 0.104376
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.1049
1 0.225652
2 0.158399
3 0.258049
4 0.279351
5 0.125562
6 0.235085
7 0.294432
8 0.262135
9 0.162105
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 128 >
<Un>
-0.0165648
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.277875
1 0.143523
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.197246
1 0.209487
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.216921
1 0.189612
2 0.205784
3 0.159483
4 0.186434
5 0.205645
6 0.119933
7 0.152659
8 0.223462
9 0.21479
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 129 >
<Un>
0.00226649
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.434659
1 0.43863
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.0924456
1 0.614965
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.10101
1 0.0782797
2 0.0707596
3 0.909431
4 0.145165
5 0.143866
6 0.133681
7 0.10407
8 0.132867
9 0.117244
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 130 >
<Un>
0.266303
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.66366
1 0.542888
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.377738
1 0.639264
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.393443
1 0.0118752
2 0.24654
3 0.401442
4 0.41823
5 0.39513
6 0.0180287
7 0.0148491
8 0.0212434
9 0.0207255
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 131 >
<Un>
0.095772
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.5661
1 0.573336
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.835691
1 0.0521606
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.029129
1 0.557777
2 0.541063
3 0.0182372
4 0.531518
5 0.0324463
6 0.0400526
7 0.0192515
8 0.0238059
9 0.0208162
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 132 >
<Un>
0.0846368
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.941894
1 0.038188
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.45647
1 0.474508
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.2955
1 0.320439
2 0.299515
3 0.314968
4 0.311637
5 0.305112
6 0.0520241
7 0.0213751
8 0.0331496
9 0.0255174
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 133 >
<Un>
-0.0232134
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.149936
1 0.197371
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.118145
1 0.19906
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.263165
1 0.179564
2 0.124473
3 0.260806
4 0.202156
5 0.291652
6 0.245027
7 0.244286
8 0.27588
9 0.197523
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 134 >
<Un>
0.217977
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.616611
1 0.620625
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.504529
1 0.513443
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.315196
1 0.336126
2 0.329615
3 0.321791
4 0.318322
5 0.316598
6 0.00670067
7 0.00942598
8 0.00344577
9 0.00561951
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 135 >
<Un>
0
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.135226
1 0.185453
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.11188
1 0.159816
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.23564
1 0.118132
2 0.211747
3 0.285558
4 0.154715
5 0.173958
6 0.14158
7 0.2836
8 0.211308
9 0.172641
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 136 >
<Un>
-0.00756877
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.571734
1 0.576728
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.837932
1 0.0484682
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0428807
1 0.548663
2 0.548708
3 0.0378343
4 0.521151
5 0.0420584
6 0.0390802
7 0.0360358
8 0.0222127
9 0.0327016
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 137 >
<Un>
0.0502182
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.56895
1 0.575249
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.0270153
1 0.857225
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.533085
1 0.0191066
2 0.0515286
3 0.542185
4 0.0209755
5 0.525169
6 0.0426791
7 0.0468303
8 0.0500919
9 0.0286392
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 138 >
<Un>
0.120729
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.839047
1 0.0643642
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.652954
1 0.0437916
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0444821
1 0.470953
2 0.46871
3 0.100867
4 0.455586
5 0.0798393
6 0.0430484
7 0.0844343
8 0.0544792
9 0.087632
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 139 >
<Un>
0.0547224
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.830258
1 0.0698375
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.0636484
1 0.646189
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.438131
1 0.0936912
2 0.0678852
3 0.454485
4 0.119412
5 0.460268
6 0.100554
7 0.0674601
8 0.0585642
9 0.0931358
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 140 >
<Un>
0.050127
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.567166
1 0.578959
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.835061
1 0.0371589
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0363998
1 0.555668
2 0.5415
3 0.0210801
4 0.525082
5 0.0491455
6 0.0187777
7 0.0348398
8 0.0302651
9 0.0234641
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 141 >
<Un>
0.317614
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.663033
1 0.540293
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.372926
1 0.638713
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.396707
1 0.0097101
2 0.242879
3 0.401153
4 0.417045
5 0.39629
6 0.0184049
7 0.0133575
8 0.0171006
9 0.0161871
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 142 >
<Un>
0.0608712
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.412769
1 0.411721
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.130097
1 0.609572
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.129089
1 0.149881
2 0.148311
3 0.926175
4 0.0920936
5 0.149096
6 0.162868
7 0.116075
8 0.115832
9 0.112481
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 143 >
<Un>
-0.0496645
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.21946
1 0.241764
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.218458
1 0.161826
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.267496
1 0.272461
2 0.188913
3 0.236209
4 0.162731
5 0.245062
6 0.261312
7 0.186028
8 0.222301
9 0.167324
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 144 >
<Un>
-0.0716193
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.208023
1 0.243707
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.16087
1 0.243959
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.2657
1 0.172405
2 0.28767
3 0.120987
4 0.178917
5 0.226153
6 0.294956
7 0.106694
8 0.290195
9 0.208257
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 145 >
<Un>
-0.147739
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.242419
1 0.2289
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.254621
1 0.269374
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.217559
1 0.286208
2 0.276388
3 0.248156
4 0.157552
5 0.215535
6 0.2784
7 0.160646
8 0.296887
9 0.247173
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 146 >
<Un>
0.0704401
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.574769
1 0.57051
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.041343
1 0.847339
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.533606
1 0.0380807
2 0.0503116
3 0.541192
4 0.023716
5 0.533147
6 0.0510996
7 0.0298508
8 0.0473858
9 0.0425074
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 147 >
<Un>
0.0545038
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.566146
1 0.582081
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.830727
1 0.0285007
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.043797
1 0.550751
2 0.549026
3 0.0314767
4 0.532605
5 0.0234967
6 0.0232842
7 0.0418947
8 0.0440064
9 0.0388204
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 148 >
<Un>
0.125969
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.0338588
1 0.946261
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.456214
1 0.463661
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.308404
1 0.318127
2 0.329359
3 0.301281
4 0.307263
5 0.296646
6 0.0294927
7 0.0354415
8 0.0206285
9 0.0334149
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 149 >
<Un>
0.166268
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.618107
1 0.621814
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.507079
1 0.516669
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.314514
1 0.336975
2 0.328791
3 0.320816
4 0.319811
5 0.316059
6 0.006133
7 0.00398969
8 0.00556673
9 0.00926582
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 150 >
<Un>
-0.0205103
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.267294
1 0.148721
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.184615
1 0.228844
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.250448
1 0.179956
2 0.237388
3 0.177454
4 0.133389
5 0.117034
6 0.220414
7 0.183696
8 0.271645
9 0.251329
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 151 >
<Un>
-0.0617373
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.196677
1 0.196896
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.223822
1 0.267973
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.189079
1 0.279428
2 0.113051
3 0.280099
4 0.157609
5 0.193341
6 0.285994
7 0.241033
8 0.190509
9 0.226568
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 152 >
<Un>
-0.00592693
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.175809
1 0.142537
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.271388
1 0.261591
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.279101
1 0.154919
2 0.213089
3 0.204392
4 0.154584
5 0.137314
6 0.225693
7 0.263787
8 0.273327
9 0.151164
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 153 >
<Un>
0.0870417
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.570403
1 0.576294
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.823594
1 0.0495877
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0267947
1 0.561574
2 0.550248
3 0.0204941
4 0.528435
5 0.0413439
6 0.0299267
7 0.0428555
8 0.0436917
9 0.0216322
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 154 >
<Un>
0.162626
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.447384
1 0.75533
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.374836
1 0.641143
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.394455
1 0.249299
2 0.247889
3 0.401829
4 0.237597
5 0.395191
6 0.00879792
7 0.0200857
8 0.00819648
9 0.0108043
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 155 >
<Un>
0.0811033
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.0617918
1 0.828538
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.047524
1 0.641775
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.448342
1 0.0794619
2 0.0967903
3 0.467792
4 0.118849
5 0.471183
6 0.124266
7 0.0449195
8 0.0984308
9 0.0773167
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 156 >
<Un>
0.0827259
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.5645
1 0.579518
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.834642
1 0.033139
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0297316
1 0.555788
2 0.546434
3 0.0395573
4 0.523863
5 0.0240936
6 0.0530965
7 0.0309205
8 0.0203692
9 0.0353244
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 157 >
<Un>
0.21768
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.568414
1 0.571255
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.0353103
1 0.84941
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.526571
1 0.0460012
2 0.0503666
3 0.534532
4 0.0319603
5 0.52415
6 0.0267524
7 0.0525735
8 0.0184631
9 0.0384645
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 158 >
<Un>
-0.0612897
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.16771
1 0.283154
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.161491
1 0.196796
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.246292
1 0.179537
2 0.223527
3 0.100372
4 0.179448
5 0.232361
6 0.275868
7 0.160586
8 0.103914
9 0.210831
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 159 >
<Un>
-0.126661
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.272372
1 0.210899
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.25513
1 0.261969
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.160777
1 0.175025
2 0.28525
3 0.167752
4 0.175646
5 0.284171
6 0.140635
7 0.152504
8 0.15534
9 0.145044
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 160 >
<Un>
-0.00559647
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.277298
1 0.201443
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.176519
1 0.119589
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.260282
1 0.22356
2 0.143666
3 0.221298
4 0.114594
5 0.125561
6 0.291433
7 0.184608
8 0.19072
9 0.183096
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 161 >
<Un>
0
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.14391
1 0.129185
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.153752
1 0.188186
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.171373
1 0.276766
2 0.281564
3 0.14747
4 0.290088
5 0.242877
6 0.140855
7 0.219861
8 0.145967
9 0.102321
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 162 >
<Un>
0.0687951
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.576825
1 0.573494
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.0341267
1 0.854999
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.52483
1 0.0468024
2 0.0444311
3 0.528901
4 0.01865
5 0.53181
6 0.041763
7 0.0310626
8 0.0179124
9 0.0266995
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 163 >
<Un>
0.096563
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.563221
1 0.574722
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.833474
1 0.0367331
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0493223
1 0.559025
2 0.541119
3 0.0402815
4 0.536431
5 0.0475031
6 0.0402635
7 0.050441
8 0.0440781
9 0.0179476
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 164 >
<Un>
-0.0520375
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.140933
1 0.217563
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.117073
1 0.267519
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.172804
1 0.236745
2 0.237973
3 0.277702
4 0.206716
5 0.167645
6 0.102317
7 0.134124
8 0.182623
9 0.214114
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 165 >
<Un>
0
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.103935
1 0.119559
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.175245
1 0.19699
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.220685
1 0.147481
2 0.28647
3 0.233195
4 0.167167
5 0.104799
6 0.181925
7 0.245912
8 0.17479
9 0.160746
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 166 >
<Un>
-0.0834128
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.276765
1 0.196315
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.167187
1 0.261744
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.163679
1 0.198803
2 0.285554
3 0.15028
4 0.166361
5 0.268552
6 0.204479
7 0.145259
8 0.149947
9 0.149064
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 167 >
<Un>
0
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.191355
1 0.102949
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.122899
1 0.118518
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.205538
1 0.134705
2 0.136902
3 0.125416
4 0.101435
5 0.258036
6 0.114185
7 0.276766
8 0.171629
9 0.127511
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 168 >
<Un>
-0.060784
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.22333
1 0.107947
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.249237
1 0.257941
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.165625
1 0.19176
2 0.291046
3 0.247618
4 0.282336
5 0.259203
6 0.100488
7 0.12133
8 0.201042
9 0.231565
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 169 >
<Un>
-0.0301718
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.272468
1 0.239375
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.17924
1 0.134873
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.110674
1 0.162484
2 0.270568
3 0.236142
4 0.149772
5 0.14784
6 0.207917
7 0.285345
8 0.230492
9 0.247648
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 170 >
<Un>
-0.00160287
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.239473
1 0.151335
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.100808
1 0.130176
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.249067
1 0.270423
2 0.114975
3 0.20503
4 0.196188
5 0.148999
6 0.139455
7 0.129046
8 0.102832
9 0.119049
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 171 >
<Un>
-0.0427304
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.246272
1 0.113013
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.267252
1 0.219196
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.256602
1 0.189014
2 0.212268
3 0.268384
4 0.106931
5 0.272618
6 0.2483
7 0.200309
8 0.218958
9 0.173458
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 172 >
<Un>
0.0479317
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.572869
1 0.576169
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.836892
1 0.0223732
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0386411
1 0.547717
2 0.545767
3 0.0455803
4 0.526932
5 0.0493524
6 0.0277782
7 0.0387032
8 0.0484811
9 0.0497158
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 173 >
<Un>
0.169673
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.566491
1 0.568617
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.0379727
1 0.851225
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.536913
1 0.0355181
2 0.0279815
3 0.541658
4 0.0304757
5 0.52531
6 0.0356783
7 0.0302002
8 0.0255073
9 0.0306982
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 174 >
<Un>
-0.00234484
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.172527
1 0.132425
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.272069
1 0.161346
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.197518
1 0.275945
2 0.188365
3 0.17831
4 0.178253
5 0.120662
6 0.223527
7 0.168396
8 0.116407
9 0.242302
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 175 >
<Un>
-0.0421975
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.286904
1 0.110562
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.139999
1 0.127354
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.206382
1 0.182039
2 0.175822
3 0.276172
4 0.282393
5 0.212986
6 0.142487
7 0.145992
8 0.11875
9 0.152818
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 176 >
<Un>
-0.109359
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.234407
1 0.248502
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.224001
1 0.222329
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.275427
1 0.215823
2 0.182839
3 0.109891
4 0.268475
5 0.264456
6 0.156817
7 0.244727
8 0.234259
9 0.1556
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 177 >
<Un>
-0.014098
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.245968
1 0.154195
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.274605
1 0.2354
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.209429
1 0.163529
2 0.218977
3 0.133733
4 0.182875
5 0.199207
6 0.160367
7 0.197408
8 0.146604
9 0.219878
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 178 >
<Un>
-0.1388
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.50937
1 0.507742
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.062002
1 0.684633
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.674964
1 0.0558116
2 0.0891991
3 0.692883
4 0.0924103
5 0.0417106
6 0.0904137
7 0.0536933
8 0.040289
9 0.0646616
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 179 >
<Un>
0.0518881
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.435786
1 0.439849
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.144295
1 0.596852
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0780973
1 0.112628
2 0.116633
3 0.14094
4 0.0846716
5 0.917958
6 0.0768589
7 0.165647
8 0.131752
9 0.0981056
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 180 >
<Un>
-0.0417705
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.570121
1 0.583317
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.831386
1 0.0425543
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0486016
1 0.552001
2 0.541149
3 0.0320299
4 0.534371
5 0.0356999
6 0.0229146
7 0.041503
8 0.0214189
9 0.0273289
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 181 >
<Un>
-0.0440676
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.292352
1 0.265791
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.18027
1 0.210873
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.117713
1 0.225708
2 0.170247
3 0.191416
4 0.190011
5 0.177908
6 0.217346
7 0.120715
8 0.151326
9 0.277933
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 182 >
<Un>
0
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.12083
1 0.152475
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.195446
1 0.264274
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.174169
1 0.112351
2 0.144643
3 0.183085
4 0.227275
5 0.108256
6 0.13665
7 0.253183
8 0.107802
9 0.242942
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 183 >
<Un>
-0.0166664
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.231229
1 0.21057
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.199685
1 0.211081
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.210035
1 0.189996
2 0.10991
3 0.165169
4 0.177731
5 0.251654
6 0.196024
7 0.129556
8 0.277019
9 0.294793
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 184 >
<Un>
-0.0608254
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.183471
1 0.202736
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.281831
1 0.196269
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.100749
1 0.255652
2 0.233047
3 0.126638
4 0.257195
5 0.290062
6 0.161753
7 0.170827
8 0.25576
9 0.25078
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 185 >
<Un>
-0.0578718
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.200032
1 0.207168
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.231861
1 0.237781
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.13892
1 0.17184
2 0.281503
3 0.273177
4 0.117065
5 0.222378
6 0.294903
7 0.138338
8 0.230316
9 0.11514
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 186 >
<Un>
-0.0159145
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.226481
1 0.114051
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.272942
1 0.19419
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.232363
1 0.260127
2 0.211492
3 0.171382
4 0.112471
5 0.22672
6 0.181836
7 0.259253
8 0.290319
9 0.277167
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 187 >
<Un>
0.130877
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.567337
1 0.576519
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.833802
1 0.0252883
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0407526
1 0.547919
2 0.539647
3 0.0258726
4 0.528068
5 0.0302646
6 0.0491984
7 0.0515899
8 0.051486
9 0.0331297
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 188 >
<Un>
0.0889725
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.428318
1 0.459084
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.12918
1 0.617837
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0671795
1 0.0921768
2 0.162324
3 0.0819117
4 0.064333
5 0.913735
6 0.0673278
7 0.109947
8 0.126262
9 0.128189
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 189 >
<Un>
-0.164176
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.510478
1 0.50887
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.0375009
1 0.68167
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.677568
1 0.0799531
2 0.0823194
3 0.68643
4 0.0561524
5 0.0491005
6 0.0317499
7 0.0867745
8 0.0602235
9 0.0683263
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 190 >
<Un>
-0.0417114
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.189883
1 0.207
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.258072
1 0.24168
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.219054
1 0.178897
2 0.166465
3 0.217951
4 0.271524
5 0.238685
6 0.105579
7 0.14824
8 0.281576
9 0.296025
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 191 >
<Un>
-0.00852718
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.267749
1 0.100421
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.133173
1 0.191944
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.170647
1 0.213813
2 0.144235
3 0.143526
4 0.234391
5 0.160674
6 0.112868
7 0.29584
8 0.178076
9 0.113578
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 192 >
<Un>
-0.00132349
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.119572
1 0.228819
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.141806
1 0.178801
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.228331
1 0.191329
2 0.169997
3 0.128589
4 0.222437
5 0.156837
6 0.232067
7 0.11303
8 0.215333
9 0.124343
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 193 >
<Un>
-0.0436974
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.149355
1 0.183992
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.133705
1 0.283012
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.268429
1 0.182304
2 0.283841
3 0.132753
4 0.237493
5 0.245818
6 0.125868
7 0.263693
8 0.208684
9 0.226288
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 194 >
<Un>
-0.00787414
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.207761
1 0.114584
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.261668
1 0.219709
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.154764
1 0.112118
2 0.152912
3 0.256025
4 0.18824
5 0.120814
6 0.21348
7 0.293612
8 0.131336
9 0.128134
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 195 >
<Un>
0.0631419
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.573603
1 0.572707
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.0296467
1 0.850327
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.535902
1 0.0284334
2 0.044039
3 0.540311
4 0.0334162
5 0.533441
6 0.0529618
7 0.0452659
8 0.0356245
9 0.044878
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 196 >
<Un>
0.0433598
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.571113
1 0.576059
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.835434
1 0.0242619
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0519383
1 0.553899
2 0.549106
3 0.0499437
4 0.523552
5 0.0229938
6 0.0194695
7 0.0178655
8 0.0232705
9 0.0266232
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 197 >
<Un>
-0.112493
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.276233
1 0.18834
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.261096
1 0.248594
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.273618
1 0.249779
2 0.231703
3 0.188185
4 0.201513
5 0.211783
6 0.278096
7 0.122908
8 0.220213
9 0.101129
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 198 >
<Un>
-0.081169
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.282667
1 0.256297
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.223281
1 0.140167
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.217172
1 0.107229
2 0.252067
3 0.273064
4 0.147758
5 0.248918
6 0.228579
7 0.216491
8 0.133461
9 0.170899
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 199 >
<Un>
-0.00667785
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.248733
1 0.131351
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.101457
1 0.197605
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.22951
1 0.163521
2 0.215063
3 0.130513
4 0.270995
5 0.125093
6 0.227226
7 0.25267
8 0.245645
9 0.129317
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 200 >
<Un>
-0.00552415
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.252505
1 0.161064
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.194486
1 0.208034
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.232048
1 0.147914
2 0.194263
3 0.147777
4 0.146864
5 0.210412
6 0.20563
7 0.269438
8 0.234072
9 0.159843
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 201 >
<Un>
0
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.116197
1 0.123643
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.175126
1 0.156081
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.150537
1 0.13137
2 0.135695
3 0.285025
4 0.2932
5 0.217522
6 0.147482
7 0.145068
8 0.104265
9 0.132353
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 202 >
<Un>
-0.0441335
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.114758
1 0.208641
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.25016
1 0.236994
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.182016
1 0.238796
2 0.271197
3 0.190164
4 0.264931
5 0.11033
6 0.123869
7 0.233697
8 0.252861
9 0.19326
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 203 >
<Un>
0.0418722
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.56515
1 0.581965
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.837947
1 0.0403334
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0213523
1 0.548858
2 0.552831
3 0.0189383
4 0.520417
5 0.0432415
6 0.0453814
7 0.0204684
8 0.0191199
9 0.0180557
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 204 >
<Un>
0.16958
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.568638
1 0.573921
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.0400646
1 0.850537
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.52311
1 0.0178393
2 0.0234803
3 0.536058
4 0.0221509
5 0.532789
6 0.0301748
7 0.0445476
8 0.0218919
9 0.0347375
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 205 >
<Un>
-0.0168777
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.218427
1 0.135177
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.229571
1 0.245519
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.160299
1 0.171441
2 0.223636
3 0.122516
4 0.133186
5 0.283561
6 0.288709
7 0.165382
8 0.280963
9 0.163485
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 206 >
<Un>
-0.00380142
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.188798
1 0.211606
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.206536
1 0.201712
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.143723
1 0.129483
2 0.126077
3 0.173245
4 0.245834
5 0.216043
6 0.110481
7 0.217397
8 0.269811
9 0.152805
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 207 >
<Un>
-0.0177711
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.131629
1 0.182434
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.289131
1 0.243719
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.224166
1 0.189358
2 0.103443
3 0.119117
4 0.145117
5 0.275712
6 0.190809
7 0.227788
8 0.106349
9 0.198065
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 208 >
<Un>
-0.0631874
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.114617
1 0.228528
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.22345
1 0.165146
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.11126
1 0.278349
2 0.266228
3 0.145036
4 0.270324
5 0.282944
6 0.235458
7 0.203457
8 0.207974
9 0.147755
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 209 >
<Un>
-0.0348914
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.260303
1 0.178063
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.207331
1 0.282284
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.274239
1 0.119465
2 0.123972
3 0.127078
4 0.168342
5 0.112979
6 0.159153
7 0.244801
8 0.219769
9 0.114152
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 210 >
<Un>
-0.0039283
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.13321
1 0.188945
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.174598
1 0.226721
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.176996
1 0.249098
2 0.229993
3 0.19296
4 0.171017
5 0.246987
6 0.163367
7 0.137594
8 0.12274
9 0.29753
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 211 >
<Un>
-0.164546
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.508499
1 0.506151
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.0678655
1 0.672134
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0267739
1 0.0592785
2 0.087919
3 0.690069
4 0.0740406
5 0.674936
6 0.0686036
7 0.0768922
8 0.0666005
9 0.0908366
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 212 >
<Un>
0.00255411
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.580643
1 0.586432
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.578481
1 0.360066
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.555144
1 0.0397024
2 0.553638
3 0.0255539
4 0.53944
5 0.0380235
6 0.0444713
7 0.0334306
8 0.0427661
9 0.0250165
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 213 >
<Un>
0.052056
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.461762
1 0.485548
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.577533
1 0.13335
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.11538
1 0.942736
2 0.0898136
3 0.101482
4 0.0671697
5 0.108715
6 0.168858
7 0.101584
8 0.124136
9 0.0757333
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 214 >
<Un>
-0.0705772
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.208149
1 0.268088
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.236024
1 0.170825
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.13477
1 0.228225
2 0.216167
3 0.215461
4 0.102256
5 0.266773
6 0.258076
7 0.239433
8 0.268898
9 0.143761
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 215 >
<Un>
0
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.123206
1 0.126285
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.225172
1 0.146273
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.257473
1 0.132664
2 0.194873
3 0.103766
4 0.121673
5 0.134462
6 0.216377
7 0.180716
8 0.105217
9 0.15153
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 216 >
<Un>
-0.144216
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.260866
1 0.263423
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.200734
1 0.22547
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.165806
1 0.257956
2 0.274407
3 0.277681
4 0.2321
5 0.176175
6 0.29502
7 0.203453
8 0.224782
9 0.24863
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 217 >
<Un>
0
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.136096
1 0.108131
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.201876
1 0.251102
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.22389
1 0.106896
2 0.192541
3 0.142301
4 0.261964
5 0.240784
6 0.288581
7 0.253213
8 0.17397
9 0.20228
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 218 >
<Un>
0.16932
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.44917
1 0.45286
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.562617
1 0.1588
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.128579
1 0.92686
2 0.156193
3 0.0761265
4 0.154395
5 0.0876659
6 0.122364
7 0.0831961
8 0.0854848
9 0.0576741
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 219 >
<Un>
0.0652471
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.578432
1 0.583655
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.574805
1 0.358141
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.551831
1 0.0350046
2 0.553405
3 0.0213711
4 0.538104
5 0.038842
6 0.0541026
7 0.0263827
8 0.0463776
9 0.0471538
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 220 >
<Un>
-0.307403
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.509318
1 0.50714
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.0830451
1 0.687034
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0419373
1 0.0572628
2 0.0844231
3 0.67913
4 0.085635
5 0.677712
6 0.084406
7 0.0836661
8 0.0959167
9 0.0430374
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 221 >
<Un>
-0.10157
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.231647
1 0.265668
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.243814
1 0.173107
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.271789
1 0.265962
2 0.227427
3 0.149624
4 0.247008
5 0.160444
6 0.10826
7 0.260925
8 0.103538
9 0.182023
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 222 >
<Un>
-0.0686976
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.159628
1 0.270337
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.163934
1 0.17538
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.288547
1 0.157954
2 0.206871
3 0.138021
4 0.216931
5 0.266938
6 0.176729
7 0.230542
8 0.203343
9 0.102909
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 223 >
<Un>
-0.0276396
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.108856
1 0.162031
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.288731
1 0.172435
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.193541
1 0.280844
2 0.266733
3 0.218079
4 0.274819
5 0.241612
6 0.131757
7 0.249388
8 0.266734
9 0.162971
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 224 >
<Un>
-0.0228445
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.115002
1 0.288715
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.103081
1 0.19569
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.235536
1 0.185683
2 0.10712
3 0.188578
4 0.115047
5 0.135338
6 0.255855
7 0.252607
8 0.282896
9 0.254109
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 225 >
<Un>
0
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.106576
1 0.124301
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.246571
1 0.112091
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.192924
1 0.157708
2 0.123464
3 0.218941
4 0.266526
5 0.238346
6 0.121524
7 0.237166
8 0.187098
9 0.135932
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 226 >
<Un>
-0.00857249
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.236153
1 0.135757
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.119576
1 0.124191
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.27453
1 0.175645
2 0.28413
3 0.278481
4 0.111047
5 0.179705
6 0.180342
7 0.150936
8 0.298385
9 0.192894
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 227 >
<Un>
0.0166669
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.459256
1 0.426469
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.0895239
1 0.596452
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.104395
1 0.0897464
2 0.155686
3 0.130213
4 0.128288
5 0.932293
6 0.12907
7 0.130289
8 0.0935517
9 0.104279
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 228 >
<Un>
-0.0646364
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.463021
1 0.468192
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.111122
1 0.6123
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0988222
1 0.0853753
2 0.141765
3 0.918234
4 0.089258
5 0.105041
6 0.0699691
7 0.0648028
8 0.0635364
9 0.168107
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 229 >
<Un>
0.0161869
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.575298
1 0.581377
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.588321
1 0.365947
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.551712
1 0.0322481
2 0.554833
3 0.0269142
4 0.541525
5 0.0246065
6 0.0296105
7 0.0421895
8 0.0459181
9 0.0514363
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 230 >
<Un>
0.145717
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.575846
1 0.578225
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.572385
1 0.357639
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.546638
1 0.56023
2 0.0279127
3 0.0437641
4 0.542244
5 0.0349474
6 0.0423299
7 0.0398545
8 0.0239949
9 0.0195176
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 231 >
<Un>
-0.0550634
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.584941
1 0.588963
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.586956
1 0.369153
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.54641
1 0.561799
2 0.0374334
3 0.0459006
4 0.545015
5 0.0418243
6 0.0480356
7 0.0489252
8 0.0351544
9 0.0252565
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 232 >
<Un>
0.0655052
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.5796
1 0.582948
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.589503
1 0.363902
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.551674
1 0.556492
2 0.0203322
3 0.0279127
4 0.538189
5 0.0361306
6 0.0417379
7 0.0380648
8 0.0317719
9 0.032832
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 233 >
<Un>
0.0225161
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.583926
1 0.587768
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.586725
1 0.363597
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.55255
1 0.561896
2 0.0250424
3 0.0407354
4 0.54492
5 0.0338023
6 0.0370365
7 0.0477741
8 0.0310973
9 0.0363008
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 234 >
<Un>
-0.0515493
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.581747
1 0.588925
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.588954
1 0.357694
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.555107
1 0.0347946
2 0.558378
3 0.0265197
4 0.543413
5 0.0427441
6 0.0519835
7 0.0530179
8 0.0470542
9 0.04417
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 235 >
<Un>
0.0337163
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.441589
1 0.458163
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.152975
1 0.585294
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.113053
1 0.111078
2 0.134135
3 0.939792
4 0.138176
5 0.129502
6 0.126766
7 0.159174
8 0.0737032
9 0.0938883
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 236 >
<Un>
-0.029045
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.457709
1 0.427898
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.150492
1 0.608223
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.110341
1 0.14553
2 0.108805
3 0.106067
4 0.0845003
5 0.923128
6 0.0798761
7 0.11053
8 0.146156
9 0.0780983
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 237 >
<Un>
0
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.160788
1 0.173386
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.123829
1 0.180333
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.148957
1 0.232573
2 0.270286
3 0.185456
4 0.268678
5 0.237599
6 0.119047
7 0.227794
8 0.134544
9 0.134186
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 238 >
<Un>
-0.11028
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.244934
1 0.214021
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.175242
1 0.273858
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.287792
1 0.273978
2 0.273775
3 0.11704
4 0.195204
5 0.238088
6 0.196116
7 0.173349
8 0.206386
9 0.16536
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 239 >
<Un>
-0.0113111
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.240236
1 0.116541
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.109878
1 0.22485
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.211433
1 0.196925
2 0.201061
3 0.231966
4 0.120012
5 0.189625
6 0.11796
7 0.205978
8 0.206857
9 0.287055
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 240 >
<Un>
-0.0136698
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.250286
1 0.249511
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.2584
1 0.19792
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.15147
1 0.180235
2 0.195144
3 0.195919
4 0.100852
5 0.114232
6 0.1575
7 0.256203
8 0.267573
9 0.277924
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 241 >
<Un>
0
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.191553
1 0.160861
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.168213
1 0.196461
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.104454
1 0.203615
2 0.201504
3 0.198955
4 0.131017
5 0.121632
6 0.187391
7 0.171218
8 0.17668
9 0.109812
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 242 >
<Un>
0
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.215819
1 0.165296
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.273524
1 0.106596
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.102987
1 0.113613
2 0.182838
3 0.205581
4 0.129325
5 0.261045
6 0.129212
7 0.251686
8 0.222907
9 0.13898
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 243 >
<Un>
-0.0267429
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.163095
1 0.204594
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.150626
1 0.22244
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.177935
1 0.180242
2 0.104089
3 0.183386
4 0.150642
5 0.287927
6 0.231817
7 0.136891
8 0.102201
9 0.168401
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 244 >
<Un>
0.113204
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.444847
1 0.442691
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.0597692
1 0.595396
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0626482
1 0.16324
2 0.15666
3 0.124087
4 0.146885
5 0.893141
6 0.0616801
7 0.115525
8 0.133335
9 0.103105
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 245 >
<Un>
-0.255059
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.508729
1 0.506436
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.0873316
1 0.660339
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0581885
1 0.0603051
2 0.0547566
3 0.687861
4 0.0723655
5 0.700335
6 0.0534907
7 0.0876526
8 0.0818485
9 0.0574379
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 246 >
<Un>
0.0415953
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.573367
1 0.573241
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.351041
1 0.558341
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0221101
1 0.036658
2 0.57049
3 0.544238
4 0.0220847
5 0.538063
6 0.0290645
7 0.035322
8 0.0341868
9 0.0355952
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 247 >
<Un>
-0.0676585
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.577739
1 0.577885
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.347554
1 0.571253
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.026646
1 0.0523356
2 0.574459
3 0.552302
4 0.0337997
5 0.542438
6 0.0292103
7 0.0364782
8 0.0456939
9 0.0397024
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 248 >
<Un>
0.0326379
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.572187
1 0.572056
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.354325
1 0.560658
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0227945
1 0.0303103
2 0.565483
3 0.54883
4 0.034447
5 0.54217
6 0.0546593
7 0.0376867
8 0.0380147
9 0.0452949
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 249 >
<Un>
0.0345083
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.569709
1 0.56952
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.350368
1 0.555622
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0303009
1 0.0418423
2 0.568613
3 0.545203
4 0.0266793
5 0.54592
6 0.0410491
7 0.0401953
8 0.0295501
9 0.0257536
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 250 >
<Un>
-0.126115
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.501681
1 0.499339
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.0810194
1 0.671922
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0254704
1 0.0725354
2 0.0872735
3 0.690365
4 0.0361505
5 0.679824
6 0.0882222
7 0.0951484
8 0.0632188
9 0.0501493
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 251 >
<Un>
0.0842549
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.434616
1 0.439528
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.107974
1 0.597305
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.0598349
1 0.0917602
2 0.0749218
3 0.133911
4 0.151761
5 0.910065
6 0.139334
7 0.110173
8 0.076889
9 0.109111
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 252 >
<Un>
-0.0510008
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.159239
1 0.189419
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.274625
1 0.217168
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.202607
1 0.116892
2 0.132342
3 0.278222
4 0.28503
5 0.267677
6 0.18253
7 0.196079
8 0.129663
9 0.158301
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 253 >
<Un>
-0.077705
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.185623
1 0.263565
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.130237
1 0.246621
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.269633
1 0.102412
2 0.114326
3 0.222024
4 0.284977
5 0.165805
6 0.261351
7 0.239017
8 0.238056
9 0.253614
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 254 >
<Un>
-0.070962
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.213374
1 0.258387
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.163478
1 0.201208
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.159613
1 0.240102
2 0.289646
3 0.268607
4 0.16397
5 0.205561
6 0.115997
7 0.250432
8 0.255934
9 0.125912
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 255 >
<Un>
-0.103378
<Cg 0 Fm:Emotion>
<Cn 2>
0 0.25181
1 0.255441
</Cn>
</Cg>
<Cg 1 Fm:Gender>
<Cn 2>
0 0.175527
1 0.233108
</Cn>
</Cg>
<Cg 2 Fm:Identity>
<Cn 10>
0 0.19232
1 0.280344
2 0.151307
3 0.252233
4 0.249871
5 0.229828
6 0.132487
7 0.12402
8 0.266019
9 0.138966
</Cn>
</Cg>
</Un>
</UgUn>
</Ug>
</Lay>
<Lay Emotion>
<acts_m_avg 0.15>
<acts_p_avg 0.15>
<acts_p_avg_eff 0.15>
<adapt_gi 1>
<Ug>
<UgUn 0 Happy>
<Un>
1.42964
<Cg 0 Fm:Input>
<Cn 256>
0 0.462103
1 0.265319
2 0.650775
3 0.27576
4 0.0487606
5 0.655295
6 1
7 1
8 1
9 1
10 0.659041
11 0.0457581
12 0.275573
13 0.658061
14 0.275495
15 0.461646
16 0.0346068
17 0.461503
18 0.0497226
19 0.658772
20 0.664198
21 0.659895
22 0.035272
23 0.0254916
24 0.0216713
25 0.0416778
26 0.649004
27 0.660179
28 0.656257
29 0.0454372
30 0.462049
31 0.033804
32 0.0292949
33 0.0323384
34 0.658295
35 0.664514
36 0.65066
37 0.0190956
38 0.0213003
39 1
40 1
41 0.0245879
42 0.0512291
43 0.658322
44 0.659704
45 0.6594
46 0.0233874
47 0.0315961
48 0.0478641
49 0.460287
50 0.451637
51 0.822727
52 0.0494733
53 0.0371593
54 1
55 0.0329608
56 0.0394978
57 1
58 0.0516216
59 0.652864
60 0.266256
61 0.458476
62 0.466794
63 0.0188351
64 0.0232087
65 0.0188999
66 1
67 0.651728
68 0.025117
69 0.0240059
70 0.0380446
71 0.0386594
72 0.0275727
73 0.0306999
74 0.0292228
75 0.0309396
76 0.656684
77 1
78 0.0356549
79 0.0375657
80 0.0254597
81 0.458146
82 0.664033
83 0.658252
84 0.0471949
85 0.0223289
86 0.0351467
87 1
88 0.66511
89 0.031636
90 0.0213599
91 0.0249625
92 0.655907
93 0.658038
94 0.462426
95 0.0289704
96 0.033937
97 0.664309
98 1
99 0.6559
100 0.0225428
101 0.0322456
102 0.0231535
103 1
104 0.0248769
105 0.0384948
106 0.0437057
107 0.038483
108 0.65539
109 1
110 0.655083
111 0.0304776
112 0.0498377
113 0.665776
114 0.954071
115 0.65798
116 0.0279626
117 0.0484276
118 0.0200701
119 0.663471
120 0.0210917
121 0.0205953
122 0.0258318
123 0.0421932
124 0.655635
125 0.956378
126 0.661414
127 0.0401731
128 0.050217
129 0.271805
130 0.957788
131 0.653354
132 1
133 0.0270968
134 1
135 0.0244382
136 0.658566
137 0.656569
138 0.666319
139 0.664835
140 0.654109
141 0.959602
142 0.262992
143 0.0396609
144 0.0375941
145 0.0438083
146 0.662328
147 0.653091
148 0.0338723
149 1
150 0.0483049
151 0.0355429
152 0.0317722
153 0.657355
154 0.666133
155 0.0263373
156 0.651569
157 0.656061
158 0.0303088
159 0.0492211
160 0.0501132
161 0.0260077
162 0.664547
163 0.650337
164 0.0254696
165 0.0187832
166 0.0500153
167 0.034582
168 0.0403584
169 0.0492399
170 0.0432779
171 0.0445052
172 0.660134
173 0.65418
174 0.0311796
175 0.0518475
176 0.0423612
177 0.0444509
178 0.457381
179 0.272001
180 0.656617
181 0.0528329
182 0.0218364
183 0.0417877
184 0.0331568
185 0.0361497
186 0.0409293
187 0.654506
188 0.270587
189 0.458313
190 0.0343157
191 0.0483879
192 0.0216091
193 0.0269917
194 0.0375466
195 0.661323
196 0.658285
197 0.0499174
198 0.0510823
199 0.0449509
200 0.0456327
201 0.0209992
202 0.0207393
203 0.652147
204 0.656319
205 0.0394739
206 0.0341196
207 0.0237883
208 0.0207136
209 0.0470411
210 0.0240739
211 0.456045
212 0.658339
213 0.283405
214 0.0376168
215 0.0222658
216 0.0471422
217 0.0245954
218 0.278967
219 0.656451
220 0.457797
221 0.0418629
222 0.0288482
223 0.0196725
224 0.0207833
225 0.0192606
226 0.0426775
227 0.277011
228 0.280738
229 0.653728
230 0.654328
231 0.662746
232 0.658776
233 0.663091
234 0.659867
235 0.27471
236 0.275977
237 0.0290579
238 0.0442633
239 0.0434157
240 0.0452318
241 0.0346178
242 0.0390029
243 0.0294747
244 0.27282
245 0.456209
246 0.648544
247 0.652629
248 0.647214
249 0.644017
250 0.452422
251 0.27182
252 0.0287778
253 0.033546
254 0.0385607
255 0.0455057
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 1 Sad>
<Un>
1.5014
<Cg 0 Fm:Input>
<Cn 256>
0 0.465531
1 0.282493
2 0.669913
3 0.283167
4 0.026629
5 0.65729
6 1
7 1
8 1
9 1
10 0.663807
11 0.0386478
12 0.282574
13 0.66042
14 0.279326
15 0.46303
16 0.0467587
17 0.462455
18 0.0254701
19 0.663992
20 0.662818
21 0.669547
22 0.0213121
23 0.0355998
24 0.0464361
25 0.0375216
26 0.659441
27 0.834165
28 0.670359
29 0.0515833
30 0.464038
31 0.0272225
32 0.0448089
33 0.0223118
34 0.665835
35 0.660734
36 0.666537
37 0.0396988
38 1
39 0.0466497
40 0.0337869
41 1
42 0.0435901
43 0.667646
44 0.655419
45 0.664434
46 0.0482225
47 0.044965
48 0.0288278
49 0.462421
50 0.450702
51 0.825123
52 0.0408881
53 0.0271683
54 0.0256292
55 1
56 1
57 0.02616
58 0.0234095
59 0.666538
60 0.269927
61 0.457858
62 0.468536
63 0.0238771
64 0.035541
65 0.03536
66 1
67 0.6647
68 0.0293247
69 0.0417383
70 0.0424394
71 0.0404937
72 0.0394187
73 0.0333641
74 0.0457362
75 0.0419202
76 0.666257
77 1
78 0.0470124
79 0.0482127
80 0.027382
81 0.456456
82 0.665745
83 0.669512
84 0.0387986
85 0.0491028
86 0.041017
87 1
88 0.662657
89 0.0305317
90 0.0258265
91 0.0294072
92 0.662864
93 0.662171
94 0.460953
95 0.0331696
96 0.0205722
97 0.659091
98 1
99 0.663455
100 0.0354711
101 0.0482979
102 0.0295669
103 1
104 0.0323233
105 0.0506736
106 0.020396
107 0.026394
108 0.668424
109 1
110 0.665267
111 0.021371
112 0.0388373
113 0.660177
114 0.789597
115 0.66116
116 0.0252223
117 0.0338257
118 0.0358878
119 0.656407
120 0.0260658
121 0.0180968
122 0.0285167
123 0.0193523
124 0.6623
125 0.787608
126 0.663992
127 0.0381003
128 0.0259379
129 0.271681
130 0.787798
131 0.658863
132 0.0380771
133 0.0356686
134 1
135 0.0335153
136 0.66182
137 0.662915
138 0.0273474
139 0.0297086
140 0.664339
141 0.785568
142 0.263236
143 0.0436904
144 0.0440409
145 0.041364
146 0.65777
147 0.667597
148 1
149 1
150 0.0268769
151 0.0355823
152 0.0257593
153 0.661515
154 1
155 0.664443
156 0.665125
157 0.658833
158 0.0511691
159 0.0381122
160 0.0364052
161 0.0233464
162 0.660947
163 0.660253
164 0.0393168
165 0.0216067
166 0.0354773
167 0.0186049
168 0.0195083
169 0.0432597
170 0.0273494
171 0.0204238
172 0.661598
173 0.656217
174 0.023932
175 0.0199808
176 0.0449065
177 0.0278661
178 0.456866
179 0.269582
180 0.668289
181 0.0480335
182 0.0275557
183 0.0380543
184 0.036637
185 0.0374384
186 0.0206113
187 0.662036
188 0.277232
189 0.457214
190 0.0374083
191 0.018148
192 0.0413521
193 0.0332502
194 0.0207078
195 0.660228
196 0.66145
197 0.0340364
198 0.0463167
199 0.0237379
200 0.0291077
201 0.0223449
202 0.0377047
203 0.667557
204 0.661617
205 0.0244293
206 0.0382415
207 0.032969
208 0.0412976
209 0.0321795
210 0.0341462
211 0.454662
212 0.66276
213 0.291058
214 0.0484465
215 0.0228223
216 0.0476024
217 0.0195415
218 0.277181
219 0.659997
220 0.454979
221 0.0480082
222 0.0488526
223 0.029282
224 0.0521757
225 0.0224638
226 0.0245341
227 0.268953
228 0.281715
229 0.658141
230 0.655207
231 0.665906
232 0.660804
233 0.665867
234 0.665435
235 0.280012
236 0.269374
237 0.0313346
238 0.038676
239 0.0210614
240 0.0450913
241 0.0290713
242 0.0298728
243 0.0369741
244 0.271582
245 0.455137
246 0.647518
247 0.651852
248 0.646383
249 0.643049
250 0.450192
251 0.269031
252 0.034231
253 0.0476287
254 0.0466935
255 0.0461608
</Cn>
</Cg>
</Un>
</UgUn>
</Ug>
</Lay>
<Lay Gender>
<acts_m_avg 0.15>
<acts_p_avg 0.15>
<acts_p_avg_eff 0.15>
<adapt_gi 1>
<Ug>
<UgUn 0 Female>
<Un>
0.136519
<Cg 0 Fm:Input>
<Cn 256>
0 0.646901
1 0.379464
2 1
3 0.397504
4 0.0482383
5 0.040634
6 1
7 1
8 1
9 1
10 0.0203113
11 0.0469962
12 0.384213
13 1
14 0.384405
15 0.642001
16 0.0210156
17 0.646044
18 0.0217254
19 1
20 0.0295536
21 1
22 0.0457511
23 0.0497193
24 0.0434175
25 0.0202132
26 1
27 0.287989
28 1
29 0.0182778
30 0.638994
31 0.0396098
32 0.0226501
33 0.0321882
34 1
35 0.0446107
36 1
37 0.0516691
38 0.562818
39 0.552164
40 0.556286
41 0.55118
42 0.0216799
43 1
44 0.040638
45 1
46 0.0451235
47 0.047239
48 0.0487801
49 0.636774
50 0.0454109
51 1
52 0.0320227
53 0.0422563
54 0.559763
55 0.555473
56 0.55916
57 0.554696
58 0.0188353
59 1
60 0.0384854
61 0.0370029
62 0.6365
63 0.0440965
64 0.0486363
65 0.0458393
66 1
67 1
68 0.0351744
69 0.0223679
70 0.0236133
71 0.0426551
72 0.0531826
73 0.0512911
74 0.0341467
75 0.050157
76 1
77 1
78 0.0235053
79 0.048837
80 0.0493679
81 0.0443169
82 0.0290637
83 1
84 0.0480296
85 0.0296704
86 0.0366879
87 1
88 0.0511086
89 0.0441918
90 0.0476041
91 0.0375867
92 1
93 0.027373
94 0.0182088
95 0.0196325
96 0.0300013
97 0.0253137
98 1
99 1
100 0.0203034
101 0.0376731
102 0.0230995
103 1
104 0.0255981
105 0.0357409
106 0.0366886
107 0.0409706
108 1
109 1
110 0.0284502
111 0.034672
112 0.0506245
113 0.0368462
114 0.583784
115 1
116 0.0528108
117 0.0437774
118 0.0497538
119 0.0496881
120 0.0382273
121 0.0251242
122 0.0298861
123 0.042415
124 1
125 0.573831
126 0.036992
127 0.0292421
128 0.0356465
129 0.0295285
130 0.5749
131 1
132 0.55105
133 0.0213511
134 1
135 0.020219
136 1
137 0.0274605
138 0.528232
139 0.0270788
140 1
141 0.568685
142 0.0415828
143 0.0394799
144 0.0290728
145 0.0460138
146 0.0419305
147 1
148 0.551606
149 1
150 0.0333639
151 0.0404492
152 0.0490455
153 1
154 0.587224
155 0.0202584
156 1
157 0.0357439
158 0.0291847
159 0.0461064
160 0.0319009
161 0.0277862
162 0.0346498
163 1
164 0.0211577
165 0.0316704
166 0.0302142
167 0.0222104
168 0.0450415
169 0.0323924
170 0.0182181
171 0.0482978
172 1
173 0.0385207
174 0.0491686
175 0.0253006
176 0.0404812
177 0.0496266
178 0.0351021
179 0.0460692
180 1
181 0.0325787
182 0.0353213
183 0.0360872
184 0.050932
185 0.0419021
186 0.0493262
187 1
188 0.0412413
189 0.0211996
190 0.0466387
191 0.0240671
192 0.0256274
193 0.0241632
194 0.0472891
195 0.0301255
196 1
197 0.0471843
198 0.0403512
199 0.0183353
200 0.0351478
201 0.031649
202 0.0452085
203 1
204 0.0406465
205 0.0414881
206 0.0373256
207 0.0522521
208 0.0403812
209 0.0374695
210 0.0315534
211 0.0384046
212 0.696585
213 0.381562
214 0.0426538
215 0.0406934
216 0.0362763
217 0.0364835
218 0.370848
219 0.69283
220 0.0468538
221 0.0440608
222 0.0296265
223 0.0521789
224 0.0186289
225 0.0445605
226 0.0216099
227 0.0286006
228 0.0355567
229 0.70741
230 0.691246
231 0.70691
232 0.710284
233 0.708567
234 0.708467
235 0.048869
236 0.0480838
237 0.0223785
238 0.03167
239 0.0198571
240 0.046698
241 0.0304001
242 0.0494315
243 0.0272213
244 0.0190621
245 0.0492446
246 0.410466
247 0.406103
248 0.413441
249 0.408992
250 0.0458543
251 0.0344614
252 0.0496297
253 0.0235364
254 0.0295439
255 0.0317212
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 1 Male>
<Un>
0.184988
<Cg 0 Fm:Input>
<Cn 256>
0 0.0318249
1 0.021905
2 0.0312183
3 0.0456553
4 0.0367022
5 1
6 1
7 1
8 1
9 1
10 1
11 0.0261253
12 0.0220272
13 0.0507924
14 0.0391245
15 0.0481811
16 0.0346784
17 0.0496438
18 0.0312901
19 0.0478597
20 1
21 0.031856
22 0.0308675
23 0.0245408
24 0.0256559
25 0.0446715
26 0.0432586
27 1
28 0.0483135
29 0.0338483
30 0.031525
31 0.048937
32 0.0495209
33 0.0412713
34 0.027972
35 1
36 0.0180639
37 0.0215417
38 0.570018
39 0.560695
40 0.558561
41 0.560204
42 0.0364521
43 0.0298291
44 1
45 0.0299871
46 0.045329
47 0.022071
48 0.036747
49 0.0195655
50 0.65214
51 0.425907
52 0.0304678
53 0.0299791
54 0.568621
55 0.563081
56 0.561422
57 0.566819
58 0.0214892
59 0.0350144
60 0.393296
61 0.656452
62 0.0424248
63 0.0282952
64 0.0522222
65 0.0500203
66 1
67 0.0268368
68 0.0396697
69 0.0255662
70 0.0450552
71 0.0213267
72 0.0503045
73 0.0186967
74 0.0409423
75 0.0194797
76 0.0345614
77 1
78 0.0485492
79 0.0298767
80 0.0468066
81 0.665936
82 1
83 0.0210748
84 0.0384075
85 0.0440363
86 0.0399752
87 1
88 1
89 0.0447081
90 0.0251739
91 0.0307367
92 0.0405289
93 1
94 0.657951
95 0.0509106
96 0.0349622
97 1
98 1
99 0.0498169
100 0.0228402
101 0.0286301
102 0.0482821
103 1
104 0.0392414
105 0.0340544
106 0.0480631
107 0.0289234
108 0.0369995
109 1
110 1
111 0.0427891
112 0.0476837
113 1
114 1
115 0.0423186
116 0.0440799
117 0.0485195
118 0.0229785
119 1
120 0.0299472
121 0.0473021
122 0.0448712
123 0.0346488
124 0.0351245
125 1
126 1
127 0.0188629
128 0.0378586
129 0.390688
130 1
131 0.0527808
132 0.569567
133 0.0359739
134 1
135 0.0288821
136 0.0489491
137 1
138 0.0186066
139 0.522757
140 0.0375557
141 1
142 0.386701
143 0.0292449
144 0.0440874
145 0.0486797
146 1
147 0.0288197
148 0.559024
149 1
150 0.0413567
151 0.048427
152 0.0472749
153 0.0500469
154 1
155 0.519549
156 0.0335253
157 1
158 0.0355644
159 0.0473418
160 0.0216122
161 0.0340094
162 1
163 0.0371495
164 0.0483452
165 0.0356004
166 0.0473011
167 0.0214187
168 0.0466146
169 0.0243743
170 0.0235254
171 0.0396126
172 0.0226425
173 1
174 0.0291585
175 0.0230152
176 0.0401782
177 0.0425417
178 0.653049
179 0.385042
180 0.0429267
181 0.038109
182 0.0477601
183 0.0381465
184 0.0354698
185 0.0429713
186 0.0350942
187 0.0255519
188 0.39568
189 0.651399
190 0.0436765
191 0.0346885
192 0.0323133
193 0.0511453
194 0.0397063
195 1
196 0.0245486
197 0.0449251
198 0.0253305
199 0.0357112
200 0.0375961
201 0.0282071
202 0.0428296
203 0.0408087
204 1
205 0.0443702
206 0.0364537
207 0.0440447
208 0.0298453
209 0.0510133
210 0.0409734
211 0.641371
212 0.419942
213 0.0425624
214 0.0308711
215 0.0264349
216 0.0407455
217 0.0453793
218 0.0504929
219 0.418263
220 0.651392
221 0.0312841
222 0.0316941
223 0.0311627
224 0.0353649
225 0.020257
226 0.0224438
227 0.386771
228 0.390774
229 0.42599
230 0.418189
231 0.428695
232 0.424856
233 0.424317
234 0.417351
235 0.385462
236 0.389681
237 0.0325899
238 0.0494894
239 0.0406351
240 0.0357683
241 0.0355048
242 0.0192641
243 0.0401994
244 0.383026
245 0.635204
246 0.671267
247 0.685091
248 0.673769
249 0.667251
250 0.640672
251 0.384723
252 0.0392464
253 0.0445679
254 0.0363617
255 0.0421258
</Cn>
</Cg>
</Un>
</UgUn>
</Ug>
</Lay>
<Lay Identity>
<acts_m_avg 0.15>
<acts_p_avg 0.15>
<acts_p_avg_eff 0.15>
<adapt_gi 1>
<Ug>
<UgUn 0 Alberto>
<Un>
0.499585
<Cg 0 Fm:Input>
<Cn 256>
0 0.113414
1 0.154841
2 0.144091
3 0.0571048
4 0.0902959
5 0.809568
6 0.81873
7 0.809332
8 0.841764
9 0.808158
10 0.832084
11 0.0975959
12 0.0605315
13 0.0657741
14 0.0621955
15 0.142558
16 0.115375
17 0.101351
18 0.0739913
19 0.117298
20 0.818438
21 0.132044
22 0.12879
23 0.155929
24 0.149385
25 0.110577
26 0.0841061
27 0.810347
28 0.0752886
29 0.0849257
30 0.0618283
31 0.10437
32 0.151725
33 0.095392
34 0.11023
35 0.81122
36 0.149001
37 0.141901
38 0.525441
39 0.524352
40 0.539259
41 0.465593
42 0.0747503
43 0.0588608
44 0.836661
45 0.0945396
46 0.0570777
47 0.115002
48 0.151134
49 0.0657782
50 0.845723
51 0.146856
52 0.0962635
53 0.0994002
54 0.478081
55 0.491013
56 0.527545
57 0.494619
58 0.1557
59 0.122756
60 0.107208
61 0.817177
62 0.155809
63 0.14646
64 0.0891775
65 0.0906067
66 0.814524
67 0.149288
68 0.128736
69 0.15691
70 0.101611
71 0.0623403
72 0.0616188
73 0.137602
74 0.0764556
75 0.134887
76 0.131918
77 0.837422
78 0.160934
79 0.0891021
80 0.102352
81 0.817068
82 0.822043
83 0.0691189
84 0.0736297
85 0.141266
86 0.131941
87 0.81229
88 0.811724
89 0.0879713
90 0.0901411
91 0.15003
92 0.1259
93 0.803275
94 0.820422
95 0.147111
96 0.148841
97 0.816128
98 0.815227
99 0.148846
100 0.0901942
101 0.0722562
102 0.0606035
103 0.806569
104 0.163398
105 0.135543
106 0.078804
107 0.136224
108 0.116513
109 0.844547
110 0.839614
111 0.112409
112 0.0703796
113 0.829257
114 0.817018
115 0.15987
116 0.119287
117 0.159253
118 0.138796
119 0.797269
120 0.0966077
121 0.151392
122 0.120625
123 0.168565
124 0.130191
125 0.836817
126 0.803893
127 0.0593082
128 0.122641
129 0.100935
130 0.804692
131 0.0922122
132 0.474735
133 0.148786
134 0.827674
135 0.133224
136 0.135484
137 0.833694
138 0.0591288
139 0.475112
140 0.115092
141 0.834596
142 0.129075
143 0.151234
144 0.150217
145 0.123001
146 0.834437
147 0.138547
148 0.518336
149 0.803753
150 0.141596
151 0.106901
152 0.157795
153 0.0846038
154 0.796365
155 0.488105
156 0.094095
157 0.812878
158 0.139245
159 0.0908989
160 0.147157
161 0.0968902
162 0.806959
163 0.156048
164 0.0976988
165 0.124769
166 0.09254
167 0.116206
168 0.0936397
169 0.0625726
170 0.140816
171 0.145076
172 0.122341
173 0.8461
174 0.111672
175 0.116683
176 0.155715
177 0.118406
178 0.811196
179 0.0780048
180 0.153377
181 0.0665521
182 0.0984706
183 0.118749
184 0.0569611
185 0.0785415
186 0.131372
187 0.128821
188 0.0670972
189 0.815192
190 0.123847
191 0.0964792
192 0.129092
193 0.151761
194 0.0874994
195 0.842466
196 0.164404
197 0.154692
198 0.122783
199 0.129759
200 0.131194
201 0.0851095
202 0.102907
203 0.0675879
204 0.801795
205 0.0906287
206 0.0812572
207 0.126737
208 0.062904
209 0.155043
210 0.100069
211 0.0473881
212 0.852991
213 0.115213
214 0.0761956
215 0.145569
216 0.0937421
217 0.126581
218 0.127901
219 0.844086
220 0.0739969
221 0.15366
222 0.163132
223 0.109423
224 0.133164
225 0.109074
226 0.155212
227 0.104337
228 0.0989193
229 0.842781
230 0.830288
231 0.823619
232 0.848678
233 0.850343
234 0.848471
235 0.112987
236 0.110291
237 0.0842164
238 0.162704
239 0.119539
240 0.0856369
241 0.0590558
242 0.0582264
243 0.1006
244 0.0625069
245 0.102613
246 0.0682163
247 0.0820782
248 0.0703629
249 0.0931008
250 0.0450867
251 0.059744
252 0.114548
253 0.152438
254 0.0902407
255 0.108733
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 1 Betty>
<Un>
0.718368
<Cg 0 Fm:Input>
<Cn 256>
0 0.839245
1 0.0931483
2 0.845159
3 0.125045
4 0.152838
5 0.116835
6 0.826673
7 0.862552
8 0.830938
9 0.826765
10 0.0822016
11 0.119743
12 0.142684
13 0.864977
14 0.126907
15 0.837085
16 0.101942
17 0.869753
18 0.107521
19 0.862006
20 0.163231
21 0.839145
22 0.0572951
23 0.156308
24 0.0873416
25 0.101218
26 0.854213
27 0.150132
28 0.845818
29 0.117926
30 0.845797
31 0.083973
32 0.101301
33 0.0953865
34 0.826013
35 0.0894534
36 0.867725
37 0.0982988
38 0.525814
39 0.506742
40 0.530491
41 0.556991
42 0.163448
43 0.862488
44 0.0985575
45 0.858367
46 0.097758
47 0.092978
48 0.0852825
49 0.836272
50 0.093953
51 0.850032
52 0.0961059
53 0.13974
54 0.534105
55 0.540336
56 0.534229
57 0.50933
58 0.073849
59 0.845703
60 0.0780123
61 0.0989673
62 0.854085
63 0.117374
64 0.120808
65 0.142825
66 0.856849
67 0.823743
68 0.0925286
69 0.106726
70 0.163724
71 0.0844566
72 0.0756437
73 0.081934
74 0.159346
75 0.163528
76 0.825711
77 0.870075
78 0.136558
79 0.120405
80 0.161559
81 0.155348
82 0.111388
83 0.866954
84 0.145551
85 0.107986
86 0.11211
87 0.842047
88 0.0726367
89 0.124891
90 0.1031
91 0.0777579
92 0.858305
93 0.152222
94 0.108853
95 0.114862
96 0.163945
97 0.0963341
98 0.828069
99 0.860287
100 0.133638
101 0.0570155
102 0.122605
103 0.869111
104 0.139351
105 0.104403
106 0.0831759
107 0.133928
108 0.868199
109 0.841296
110 0.112563
111 0.162849
112 0.0709991
113 0.0721696
114 0.118545
115 0.834367
116 0.088364
117 0.107579
118 0.0883141
119 0.106455
120 0.0671496
121 0.142142
122 0.0674188
123 0.118941
124 0.84761
125 0.057212
126 0.0988032
127 0.127578
128 0.107202
129 0.0782222
130 0.0857532
131 0.855305
132 0.523449
133 0.10152
134 0.836605
135 0.0667889
136 0.825074
137 0.0607585
138 0.510367
139 0.124701
140 0.84792
141 0.0704013
142 0.149871
143 0.154039
144 0.0974735
145 0.161809
146 0.120828
147 0.832164
148 0.505666
149 0.83989
150 0.101743
151 0.157979
152 0.0875871
153 0.866298
154 0.540249
155 0.105968
156 0.848751
157 0.145682
158 0.101506
159 0.0989542
160 0.126396
161 0.156477
162 0.148662
163 0.859045
164 0.13385
165 0.0833822
166 0.112398
167 0.0761589
168 0.108416
169 0.0918645
170 0.152889
171 0.106863
172 0.822982
173 0.112719
174 0.156011
175 0.10292
176 0.12202
177 0.0924551
178 0.0988515
179 0.112494
180 0.834856
181 0.127608
182 0.0635206
183 0.107419
184 0.144537
185 0.097154
186 0.147067
187 0.823751
188 0.0920648
189 0.141399
190 0.101144
191 0.120884
192 0.108172
193 0.10307
194 0.0633888
195 0.0903876
196 0.842549
197 0.141216
198 0.0606245
199 0.0924504
200 0.0836264
201 0.0742734
202 0.135008
203 0.82653
204 0.0566193
205 0.0969288
206 0.0732065
207 0.107058
208 0.15737
209 0.0675425
210 0.140833
211 0.104946
212 0.122191
213 0.870805
214 0.129031
215 0.0750047
216 0.145839
217 0.0604368
218 0.855037
219 0.107923
220 0.101075
221 0.150365
222 0.089303
223 0.15878
224 0.104981
225 0.0891642
226 0.0993052
227 0.0896979
228 0.0854633
229 0.0996739
230 0.841044
231 0.842531
232 0.8303
233 0.84605
234 0.107445
235 0.111012
236 0.145468
237 0.131491
238 0.154899
239 0.111336
240 0.1019
241 0.115119
242 0.0642339
243 0.101904
244 0.162871
245 0.106384
246 0.113112
247 0.161253
248 0.0935834
249 0.128608
250 0.128432
251 0.0916204
252 0.0660882
253 0.0579012
254 0.135747
255 0.158496
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 2 Lisa>
<Un>
0.643844
<Cg 0 Fm:Input>
<Cn 256>
0 0.83516
1 0.142429
2 0.831068
3 0.133044
4 0.131131
5 0.103842
6 0.830316
7 0.817453
8 0.850109
9 0.845295
10 0.136071
11 0.0872756
12 0.074115
13 0.836687
14 0.0949857
15 0.863449
16 0.125643
17 0.841018
18 0.15879
19 0.830881
20 0.0595601
21 0.828372
22 0.0702357
23 0.142359
24 0.144941
25 0.160804
26 0.838704
27 0.15582
28 0.856976
29 0.0934888
30 0.845439
31 0.1671
32 0.159648
33 0.0754915
34 0.840616
35 0.0873179
36 0.828742
37 0.158363
38 0.514487
39 0.508114
40 0.477352
41 0.543194
42 0.0773535
43 0.815834
44 0.123253
45 0.838394
46 0.0602671
47 0.128666
48 0.150318
49 0.831145
50 0.136913
51 0.838203
52 0.161604
53 0.122009
54 0.501067
55 0.530341
56 0.508632
57 0.527103
58 0.103203
59 0.816603
60 0.158398
61 0.136542
62 0.840026
63 0.0983535
64 0.132104
65 0.116035
66 0.847715
67 0.853602
68 0.127981
69 0.157552
70 0.0923591
71 0.0666619
72 0.0753846
73 0.136649
74 0.129524
75 0.130791
76 0.811322
77 0.84729
78 0.154109
79 0.0921366
80 0.069592
81 0.0679921
82 0.121026
83 0.860964
84 0.0606385
85 0.0697995
86 0.143381
87 0.8288
88 0.094811
89 0.0642638
90 0.0586635
91 0.0951088
92 0.833279
93 0.132153
94 0.164674
95 0.106345
96 0.0582871
97 0.103553
98 0.838066
99 0.833804
100 0.147318
101 0.0874363
102 0.123642
103 0.818932
104 0.131903
105 0.106124
106 0.0721482
107 0.145651
108 0.84432
109 0.828378
110 0.0707073
111 0.139737
112 0.0931085
113 0.109463
114 0.502301
115 0.82511
116 0.101888
117 0.116617
118 0.155182
119 0.0669662
120 0.11433
121 0.104073
122 0.139513
123 0.124832
124 0.856534
125 0.510427
126 0.0974721
127 0.0895542
128 0.116344
129 0.0707076
130 0.522702
131 0.821421
132 0.481319
133 0.070374
134 0.860281
135 0.119716
136 0.84472
137 0.163855
138 0.510435
139 0.0903531
140 0.822227
141 0.508331
142 0.148301
143 0.106806
144 0.162638
145 0.156258
146 0.159631
147 0.846259
148 0.543429
149 0.829142
150 0.134213
151 0.0639163
152 0.120476
153 0.84966
154 0.539
155 0.129077
156 0.83843
157 0.159504
158 0.126375
159 0.161266
160 0.0812256
161 0.159189
162 0.141131
163 0.821343
164 0.134543
165 0.161962
166 0.161441
167 0.0774012
168 0.164548
169 0.152969
170 0.0650043
171 0.12001
172 0.836284
173 0.0888005
174 0.106497
175 0.0994055
176 0.103372
177 0.123803
178 0.157985
179 0.116495
180 0.81976
181 0.0962531
182 0.0817777
183 0.0621404
184 0.131758
185 0.159151
186 0.119573
187 0.816865
188 0.162122
189 0.145583
190 0.0941155
191 0.0815464
192 0.0961119
193 0.160475
194 0.0864526
195 0.139996
196 0.846746
197 0.130997
198 0.142508
199 0.121591
200 0.109832
201 0.076719
202 0.153324
203 0.858703
204 0.0745222
205 0.126438
206 0.0712807
207 0.058484
208 0.150516
209 0.0700909
210 0.130031
211 0.155649
212 0.835344
213 0.0896844
214 0.122214
215 0.110176
216 0.155138
217 0.108857
218 0.15537
219 0.836082
220 0.149012
221 0.128579
222 0.116958
223 0.150803
224 0.0605631
225 0.0698034
226 0.160639
227 0.155601
228 0.141907
229 0.841516
230 0.0863593
231 0.115467
232 0.0631286
233 0.0775963
234 0.851683
235 0.134056
236 0.10876
237 0.152813
238 0.154784
239 0.113674
240 0.110329
241 0.113925
242 0.103371
243 0.0588496
244 0.156306
245 0.0965967
246 0.86705
247 0.869974
248 0.848799
249 0.854977
250 0.154525
251 0.0748079
252 0.0748229
253 0.0646373
254 0.163754
255 0.0855453
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 3 Mark>
<Un>
0.564766
<Cg 0 Fm:Input>
<Cn 256>
0 0.112738
1 0.0702971
2 0.087277
3 0.119146
4 0.0595808
5 0.804967
6 0.817248
7 0.804707
8 0.844096
9 0.851509
10 0.822712
11 0.073851
12 0.119743
13 0.134282
14 0.0782983
15 0.14693
16 0.068909
17 0.127965
18 0.124999
19 0.0897093
20 0.843256
21 0.0752236
22 0.0582718
23 0.0612061
24 0.144475
25 0.157602
26 0.141393
27 0.836151
28 0.0777999
29 0.150191
30 0.147314
31 0.158377
32 0.093831
33 0.154113
34 0.0584375
35 0.808236
36 0.157107
37 0.161969
38 0.544369
39 0.523492
40 0.538656
41 0.516136
42 0.0753642
43 0.0662121
44 0.821815
45 0.0879119
46 0.0890153
47 0.0591561
48 0.103873
49 0.0887207
50 0.819938
51 0.080079
52 0.108481
53 0.100103
54 0.481912
55 0.533884
56 0.493124
57 0.519095
58 0.112648
59 0.140876
60 0.129132
61 0.821294
62 0.146688
63 0.0997414
64 0.0931951
65 0.132214
66 0.831693
67 0.142796
68 0.100238
69 0.129076
70 0.156486
71 0.148428
72 0.086072
73 0.136984
74 0.0667374
75 0.0730049
76 0.0837603
77 0.82623
78 0.0793755
79 0.148568
80 0.101855
81 0.0489715
82 0.838711
83 0.124183
84 0.0935666
85 0.124216
86 0.0608189
87 0.84348
88 0.844822
89 0.161114
90 0.0756258
91 0.0799783
92 0.0598887
93 0.827098
94 0.0883615
95 0.0982425
96 0.104277
97 0.823956
98 0.804576
99 0.106675
100 0.143553
101 0.0661954
102 0.096359
103 0.803163
104 0.0590708
105 0.139212
106 0.150792
107 0.0812345
108 0.0848954
109 0.843555
110 0.833791
111 0.125357
112 0.0720324
113 0.817512
114 0.817651
115 0.145602
116 0.150599
117 0.0575509
118 0.0888292
119 0.846617
120 0.0670835
121 0.0831182
122 0.0821774
123 0.0635537
124 0.149976
125 0.830045
126 0.837406
127 0.145894
128 0.0901675
129 0.834586
130 0.82654
131 0.0577327
132 0.529906
133 0.147453
134 0.850661
135 0.161447
136 0.11954
137 0.848371
138 0.134077
139 0.491312
140 0.0666542
141 0.829153
142 0.85133
143 0.133546
144 0.0684031
145 0.140296
146 0.844388
147 0.0995737
148 0.483066
149 0.820436
150 0.100327
151 0.158355
152 0.115559
153 0.06471
154 0.812174
155 0.51048
156 0.125193
157 0.823934
158 0.056748
159 0.094842
160 0.125116
161 0.083376
162 0.805611
163 0.127446
164 0.157001
165 0.131842
166 0.0849643
167 0.0709073
168 0.139996
169 0.133508
170 0.115919
171 0.151734
172 0.14431
173 0.846803
174 0.100812
175 0.156138
176 0.0621301
177 0.075609
178 0.838532
179 0.140762
180 0.101085
181 0.10822
182 0.103511
183 0.0933822
184 0.0715979
185 0.154443
186 0.096895
187 0.0817847
188 0.0818129
189 0.82629
190 0.123224
191 0.0811464
192 0.0727008
193 0.0750551
194 0.144749
195 0.842131
196 0.158089
197 0.106394
198 0.154379
199 0.0737891
200 0.0835493
201 0.161146
202 0.107514
203 0.0599465
204 0.82893
205 0.0692675
206 0.0979487
207 0.0673457
208 0.0819998
209 0.0718465
210 0.109095
211 0.832766
212 0.0786631
213 0.101335
214 0.121815
215 0.058667
216 0.156986
217 0.0804536
218 0.0757265
219 0.0659045
220 0.811657
221 0.0845936
222 0.0780336
223 0.123296
224 0.106616
225 0.123784
226 0.157445
227 0.130137
228 0.84347
229 0.0832035
230 0.135416
231 0.141578
232 0.0866679
233 0.12621
234 0.0819099
235 0.864976
236 0.106023
237 0.104851
238 0.0661713
239 0.131146
240 0.110767
241 0.112484
242 0.11623
243 0.103681
244 0.123796
245 0.826832
246 0.823671
247 0.847932
248 0.838528
249 0.824231
250 0.833494
251 0.133696
252 0.157297
253 0.125525
254 0.151859
255 0.142602
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 4 Wendy>
<Un>
0.51603
<Cg 0 Fm:Input>
<Cn 256>
0 0.0636354
1 0.850097
2 0.812255
3 0.813081
4 0.150529
5 0.0576319
6 0.814594
7 0.798143
8 0.842245
9 0.835108
10 0.131913
11 0.157387
12 0.82372
13 0.833581
14 0.830712
15 0.0797337
16 0.114787
17 0.0994792
18 0.0933121
19 0.816916
20 0.0706163
21 0.836242
22 0.0680449
23 0.0935997
24 0.119155
25 0.165726
26 0.822867
27 0.576992
28 0.835372
29 0.0960126
30 0.107104
31 0.14858
32 0.0570426
33 0.0620297
34 0.808353
35 0.117359
36 0.831909
37 0.122857
38 0.508697
39 0.520839
40 0.493561
41 0.52545
42 0.120987
43 0.824142
44 0.0646361
45 0.8098
46 0.159691
47 0.130474
48 0.150987
49 0.0854705
50 0.111781
51 0.813691
52 0.158129
53 0.111645
54 0.491088
55 0.481973
56 0.485218
57 0.485116
58 0.139364
59 0.828111
60 0.0858764
61 0.161095
62 0.0927151
63 0.086709
64 0.0704018
65 0.0970771
66 0.813867
67 0.796175
68 0.056614
69 0.0569067
70 0.0565779
71 0.116741
72 0.149688
73 0.139358
74 0.129561
75 0.13275
76 0.821409
77 0.801477
78 0.131037
79 0.122551
80 0.114775
81 0.0855365
82 0.142888
83 0.833396
84 0.124032
85 0.105157
86 0.131993
87 0.838622
88 0.0868603
89 0.0707244
90 0.109863
91 0.153428
92 0.797997
93 0.0931974
94 0.112395
95 0.0585999
96 0.153497
97 0.0990286
98 0.803723
99 0.825921
100 0.14019
101 0.0663632
102 0.110526
103 0.811913
104 0.160344
105 0.141765
106 0.139893
107 0.1097
108 0.815328
109 0.823317
110 0.151773
111 0.158345
112 0.0680071
113 0.143204
114 0.832124
115 0.833118
116 0.0908774
117 0.104971
118 0.149579
119 0.0604615
120 0.070677
121 0.141741
122 0.0746451
123 0.154466
124 0.840187
125 0.823767
126 0.150325
127 0.157936
128 0.105404
129 0.145058
130 0.837248
131 0.826803
132 0.52762
133 0.114294
134 0.803198
135 0.087472
136 0.792169
137 0.0667007
138 0.493454
139 0.158933
140 0.805389
141 0.838963
142 0.0920876
143 0.0920036
144 0.101155
145 0.0890752
146 0.0752494
147 0.829529
148 0.509725
149 0.817095
150 0.0754151
151 0.0891085
152 0.0873976
153 0.815492
154 0.526815
155 0.158493
156 0.801934
157 0.101215
158 0.101455
159 0.0993051
160 0.0647883
161 0.164008
162 0.0592416
163 0.842259
164 0.116872
165 0.0945118
166 0.0940559
167 0.0573487
168 0.159622
169 0.0846771
170 0.11092
171 0.0604567
172 0.81193
173 0.0967153
174 0.10078
175 0.159654
176 0.151785
177 0.103393
178 0.163671
179 0.0845717
180 0.833661
181 0.107426
182 0.128496
183 0.100485
184 0.145409
185 0.0661858
186 0.0635882
187 0.815719
188 0.0642548
189 0.0993068
190 0.15351
191 0.132518
192 0.12576
193 0.134273
194 0.106426
195 0.106228
196 0.800754
197 0.113929
198 0.0835386
199 0.153212
200 0.0830328
201 0.165768
202 0.149783
203 0.790738
204 0.0703032
205 0.0753001
206 0.138987
207 0.0820458
208 0.152832
209 0.095176
210 0.0966887
211 0.13108
212 0.821336
213 0.0670739
214 0.0578133
215 0.0687907
216 0.131221
217 0.148107
218 0.153575
219 0.818741
220 0.151152
221 0.139648
222 0.122647
223 0.155375
224 0.0650451
225 0.150687
226 0.0627832
227 0.128218
228 0.0893496
229 0.830963
230 0.835984
231 0.841008
232 0.824354
233 0.844447
234 0.835678
235 0.138094
236 0.084466
237 0.151903
238 0.110363
239 0.0678518
240 0.0570193
241 0.0740736
242 0.0731171
243 0.0851693
244 0.146554
245 0.127656
246 0.0681499
247 0.104144
248 0.106352
249 0.0820027
250 0.0640087
251 0.151529
252 0.161145
253 0.161116
254 0.0927045
255 0.141269
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 5 Zane>
<Un>
0.506004
<Cg 0 Fm:Input>
<Cn 256>
0 0.149933
1 0.0838949
2 0.0770029
3 0.132758
4 0.0621303
5 0.828968
6 0.829738
7 0.800629
8 0.813772
9 0.807692
10 0.842338
11 0.149779
12 0.120257
13 0.121585
14 0.123143
15 0.155506
16 0.118872
17 0.120173
18 0.160129
19 0.0927381
20 0.831574
21 0.139479
22 0.0580255
23 0.132713
24 0.0572683
25 0.0857643
26 0.0653526
27 0.835069
28 0.129854
29 0.0848886
30 0.0600557
31 0.126119
32 0.105026
33 0.113226
34 0.0819647
35 0.834043
36 0.0994859
37 0.0619755
38 0.511079
39 0.523103
40 0.515712
41 0.523847
42 0.0931695
43 0.118458
44 0.84158
45 0.101879
46 0.145808
47 0.0721676
48 0.09159
49 0.0733703
50 0.0553719
51 0.84095
52 0.143512
53 0.0632385
54 0.474813
55 0.473344
56 0.474576
57 0.474474
58 0.138786
59 0.106624
60 0.856168
61 0.0743599
62 0.0716158
63 0.143798
64 0.0931566
65 0.0804434
66 0.838975
67 0.128466
68 0.125237
69 0.163625
70 0.0954504
71 0.10784
72 0.0989529
73 0.0946167
74 0.110314
75 0.0738726
76 0.0946138
77 0.845725
78 0.127497
79 0.156468
80 0.164952
81 0.799334
82 0.829701
83 0.0613914
84 0.0895618
85 0.1579
86 0.153906
87 0.799664
88 0.797777
89 0.0709715
90 0.119914
91 0.0931766
92 0.137466
93 0.794601
94 0.82231
95 0.0635898
96 0.160823
97 0.806058
98 0.817901
99 0.122556
100 0.0710855
101 0.118507
102 0.142499
103 0.83287
104 0.16179
105 0.0730937
106 0.113432
107 0.119589
108 0.105424
109 0.832071
110 0.833247
111 0.138147
112 0.0730764
113 0.83303
114 0.821381
115 0.151059
116 0.152426
117 0.0801462
118 0.07249
119 0.811827
120 0.145984
121 0.163572
122 0.114783
123 0.110682
124 0.143641
125 0.794164
126 0.811855
127 0.0709902
128 0.116265
129 0.143743
130 0.817018
131 0.102712
132 0.503791
133 0.16489
134 0.82817
135 0.0983517
136 0.132886
137 0.808992
138 0.106127
139 0.499424
140 0.155388
141 0.831168
142 0.149082
143 0.138551
144 0.127859
145 0.121856
146 0.833783
147 0.0743304
148 0.481291
149 0.804819
150 0.0661686
151 0.10931
152 0.0776334
153 0.130538
154 0.800754
155 0.515114
156 0.0762531
157 0.805919
158 0.131369
159 0.160654
160 0.0709896
161 0.137316
162 0.830262
163 0.150294
164 0.0947818
165 0.0592509
166 0.151825
167 0.145887
168 0.146545
169 0.0835852
170 0.0842401
171 0.15413
172 0.156253
173 0.809523
174 0.0682194
175 0.120417
176 0.149512
177 0.112626
178 0.0738555
179 0.84196
180 0.112667
181 0.100584
182 0.0612055
183 0.142277
184 0.163991
185 0.125726
186 0.128182
187 0.095667
188 0.837833
189 0.0868061
190 0.134945
191 0.0908408
192 0.0886715
193 0.138977
194 0.0683049
195 0.835356
196 0.0727854
197 0.119735
198 0.14073
199 0.0707242
200 0.118961
201 0.122981
202 0.0623778
203 0.136871
204 0.833776
205 0.160316
206 0.122145
207 0.155878
208 0.159966
209 0.0638753
210 0.139639
211 0.810705
212 0.117043
213 0.108557
214 0.150823
215 0.0760214
216 0.0996038
217 0.136133
218 0.0872044
219 0.119777
220 0.814102
221 0.0907112
222 0.150917
223 0.136601
224 0.0765163
225 0.134755
226 0.101601
227 0.856315
228 0.105146
229 0.0760698
230 0.108138
231 0.129012
232 0.11218
233 0.104737
234 0.13202
235 0.129428
236 0.847141
237 0.134332
238 0.134605
239 0.107209
240 0.0645842
241 0.0687677
242 0.147588
243 0.162782
244 0.8172
245 0.854128
246 0.817505
247 0.829848
248 0.830879
249 0.840483
250 0.819674
251 0.834095
252 0.151337
253 0.0937411
254 0.116218
255 0.129936
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 6 >
<Un>
-0.0150878
<Cg 0 Fm:Input>
<Cn 256>
0 0.279963
1 0.221633
2 0.288259
3 0.25032
4 0.246962
5 0.16367
6 0.254177
7 0.255298
8 0.220332
9 0.274799
10 0.180459
11 0.212802
12 0.183912
13 0.145522
14 0.136301
15 0.252306
16 0.224743
17 0.203684
18 0.192043
19 0.102834
20 0.145726
21 0.293718
22 0.13933
23 0.18765
24 0.27706
25 0.26781
26 0.150767
27 0.290929
28 0.250459
29 0.237434
30 0.256552
31 0.145531
32 0.230016
33 0.275314
34 0.276846
35 0.109883
36 0.120192
37 0.144231
38 0.107098
39 0.291927
40 0.162824
41 0.298353
42 0.226921
43 0.100522
44 0.220116
45 0.109374
46 0.174305
47 0.133195
48 0.266222
49 0.126203
50 0.173697
51 0.206099
52 0.22048
53 0.275125
54 0.242191
55 0.270281
56 0.228757
57 0.277988
58 0.126308
59 0.243805
60 0.173772
61 0.2583
62 0.133992
63 0.200159
64 0.291223
65 0.190717
66 0.283589
67 0.294501
68 0.148551
69 0.243336
70 0.1623
71 0.189742
72 0.197436
73 0.186368
74 0.193834
75 0.124243
76 0.283519
77 0.100259
78 0.155966
79 0.260774
80 0.11249
81 0.209207
82 0.23712
83 0.271517
84 0.281188
85 0.203204
86 0.243907
87 0.236421
88 0.105966
89 0.261229
90 0.226071
91 0.288487
92 0.259082
93 0.2046
94 0.197481
95 0.278655
96 0.206808
97 0.14195
98 0.259048
99 0.116254
100 0.239362
101 0.200296
102 0.188905
103 0.247237
104 0.190163
105 0.275031
106 0.229676
107 0.148149
108 0.295905
109 0.248934
110 0.221823
111 0.214671
112 0.26961
113 0.143379
114 0.256052
115 0.288025
116 0.128827
117 0.225375
118 0.262759
119 0.255841
120 0.140677
121 0.171819
122 0.211225
123 0.250714
124 0.120221
125 0.248877
126 0.207963
127 0.235085
128 0.119933
129 0.236274
130 0.230273
131 0.224263
132 0.287047
133 0.245027
134 0.199824
135 0.14158
136 0.218409
137 0.240051
138 0.101212
139 0.236718
140 0.105018
141 0.236023
142 0.288054
143 0.261312
144 0.294956
145 0.2784
146 0.286779
147 0.130283
148 0.163254
149 0.182928
150 0.220414
151 0.285994
152 0.225693
153 0.167135
154 0.112132
155 0.293112
156 0.29723
157 0.149851
158 0.275868
159 0.140635
160 0.291433
161 0.140855
162 0.23464
163 0.225319
164 0.102317
165 0.181925
166 0.204479
167 0.114185
168 0.100488
169 0.207917
170 0.139455
171 0.2483
172 0.15556
173 0.20027
174 0.223527
175 0.142487
176 0.156817
177 0.160367
178 0.283245
179 0.135783
180 0.127915
181 0.217346
182 0.13665
183 0.196024
184 0.161753
185 0.294903
186 0.181836
187 0.275074
188 0.11894
189 0.0993156
190 0.105579
191 0.112868
192 0.232067
193 0.125868
194 0.21348
195 0.29779
196 0.109009
197 0.278096
198 0.228579
199 0.227226
200 0.20563
201 0.147482
202 0.123869
203 0.25408
204 0.169391
205 0.288709
206 0.110481
207 0.190809
208 0.235458
209 0.159153
210 0.163367
211 0.214823
212 0.24214
213 0.298238
214 0.258076
215 0.216377
216 0.29502
217 0.288581
218 0.215293
219 0.295101
220 0.263522
221 0.10826
222 0.176729
223 0.131757
224 0.255855
225 0.121524
226 0.180342
227 0.228169
228 0.123884
229 0.16191
230 0.231674
231 0.262102
232 0.229224
233 0.202985
234 0.28399
235 0.224086
236 0.141224
237 0.119047
238 0.196116
239 0.11796
240 0.1575
241 0.187391
242 0.129212
243 0.231817
244 0.10885
245 0.166904
246 0.158635
247 0.159193
248 0.298496
249 0.223161
250 0.276292
251 0.24607
252 0.18253
253 0.261351
254 0.115997
255 0.132487
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 7 >
<Un>
0
<Cg 0 Fm:Input>
<Cn 256>
0 0.26509
1 0.20619
2 0.175371
3 0.234944
4 0.14458
5 0.193709
6 0.22593
7 0.272478
8 0.264574
9 0.145265
10 0.116249
11 0.162543
12 0.234635
13 0.133392
14 0.194514
15 0.219657
16 0.244587
17 0.26188
18 0.267447
19 0.207409
20 0.275
21 0.136725
22 0.195864
23 0.117553
24 0.291279
25 0.179696
26 0.102613
27 0.20525
28 0.10097
29 0.239709
30 0.145782
31 0.156679
32 0.245529
33 0.119793
34 0.184948
35 0.252513
36 0.201215
37 0.156239
38 0.280578
39 0.208658
40 0.146661
41 0.117406
42 0.188457
43 0.147926
44 0.16124
45 0.217184
46 0.196635
47 0.248035
48 0.257543
49 0.108898
50 0.154842
51 0.285156
52 0.161025
53 0.146074
54 0.242199
55 0.141357
56 0.141787
57 0.136479
58 0.213959
59 0.209838
60 0.240264
61 0.209072
62 0.112648
63 0.126891
64 0.259777
65 0.116622
66 0.152546
67 0.277353
68 0.100561
69 0.125129
70 0.11292
71 0.144048
72 0.287704
73 0.215578
74 0.101685
75 0.215013
76 0.172133
77 0.111284
78 0.134069
79 0.276083
80 0.245359
81 0.129137
82 0.205217
83 0.155003
84 0.293796
85 0.248352
86 0.252845
87 0.239347
88 0.214056
89 0.208805
90 0.286178
91 0.194372
92 0.109129
93 0.293699
94 0.291086
95 0.188272
96 0.205979
97 0.133435
98 0.251685
99 0.184093
100 0.291751
101 0.259967
102 0.20265
103 0.156079
104 0.131173
105 0.166439
106 0.223278
107 0.132085
108 0.123228
109 0.149028
110 0.275263
111 0.210532
112 0.263774
113 0.199693
114 0.226209
115 0.109865
116 0.108846
117 0.227729
118 0.146727
119 0.130564
120 0.183466
121 0.282983
122 0.193213
123 0.298806
124 0.164682
125 0.298952
126 0.252726
127 0.294432
128 0.152659
129 0.183939
130 0.18966
131 0.107793
132 0.117938
133 0.244286
134 0.281093
135 0.2836
136 0.201393
137 0.263397
138 0.198514
139 0.158811
140 0.194845
141 0.171293
142 0.205293
143 0.186028
144 0.106694
145 0.160646
146 0.167527
147 0.234414
148 0.196183
149 0.119
150 0.183696
151 0.241033
152 0.263787
153 0.239338
154 0.255993
155 0.105953
156 0.173087
157 0.294487
158 0.160586
159 0.152504
160 0.184608
161 0.219861
162 0.17452
163 0.28227
164 0.134124
165 0.245912
166 0.145259
167 0.276766
168 0.12133
169 0.285345
170 0.129046
171 0.200309
172 0.21674
173 0.169519
174 0.168396
175 0.145992
176 0.244727
177 0.197408
178 0.168206
179 0.29264
180 0.231678
181 0.120715
182 0.253183
183 0.129556
184 0.170827
185 0.138338
186 0.259253
187 0.288445
188 0.194231
189 0.271436
190 0.14824
191 0.29584
192 0.11303
193 0.263693
194 0.293612
195 0.254517
196 0.100026
197 0.122908
198 0.216491
199 0.25267
200 0.269438
201 0.145068
202 0.233697
203 0.114597
204 0.250074
205 0.165382
206 0.217397
207 0.227788
208 0.203457
209 0.244801
210 0.137594
211 0.240777
212 0.18202
213 0.179418
214 0.239433
215 0.180716
216 0.203453
217 0.253213
218 0.146379
219 0.143901
220 0.261211
221 0.260925
222 0.230542
223 0.249388
224 0.252607
225 0.237166
226 0.150936
227 0.230323
228 0.114737
229 0.230689
230 0.218123
231 0.266952
232 0.209049
233 0.26183
234 0.289637
235 0.281376
236 0.195421
237 0.227794
238 0.173349
239 0.205978
240 0.256203
241 0.171218
242 0.251686
243 0.136891
244 0.203873
245 0.273499
246 0.19279
247 0.198802
248 0.205805
249 0.218518
250 0.297983
251 0.194572
252 0.196079
253 0.239017
254 0.250432
255 0.12402
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 8 >
<Un>
0
<Cg 0 Fm:Input>
<Cn 256>
0 0.129181
1 0.264809
2 0.221969
3 0.11032
4 0.133811
5 0.10619
6 0.218858
7 0.106376
8 0.159828
9 0.153002
10 0.294626
11 0.257023
12 0.294089
13 0.113422
14 0.281546
15 0.24245
16 0.15414
17 0.204857
18 0.177945
19 0.107259
20 0.240624
21 0.114412
22 0.113961
23 0.281189
24 0.186245
25 0.261686
26 0.166714
27 0.27149
28 0.182851
29 0.210192
30 0.254397
31 0.197978
32 0.169647
33 0.169126
34 0.135682
35 0.243057
36 0.118872
37 0.290797
38 0.299183
39 0.277289
40 0.121845
41 0.172479
42 0.160266
43 0.269348
44 0.250264
45 0.267559
46 0.181213
47 0.223223
48 0.129901
49 0.166713
50 0.12747
51 0.283473
52 0.172108
53 0.142744
54 0.249347
55 0.27626
56 0.280925
57 0.195698
58 0.238405
59 0.154699
60 0.180015
61 0.178095
62 0.113298
63 0.239675
64 0.297689
65 0.18186
66 0.148588
67 0.108753
68 0.282681
69 0.187787
70 0.291538
71 0.279538
72 0.167914
73 0.145014
74 0.129215
75 0.201181
76 0.274698
77 0.251445
78 0.168536
79 0.171781
80 0.176245
81 0.126712
82 0.108703
83 0.175666
84 0.283025
85 0.284347
86 0.155653
87 0.230579
88 0.242018
89 0.266138
90 0.299676
91 0.251876
92 0.175165
93 0.241475
94 0.256657
95 0.264299
96 0.211808
97 0.244097
98 0.172961
99 0.182277
100 0.229171
101 0.193677
102 0.223086
103 0.232611
104 0.175125
105 0.143788
106 0.251703
107 0.240441
108 0.284611
109 0.168482
110 0.250866
111 0.194913
112 0.140274
113 0.110365
114 0.298698
115 0.186732
116 0.265685
117 0.100537
118 0.108013
119 0.176463
120 0.207195
121 0.110826
122 0.266739
123 0.115898
124 0.203042
125 0.157519
126 0.24881
127 0.262135
128 0.223462
129 0.234835
130 0.27133
131 0.133293
132 0.182904
133 0.27588
134 0.102758
135 0.211308
136 0.12414
137 0.281742
138 0.128087
139 0.137868
140 0.169261
141 0.219293
142 0.204864
143 0.222301
144 0.290195
145 0.296887
146 0.265937
147 0.24623
148 0.114188
149 0.166034
150 0.271645
151 0.190509
152 0.273327
153 0.244008
154 0.104465
155 0.232173
156 0.114024
157 0.103419
158 0.103914
159 0.15534
160 0.19072
161 0.145967
162 0.100639
163 0.246665
164 0.182623
165 0.17479
166 0.149947
167 0.171629
168 0.201042
169 0.230492
170 0.102832
171 0.218958
172 0.271497
173 0.143178
174 0.116407
175 0.11875
176 0.234259
177 0.146604
178 0.126215
179 0.232759
180 0.119565
181 0.151326
182 0.107802
183 0.277019
184 0.25576
185 0.230316
186 0.290319
187 0.287863
188 0.223054
189 0.188382
190 0.281576
191 0.178076
192 0.215333
193 0.208684
194 0.131336
195 0.200306
196 0.130288
197 0.220213
198 0.133461
199 0.245645
200 0.234072
201 0.104265
202 0.252861
203 0.107047
204 0.122894
205 0.280963
206 0.269811
207 0.106349
208 0.207974
209 0.219769
210 0.12274
211 0.20855
212 0.232851
213 0.219248
214 0.268898
215 0.105217
216 0.224782
217 0.17397
218 0.150406
219 0.252962
220 0.299461
221 0.103538
222 0.203343
223 0.266734
224 0.282896
225 0.187098
226 0.298385
227 0.165379
228 0.112495
229 0.251077
230 0.131324
231 0.191814
232 0.174488
233 0.170431
234 0.257057
235 0.130286
236 0.258409
237 0.134544
238 0.206386
239 0.206857
240 0.267573
241 0.17668
242 0.222907
243 0.102201
244 0.235303
245 0.255387
246 0.186592
247 0.249026
248 0.207598
249 0.160645
250 0.197986
251 0.13579
252 0.129663
253 0.238056
254 0.255934
255 0.266019
</Cn>
</Cg>
</Un>
</UgUn>
<UgUn 9 >
<Un>
0
<Cg 0 Fm:Input>
<Cn 256>
0 0.198022
1 0.112244
2 0.214777
3 0.184577
4 0.25054
5 0.158028
6 0.100222
7 0.26428
8 0.281135
9 0.281805
10 0.112882
11 0.11714
12 0.266882
13 0.113103
14 0.206315
15 0.105878
16 0.222648
17 0.163109
18 0.269644
19 0.142722
20 0.211362
21 0.102072
22 0.249212
23 0.260454
24 0.178077
25 0.242131
26 0.23426
27 0.268321
28 0.276762
29 0.240937
30 0.282272
31 0.240672
32 0.198367
33 0.276655
34 0.181586
35 0.178075
36 0.22713
37 0.216968
38 0.124839
39 0.174288
40 0.217429
41 0.240985
42 0.18225
43 0.178043
44 0.10354
45 0.184444
46 0.273879
47 0.298147
48 0.122918
49 0.182722
50 0.254711
51 0.258204
52 0.122654
53 0.268841
54 0.29546
55 0.106577
56 0.196105
57 0.140192
58 0.114572
59 0.291213
60 0.119828
61 0.110989
62 0.262142
63 0.224401
64 0.191754
65 0.203383
66 0.141933
67 0.191597
68 0.226916
69 0.112646
70 0.157377
71 0.205224
72 0.29333
73 0.14992
74 0.255433
75 0.25619
76 0.163161
77 0.21725
78 0.153113
79 0.148469
80 0.259156
81 0.242411
82 0.290013
83 0.124101
84 0.157744
85 0.297595
86 0.289542
87 0.163776
88 0.125717
89 0.146677
90 0.201443
91 0.169571
92 0.148799
93 0.214133
94 0.285199
95 0.150004
96 0.236725
97 0.126835
98 0.182223
99 0.130431
100 0.135035
101 0.27035
102 0.13554
103 0.255819
104 0.102964
105 0.116756
106 0.272293
107 0.228168
108 0.243986
109 0.190216
110 0.193273
111 0.117959
112 0.173717
113 0.235139
114 0.166045
115 0.147847
116 0.127754
117 0.177321
118 0.273574
119 0.13917
120 0.105829
121 0.27056
122 0.155917
123 0.260397
124 0.131975
125 0.283459
126 0.230159
127 0.162105
128 0.21479
129 0.207221
130 0.264715
131 0.116553
132 0.140794
133 0.197523
134 0.16758
135 0.172641
136 0.182759
137 0.161081
138 0.206032
139 0.219255
140 0.131226
141 0.20758
142 0.198937
143 0.167324
144 0.208257
145 0.247173
146 0.238559
147 0.217213
148 0.184965
149 0.276363
150 0.251329
151 0.226568
152 0.151164
153 0.120812
154 0.137702
155 0.18237
156 0.19774
157 0.215455
158 0.210831
159 0.145044
160 0.183096
161 0.102321
162 0.150007
163 0.100436
164 0.214114
165 0.160746
166 0.149064
167 0.127511
168 0.231565
169 0.247648
170 0.119049
171 0.173458
172 0.278412
173 0.172315
174 0.242302
175 0.152818
176 0.1556
177 0.219878
178 0.202568
179 0.173318
180 0.152554
181 0.277933
182 0.242942
183 0.294793
184 0.25078
185 0.11514
186 0.277167
187 0.18523
188 0.226458
189 0.213728
190 0.296025
191 0.113578
192 0.124343
193 0.226288
194 0.128134
195 0.252335
196 0.149058
197 0.101129
198 0.170899
199 0.129317
200 0.159843
201 0.132353
202 0.19326
203 0.101089
204 0.195003
205 0.163485
206 0.152805
207 0.198065
208 0.147755
209 0.114152
210 0.29753
211 0.284444
212 0.136209
213 0.13376
214 0.143761
215 0.15153
216 0.24863
217 0.20228
218 0.101474
219 0.257195
220 0.134366
221 0.182023
222 0.102909
223 0.162971
224 0.254109
225 0.135932
226 0.192894
227 0.184344
228 0.297644
229 0.281252
230 0.10682
231 0.137808
232 0.180311
233 0.19895
234 0.2413
235 0.165968
236 0.138081
237 0.134186
238 0.16536
239 0.287055
240 0.277924
241 0.109812
242 0.13898
243 0.168401
244 0.181956
245 0.179221
246 0.19428
247 0.216373
248 0.247354
249 0.140006
250 0.157056
251 0.192697
252 0.158301
253 0.253614
254 0.125912
255 0.138966
</Cn>
</Cg>
</Un>
</UgUn>
</Ug>
</Lay>
";
    };
   };
   auto_build=AUTO_BUILD;
   auto_load_wts=NO_AUTO_LOAD;
   auto_load_file=;
   brain_atlas_name=;
   cuda {sync_units=0: sync_cons=0: min_threads=32: max_threads=1024: cons_per_thread=2: timers_on=0: n_threads=32: };
   wt_save_fmt=TEXT;
   max_disp_size {x=17: y=16: z=2: };
   max_disp_size2d {x=16: y=28: };
   times {quarter=25: deep_cyc=5: time_inc=0.001: wt_bal_int=10: minus=75: plus=25: total_cycles=100: thal_gate_cycle=-2: };
   lstats {trg_max_act_crit=0.5: off_errs=1: on_errs=1: agg_unlearnable=0: wt_bal=0: };
   net_misc {spike=0: deep=0: bias_learn=1: trial_decay=1: diff_scale_p=0: diff_scale_q1=0: wt_bal=1: lay_gp_inhib=0: inhib_cons=0: };
   deep {on=0: ctxt=0: raw_net=0: mod_net=0: raw_qtr=0: };
   rel_netin {on=1: trl_skip=10: epc_skip=10: };
  };
 };
};
